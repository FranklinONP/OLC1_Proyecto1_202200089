/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
//Importacion de los analizadores

import Analizadores.analizador_lexico;
import Analizadores.analizador_sintactico;

import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import Errores.Error_;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.ArrayList;
import Errores.Token;
import java.util.LinkedList;
import java.util.Map;
import DB.ts;
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
/**
 *
 * @author 50232
 */
public class gui extends javax.swing.JFrame {

    //Variables Globales
    public static LinkedList<Error_> lista_errores = new LinkedList<Error_>();

    //Para tabla de tokens
    public static LinkedList<Token> listaTokens = new LinkedList<Token>();

    //Para tabla de Simbolos
    public static LinkedList<ts> listaSimbolos = new LinkedList<ts>();

    //Para guardar todo lo que voy a imprimir
    public static LinkedList<String> listaPrint = new LinkedList<String>();

    //rutas de imagenes
    public static LinkedList<String> listaRutas =new LinkedList<String>();
    
    //Aun no lo utilizo :D
    //Para guardar variables y sus atributos tipo double
    public static Map<String, Map> mapaDouble = new HashMap<>();

    private static int contadorPestanas = 1;
    private static int contImagenes=0;
    HashMap<JPanel, File> tabFileMap = new HashMap<>();

    /**
     * Creates new form gui
     */
    public gui() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        labelimg = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        Guadar = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        Guardar = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        jLabel6.setText("....");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 430, 1190, 190));

        jButton2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton2.setText("Anterior");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 390, -1, -1));

        jButton1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton1.setText("Siguiente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 390, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Consola");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Entrada");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, 20));

        jButton4.setText("+Pestaña");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, -1));

        jButton3.setText("Ejecutar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Visualizacion de Graficas");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 20, -1, -1));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelimg, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(labelimg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 50, 350, 330));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 60, 670, 310));

        jLabel4.setText("....");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 200, -1, -1));

        jLabel5.setText("....");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        jLabel7.setText("....");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 620, -1, -1));

        Guadar.setText("Archivo");
        Guadar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuadarActionPerformed(evt);
            }
        });

        jMenuItem3.setText("Nuevo Archivo");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        Guadar.add(jMenuItem3);

        jMenuItem4.setText("Abrir Archivo");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        Guadar.add(jMenuItem4);

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        Guadar.add(Guardar);

        jMenuItem6.setText("Eliminar Pestaña");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        Guadar.add(jMenuItem6);

        jMenuBar2.add(Guadar);

        jMenu10.setText("Reportes");

        jMenuItem7.setText("Reporte de Tokens");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem7);

        jMenuItem8.setText("Reporte de errores");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem8);

        jMenuItem9.setText("Reporte de Tabla de Simbolos");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem9);

        jMenuBar2.add(jMenu10);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout());  // Set the layout manager

        JTextArea textArea1 = new JTextArea();
        textArea1.setLineWrap(false);  // Desactiva el ajuste de línea para permitir el desplazamiento horizontal

        JScrollPane scrollPane = new JScrollPane(textArea1);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  // Añade la barra de desplazamiento horizontal

        panel4.add(scrollPane, BorderLayout.CENTER);  // Add the scroll pane to the center of the panel

        jTabbedPane1.addTab("Archivo " + contadorPestanas, panel4);
        contadorPestanas++;

        // Añade una entrada al mapa con un archivo null, indicando que la pestaña aún no se ha guardado en un archivo
        tabFileMap.put(panel4, null);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        System.out.println("Hola mundo desde Nuevo Archivo");
// Abre una ventana para elegir la ruta y el nombre del archivo
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo DF", "df"));
        int returnValue = fileChooser.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Verifica si el archivo tiene la extensión .df
            if (!file.getName().endsWith(".df")) {
                file = new File(file.getParentFile(), file.getName() + ".df");
            }
            try {
                // Crea el archivo
                if (file.createNewFile()) {
                    // Si el archivo se creó con éxito, abre una nueva pestaña
                    JPanel panel = new JPanel();
                    panel.setLayout(new BorderLayout());

                    JTextArea textArea = new JTextArea();
                    textArea.setLineWrap(false);

                    JScrollPane scrollPane = new JScrollPane(textArea);
                    scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                    scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

                    panel.add(scrollPane, BorderLayout.CENTER);

                    // Añade la pestaña al JTabbedPane
                    jTabbedPane1.addTab(file.getName(), panel);
                    contadorPestanas++;

                    // Añade una entrada al mapa con el archivo
                    tabFileMap.put(panel, file);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

        // TODO add your handling code here:
        JPanel panel4 = new JPanel();
        panel4.setLayout(new BorderLayout());  // Set the layout manager

        JTextArea textArea1 = new JTextArea();
        textArea1.setLineWrap(false);  // Desactiva el ajuste de línea para permitir el desplazamiento horizontal

        JScrollPane scrollPane = new JScrollPane(textArea1);
        scrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);  // Añade la barra de desplazamiento horizontal

        panel4.add(scrollPane, BorderLayout.CENTER);  // Add the scroll pane to the center of the panel

        // Abre el archivo
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                FileReader fileReader = new FileReader(file);
                BufferedReader bufferedReader = new BufferedReader(fileReader);

                // Lee el archivo y muestra su contenido en la pestaña
                String line;
                while ((line = bufferedReader.readLine()) != null) {
                    textArea1.append(line + "\n");
                }

                // Cierra el archivo
                bufferedReader.close();

                // Añade la pestaña al JTabbedPane
                jTabbedPane1.addTab(file.getName(), panel4);
                contadorPestanas++;

                // Añade una entrada al mapa con el archivo
                tabFileMap.put(panel4, file);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        JPanel selectedPanel = (JPanel) jTabbedPane1.getComponentAt(selectedIndex);
        JScrollPane scrollPane = (JScrollPane) selectedPanel.getComponent(0);
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
        String content = textArea.getText();

        File file = tabFileMap.get(selectedPanel);
        if (file != null) {
            // Si el archivo ya existe, guarda los cambios
            try ( PrintWriter out = new PrintWriter(file)) {
                out.println(content);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            // Si el archivo no existe, abre una ventana para elegir la ruta y el nombre del archivo
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Archivo DF", "df"));
            int returnValue = fileChooser.showSaveDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File filee = fileChooser.getSelectedFile();
                // Verifica si el archivo tiene la extensión .df
                if (!filee.getName().endsWith(".df")) {
                    filee = new File(filee.getParentFile(), filee.getName() + ".df");
                }
                try ( PrintWriter out = new PrintWriter(filee)) {
                    out.println(content);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                // Actualiza el mapa con el nuevo archivo
                tabFileMap.put(selectedPanel, filee);

                // Actualiza el título de la pestaña con el nombre del archivo
                jTabbedPane1.setTitleAt(selectedIndex, filee.getName());
            }

        }
    }//GEN-LAST:event_GuardarActionPerformed

    private void GuadarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuadarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GuadarActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        if (selectedIndex != -1) {
            jTabbedPane1.removeTabAt(selectedIndex);
        }

    }//GEN-LAST:event_jMenuItem6ActionPerformed

   public static void generateHtmlFileFromErrors(LinkedList<Error_> errorList, String filePath) {
    StringBuilder htmlBuilder = new StringBuilder();

    // Crear la estructura básica del documento HTML
    htmlBuilder.append("<!DOCTYPE html>\n");
    htmlBuilder.append("<html lang=\"en\">\n");
    htmlBuilder.append("<head>\n");
    htmlBuilder.append("<meta charset=\"UTF-8\">\n");
    htmlBuilder.append("<title>Tabla de errores</title>\n");

    // Agregar estilos CSS para centrar la tabla y dar color a los encabezados
    htmlBuilder.append("<style>\n");
    htmlBuilder.append("table { margin: 0 auto; border-collapse: collapse; width: 50%; }\n");
    htmlBuilder.append("th { text-align: center; background-color: #e0e0e0; }\n");
    htmlBuilder.append("td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; }\n");
    htmlBuilder.append("</style>\n");

    
    
    htmlBuilder.append("</head>\n");
    htmlBuilder.append("<body>\n");

        // Agregar el título centrado y grande
    htmlBuilder.append("<h1 style=\"text-align: center;\">Reporte de Errores</h1>\n");

    
    // Generar una tabla para mostrar los errores
    htmlBuilder.append("<table border=\"1\">\n");
    htmlBuilder.append("<tr>\n");
    htmlBuilder.append("<th>#</th>\n");
    htmlBuilder.append("<th>Descripcion</th>\n");
    htmlBuilder.append("<th>Tipo</th>\n");
    htmlBuilder.append("<th>Linea</th>\n");
    htmlBuilder.append("<th>Columna</th>\n");
    htmlBuilder.append("</tr>\n");
    Integer i = 0;
    for (Error_ error : errorList) {
        i = i + 1;
        htmlBuilder.append("<tr>\n");
        htmlBuilder.append("<td>").append(i).append("</td>\n");
        htmlBuilder.append("<td>").append(error.getLexema()).append("</td>\n");
        htmlBuilder.append("<td>").append(error.isLexico() ? "Léxico" : "Sintáctico").append("</td>\n");
        htmlBuilder.append("<td>").append(error.getLinea()).append("</td>\n");
        htmlBuilder.append("<td>").append(error.getColumna()).append("</td>\n");
        htmlBuilder.append("</tr>\n");
    }

    htmlBuilder.append("</table>\n");

    // Cerrar el documento HTML
    htmlBuilder.append("</body>\n");
    htmlBuilder.append("</html>\n");

    // Guardar el contenido HTML en un archivo
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
        writer.write(htmlBuilder.toString());
        System.out.println("Archivo HTML guardado en: " + filePath);
    } catch (IOException e) {
        System.err.println("Error al guardar el archivo HTML: " + e.getMessage());
        e.printStackTrace(); // Imprimir detalles del error
    }
}

    public static void tablaTokens(LinkedList<Token> listT, String filePath) {
        StringBuilder htmlBuilder = new StringBuilder();

        // Crear la estructura básica del documento HTML
        htmlBuilder.append("<!DOCTYPE html>\n");
        htmlBuilder.append("<html lang=\"en\">\n");
        htmlBuilder.append("<head>\n");
        htmlBuilder.append("<meta charset=\"UTF-8\">\n");
        htmlBuilder.append("<title>Tabla de Tokens</title>\n");
        
        
            // Agregar estilos CSS para centrar la tabla y dar color a los encabezados
    htmlBuilder.append("<style>\n");
    htmlBuilder.append("table { margin: 0 auto; border-collapse: collapse; width: 50%; }\n");
    htmlBuilder.append("th { text-align: center; background-color: #e0e0e0; }\n");
    htmlBuilder.append("td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; }\n");
    htmlBuilder.append("</style>\n");
        
        htmlBuilder.append("</head>\n");
        htmlBuilder.append("<body>\n");
    // Agregar el título centrado y grande
    htmlBuilder.append("<h1 style=\"text-align: center;\">Reporte de Tokens</h1>\n");

        // Generar una tabla para mostrar los errores
        htmlBuilder.append("<table border=\"1\">\n");
        htmlBuilder.append("<tr>\n");
        htmlBuilder.append("<th>#</th>\n");
        htmlBuilder.append("<th>Tipo</th>\n");
        htmlBuilder.append("<th>Lexema</th>\n");
        htmlBuilder.append("<th>Linea</th>\n");
        htmlBuilder.append("<th>Columna</th>\n");
        htmlBuilder.append("</tr>\n");
        Integer i = 0;
        for (Token error : listT) {
            i = i + 1;
            htmlBuilder.append("<tr>\n");
            htmlBuilder.append("<td>").append(i).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getTipo()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getLexema()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getLinea()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getColumna()).append("</td>\n");
            htmlBuilder.append("</tr>\n");
        }

        htmlBuilder.append("</table>\n");

        // Cerrar el documento HTML
        htmlBuilder.append("</body>\n");
        htmlBuilder.append("</html>\n");

        // Guardar el contenido HTML en un archivo
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(htmlBuilder.toString());
            System.out.println("Archivo HTML guardado en: " + filePath);
        } catch (IOException e) {
            System.err.println("Error al guardar el archivo HTML: " + e.getMessage());
            e.printStackTrace(); // Imprimir detalles del error
        }
    }

    public static void tablaSimbolos(LinkedList<ts> listT, String filePath) {
        StringBuilder htmlBuilder = new StringBuilder();

        // Crear la estructura básica del documento HTML
        htmlBuilder.append("<!DOCTYPE html>\n");
        htmlBuilder.append("<html lang=\"en\">\n");
        htmlBuilder.append("<head>\n");
        htmlBuilder.append("<meta charset=\"UTF-8\">\n");
        htmlBuilder.append("<title>Tabla de Simbolos</title>\n");
      // Agregar estilos CSS para centrar la tabla y dar color a los encabezados
    htmlBuilder.append("<style>\n");
    htmlBuilder.append("table { margin: 0 auto; border-collapse: collapse; width: 50%; }\n");
    htmlBuilder.append("th { text-align: center; background-color: #e0e0e0; }\n");
    htmlBuilder.append("td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; }\n");
    htmlBuilder.append("</style>\n");      
        
        
        htmlBuilder.append("</head>\n");
        htmlBuilder.append("<body>\n");

            // Agregar el título centrado y grande
    htmlBuilder.append("<h1 style=\"text-align: center;\">Reporte de Simbolos</h1>\n");

        
        // Generar una tabla para mostrar los errores
        htmlBuilder.append("<table border=\"1\">\n");
        htmlBuilder.append("<tr>\n");
        htmlBuilder.append("<th>#</th>\n");
        htmlBuilder.append("<th>Tipo</th>\n");
        htmlBuilder.append("<th>Nombre</th>\n");
        htmlBuilder.append("<th>Valor</th>\n");
        htmlBuilder.append("<th>Fila</th>\n");
        htmlBuilder.append("<th>Columna</th>\n");
        htmlBuilder.append("</tr>\n");
        Integer i = 0;
        for (ts error : listT) {
            i = i + 1;
            htmlBuilder.append("<tr>\n");
            htmlBuilder.append("<td>").append(i).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getTipo()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getNombre()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getValor()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getLinea()).append("</td>\n");
            htmlBuilder.append("<td>").append(error.getColumna()).append("</td>\n");
            htmlBuilder.append("</tr>\n");
        }

        htmlBuilder.append("</table>\n");

        // Cerrar el documento HTML
        htmlBuilder.append("</body>\n");
        htmlBuilder.append("</html>\n");

        // Guardar el contenido HTML en un archivo
        try ( BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(htmlBuilder.toString());
            System.out.println("Archivo HTML guardado en: " + filePath);
        } catch (IOException e) {
            System.err.println("Error al guardar el archivo HTML: " + e.getMessage());
            e.printStackTrace(); // Imprimir detalles del error
        }
    }


    
    private void mostrarImagenEnLabel(int indice) {
   
        // Obtener la ruta de la imagen desde la lista
        String ruta = listaRutas.get(indice);

        try {
            // Cargar la imagen desde el archivo
            BufferedImage imagen = ImageIO.read(new File(ruta));
            ImageIcon miIcono = new ImageIcon(imagen);

            // Redimensionar la imagen para que se ajuste al tamaño del JLabel
            int anchoLabel = labelimg.getWidth();
            int altoLabel = labelimg.getHeight();
            Image imagenOriginal = miIcono.getImage();
            Image imagenRedimensionada = imagenOriginal.getScaledInstance(anchoLabel, altoLabel, Image.SCALE_SMOOTH);
            ImageIcon miIconoRedimensionado = new ImageIcon(imagenRedimensionada);

            // Establecer el nuevo icono en el JLabel
            labelimg.setIcon(miIconoRedimensionado);
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Archivo no encontrado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al cargar la imagen: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}


    
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        listaRutas.clear();
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        JPanel selectedPanel = (JPanel) jTabbedPane1.getComponentAt(selectedIndex);
        JScrollPane scrollPane = (JScrollPane) selectedPanel.getComponent(0);
        JTextArea textArea = (JTextArea) scrollPane.getViewport().getView();
        String codigo = textArea.getText();
        
        jTextArea2.setText("");

        try {
            analizador_lexico scanner = new analizador_lexico(new java.io.StringReader(codigo));
            analizador_sintactico analizador = new analizador_sintactico(scanner);
            analizador.parse();
            System.out.println("Análisis finalizado");
            for (Error_ arg : lista_errores) {
                System.out.println(arg.toString());
            }
            ///////////////////////////////////////////////   REPORTES //////////////////////////////////////////////////////
            String filePath = "errores.html";
            generateHtmlFileFromErrors(lista_errores, filePath);

            String filePathh = "ttokens.html";
            tablaTokens(listaTokens, filePathh);

            String file = "Tabla de Simbolos.html";
            tablaSimbolos(listaSimbolos, file);
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Mando a la consola los que haya capturado
            for (String elemento : listaPrint) {
                jTextArea2.append(elemento + "\n"); // Agrega un salto de línea después de cada elemento
            }
            
            
            //Limpio las linkedList
            lista_errores.clear();
            listaTokens.clear();
            listaSimbolos.clear();
            listaPrint.clear();
            mostrarImagenEnLabel(contImagenes);
        } catch (Exception e) {
            e.printStackTrace();
        }
        {

        }
        System.out.println("Tamano de rutas");
        System.out.println(listaRutas.size());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        contImagenes=contImagenes+1;
        System.out.println("Tamano aumentando"+contImagenes);
        mostrarImagenEnLabel(contImagenes);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.out.println(contImagenes);
        contImagenes=contImagenes-1;
        System.out.println(contImagenes);
        System.out.println("================================================");
        
        mostrarImagenEnLabel(contImagenes);
    }//GEN-LAST:event_jButton2ActionPerformed
public static void abrirHTML(String rutaArchivoHTML) {
        try {
            File archivoHTML = new File(rutaArchivoHTML);

            // Verifica que Desktop sea compatible con la plataforma actual
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();

                // Verifica que el archivo exista antes de intentar abrirlo
                if (archivoHTML.exists()) {
                    desktop.open(archivoHTML);
                } else {
                    System.out.println("El archivo HTML no existe en la ruta especificada.");
                }
            } else {
                System.out.println("La apertura del archivo no es compatible con este entorno.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        abrirHTML("ttokens.html");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        abrirHTML("errores.html");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        abrirHTML("Tabla de Simbolos.html");
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Guadar;
    private javax.swing.JMenuItem Guardar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JLabel labelimg;
    // End of variables declaration//GEN-END:variables
}
