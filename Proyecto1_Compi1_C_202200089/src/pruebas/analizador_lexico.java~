/* The following code was generated by JFlex 1.7.0 */

package pruebas;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/pruebas/analizador_lexico.jflex</tt>
 */
public class analizador_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 15, 17, 18, 18, 17,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    15, 16, 13,  0,  0,  0,  0,  0,  8,  9,  0,  0,  6,  4,  5,  0, 
    19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  1,  7,  2, 12,  3,  0, 
     0, 24, 30, 25, 36, 20, 14, 34, 39, 27, 43, 14, 31, 35, 32, 28, 
    23, 14, 33, 22, 42, 38, 37, 14, 41, 44, 40, 10,  0, 11,  0, 29, 
     0, 24, 30, 25, 36, 20, 14, 34, 39, 27, 43, 14, 31, 35, 32, 28, 
    23, 14, 33, 22, 42, 38, 37, 14, 41, 44, 40,  0, 15,  0,  0,  0, 
     0,  0,  0,  0,  0, 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\1\1\17\1\1\14\17\4\0\3\17\1\0"+
    "\12\17\1\0\3\17\1\0\3\17\1\0\1\17\1\0"+
    "\1\17\3\0\1\21\2\17\2\22\1\0\2\17\1\23"+
    "\4\17\2\24\2\17\1\25\2\26\1\27\1\30\2\31"+
    "\2\17\1\32\1\0\1\17\1\0\1\17\1\20\1\0"+
    "\1\33\1\34\1\35\1\0\3\17\1\0\1\17\1\36"+
    "\2\17\1\0\1\17\1\37\2\17\1\0\1\17\1\0"+
    "\1\17\1\0\1\17\1\0\2\40\2\17\1\0\1\17"+
    "\1\41\1\17\2\42\2\17\1\0\1\17\1\0\1\17"+
    "\1\0\1\17\1\0\1\17\1\43\1\0\4\17\1\0"+
    "\1\17\1\44\2\45\1\0\1\17\1\0\1\17\2\46"+
    "\1\0\1\47\2\50\1\0\2\17\1\0\1\17\2\51"+
    "\1\0\1\17\1\0\1\17\1\52\1\53\1\52\1\53"+
    "\1\0\2\54\1\55\1\0\1\17\2\56\1\0\1\17"+
    "\1\0\2\57\2\60\5\0\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\55\0\55\0\55\0\55"+
    "\0\55\0\55\0\55\0\55\0\55\0\55\0\55\0\207"+
    "\0\264\0\341\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef"+
    "\0\u021c\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357"+
    "\0\u0384\0\u03b1\0\u03de\0\u010e\0\u040b\0\u0438\0\u0465\0\u0492"+
    "\0\u04bf\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca"+
    "\0\u08f7\0\u0924\0\207\0\u0951\0\u097e\0\55\0\207\0\u09ab"+
    "\0\u09d8\0\u0a05\0\207\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\55"+
    "\0\207\0\u0ae6\0\u0b13\0\207\0\55\0\207\0\u0b40\0\207"+
    "\0\55\0\207\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e"+
    "\0\u0c7b\0\u03b1\0\u0ca8\0\207\0\207\0\207\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\207\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\207\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78"+
    "\0\u0fa5\0\u0fd2\0\u0fff\0\55\0\207\0\u102c\0\u1059\0\u1086"+
    "\0\u10b3\0\207\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194\0\u11c1"+
    "\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf\0\u12fc\0\207"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\207"+
    "\0\55\0\207\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518\0\u1545"+
    "\0\u1572\0\207\0\55\0\207\0\u159f\0\u15cc\0\u15f9\0\u1626"+
    "\0\u1653\0\55\0\207\0\u1680\0\u16ad\0\u16da\0\u1707\0\55"+
    "\0\55\0\207\0\207\0\u1734\0\55\0\207\0\207\0\u1761"+
    "\0\u178e\0\55\0\207\0\u17bb\0\u17e8\0\u1815\0\55\0\207"+
    "\0\55\0\207\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\21\1\0\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\2\4\20\1\32\1\20\1\33\1\34"+
    "\1\35\1\36\1\37\1\20\1\40\2\20\1\41\2\20"+
    "\75\0\1\42\52\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\22\20\17\0\1\21\1\0\1\21\33\0\21\22"+
    "\2\0\32\22\5\0\1\43\15\0\1\44\1\45\46\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\5\20\1\46"+
    "\10\20\1\47\1\20\1\50\1\20\46\0\1\51\24\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\13\20\1\52"+
    "\6\20\16\0\1\20\5\0\1\20\1\0\4\20\1\0"+
    "\6\20\1\53\13\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\6\20\1\54\13\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\1\20\1\55\12\20\1\56"+
    "\5\20\16\0\1\20\5\0\1\20\1\0\2\20\1\57"+
    "\1\20\1\0\22\20\16\0\1\20\5\0\1\60\1\0"+
    "\4\20\1\0\22\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\6\20\1\61\13\20\16\0\1\20\5\0"+
    "\1\62\1\0\2\20\1\63\1\20\1\64\1\65\1\66"+
    "\11\20\1\67\6\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\70\1\71\1\72\20\20\16\0\1\20\5\0"+
    "\1\20\1\0\2\20\1\73\1\20\1\0\22\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\74\1\75\21\20"+
    "\16\0\1\20\5\0\1\20\1\0\4\20\1\76\1\77"+
    "\21\20\20\42\1\100\2\0\32\42\23\0\1\101\56\0"+
    "\2\102\44\0\1\20\5\0\1\20\1\0\4\20\1\0"+
    "\11\20\1\103\10\20\16\0\1\20\5\0\1\104\1\0"+
    "\4\20\1\0\22\20\16\0\1\20\5\0\1\105\1\0"+
    "\4\20\1\0\22\20\43\0\1\106\27\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\10\20\1\107\11\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\110\1\111\1\112"+
    "\20\20\16\0\1\20\5\0\1\20\1\0\4\20\1\0"+
    "\6\20\1\113\13\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\4\20\1\114\1\115\14\20\16\0\1\20"+
    "\5\0\1\20\1\0\2\20\1\116\1\20\1\0\22\20"+
    "\16\0\1\20\5\0\1\20\1\0\4\20\1\0\3\20"+
    "\1\117\16\20\16\0\1\20\5\0\1\20\1\120\1\121"+
    "\3\20\1\0\22\20\16\0\1\20\5\0\1\20\1\0"+
    "\2\20\1\122\1\20\1\0\22\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\11\20\1\123\10\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\16\20\1\124"+
    "\3\20\40\0\1\125\32\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\5\20\1\126\14\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\11\20\1\127\10\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\4\20\1\130"+
    "\15\20\45\0\1\131\25\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\12\20\1\132\7\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\13\20\1\133\6\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\4\20\1\134"+
    "\1\20\1\135\13\20\25\0\2\136\44\0\1\20\5\0"+
    "\1\20\1\136\1\137\3\20\1\0\22\20\52\0\1\140"+
    "\20\0\1\20\5\0\1\20\1\0\4\20\1\0\17\20"+
    "\1\141\2\20\3\42\1\142\14\42\1\100\2\0\32\42"+
    "\23\0\1\101\1\45\57\0\1\143\43\0\1\20\5\0"+
    "\1\20\1\0\3\20\1\144\1\0\22\20\16\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\0\16\20\1\145\2\20"+
    "\1\146\40\0\1\147\32\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\5\20\1\150\14\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\0\7\20\1\151\12\20\16\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\13\20\1\152"+
    "\6\20\16\0\1\20\5\0\1\20\1\153\1\154\3\20"+
    "\1\0\22\20\16\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\6\20\1\155\13\20\16\0\1\20\5\0\1\156"+
    "\1\0\4\20\1\0\22\20\16\0\1\20\5\0\1\20"+
    "\1\0\1\20\1\157\2\20\1\0\22\20\16\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\160\1\161\21\20\16\0"+
    "\1\20\5\0\1\20\1\0\2\20\1\162\1\20\1\0"+
    "\22\20\16\0\1\20\5\0\1\20\1\0\4\20\1\0"+
    "\3\20\1\163\16\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\13\20\1\164\6\20\16\0\1\20\5\0"+
    "\1\20\1\0\4\20\1\165\1\166\21\20\52\0\1\167"+
    "\20\0\1\20\5\0\1\20\1\0\4\20\1\0\17\20"+
    "\1\170\2\20\46\0\1\171\24\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\13\20\1\172\6\20\30\0\1\173"+
    "\76\0\1\174\20\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\17\20\1\175\2\20\16\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\6\20\1\176\13\20\16\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\0\10\20\1\177\11\20"+
    "\34\0\1\200\36\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\1\20\1\201\20\20\16\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\4\20\1\202\15\20\16\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\0\14\20\1\203\5\20"+
    "\30\0\1\204\42\0\1\20\5\0\1\20\1\0\2\20"+
    "\1\205\1\20\1\0\22\20\16\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\4\20\1\206\15\20\16\0\1\20"+
    "\5\0\1\207\1\0\4\20\1\0\22\20\30\0\1\210"+
    "\42\0\1\20\5\0\1\20\1\0\2\20\1\211\1\20"+
    "\1\0\22\20\34\0\1\212\36\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\1\20\1\213\20\20\37\0\1\214"+
    "\33\0\1\20\5\0\1\20\1\0\4\20\1\0\4\20"+
    "\1\215\15\20\31\0\1\216\41\0\1\20\5\0\1\20"+
    "\1\0\2\20\1\217\1\20\1\0\22\20\16\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\0\5\20\1\220\14\20"+
    "\37\0\1\221\33\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\4\20\1\222\15\20\16\0\1\20\5\0\1\20"+
    "\1\0\1\20\1\223\2\20\1\0\3\20\1\224\1\225"+
    "\15\20\40\0\1\226\32\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\5\20\1\227\14\20\16\0\1\20\5\0"+
    "\1\230\1\0\4\20\1\0\22\20\16\0\1\20\5\0"+
    "\1\20\1\231\1\232\3\20\1\0\22\20\40\0\1\233"+
    "\32\0\1\20\5\0\1\20\1\0\4\20\1\0\5\20"+
    "\1\234\14\20\42\0\1\235\30\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\7\20\1\236\12\20\34\0\1\237"+
    "\36\0\1\20\5\0\1\20\1\0\4\20\1\0\1\20"+
    "\1\240\20\20\32\0\2\241\37\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\10\20\1\242\11\20\24\0\1\243"+
    "\46\0\1\20\5\0\1\244\1\0\4\20\1\0\22\20"+
    "\16\0\1\20\5\0\1\20\1\0\4\20\1\245\1\246"+
    "\21\20\16\0\1\20\5\0\1\20\1\0\2\20\1\247"+
    "\1\20\1\0\22\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\250\1\251\21\20\30\0\1\252\42\0\1\20"+
    "\5\0\1\20\1\0\2\20\1\253\1\20\1\0\22\20"+
    "\50\0\1\254\22\0\1\20\5\0\1\20\1\0\4\20"+
    "\1\0\15\20\1\255\4\20\41\0\1\256\31\0\1\20"+
    "\5\0\1\20\1\0\4\20\1\0\6\20\1\257\13\20"+
    "\51\0\1\260\2\0\1\261\16\0\1\20\5\0\1\20"+
    "\1\0\4\20\1\0\16\20\1\262\2\20\1\263\34\0"+
    "\1\264\44\0\1\265\46\0\1\20\5\0\1\266\1\0"+
    "\4\20\1\0\22\20\16\0\1\20\5\0\1\20\1\0"+
    "\4\20\1\0\6\20\1\267\13\20\40\0\1\270\32\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\5\20\1\271"+
    "\14\20\30\0\1\272\42\0\1\20\5\0\1\20\1\0"+
    "\2\20\1\273\1\20\1\0\22\20\30\0\1\274\42\0"+
    "\1\20\5\0\1\20\1\0\2\20\1\275\1\20\1\0"+
    "\22\20\35\0\1\276\43\0\1\277\46\0\1\20\5\0"+
    "\1\300\1\0\4\20\1\0\22\20\43\0\1\301\27\0"+
    "\1\20\5\0\1\20\1\0\4\20\1\0\10\20\1\302"+
    "\11\20\36\0\1\303\55\0\1\304\45\0\1\305\64\0"+
    "\1\306\45\0\1\307\57\0\1\310\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6435];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\13\11\22\1\4\0\3\1\1\0"+
    "\12\1\1\0\3\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\3\0\3\1\1\11\1\1\1\0\7\1\1\11"+
    "\4\1\1\11\3\1\1\11\4\1\1\0\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\3\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\11\3\1\1\0\7\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\4\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\2\11\2\1\1\0\1\11"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public analizador_lexico(java.io.Reader in) {
      yyline=1;
    yychar=0;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yycolumn);
            } 
            // fall through
          case 50: break;
          case 2: 
            { System.out.println(yytext()) ; return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 51: break;
          case 3: 
            { System.out.println(yytext()) ; return new Symbol(sym.MENOR_QUE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 52: break;
          case 4: 
            { System.out.println(yytext()) ; return new Symbol(sym.MAYOR_QUE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 53: break;
          case 5: 
            { System.out.println(yytext()) ; return new Symbol(sym.GUION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 54: break;
          case 6: 
            { System.out.println(yytext()) ; return new Symbol(sym.PUNTO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 55: break;
          case 7: 
            { System.out.println(yytext()) ; return new Symbol(sym.COMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 56: break;
          case 8: 
            { System.out.println(yytext()) ; return new Symbol(sym.PUNTO_Y_COMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 57: break;
          case 9: 
            { System.out.println(yytext()) ; return new Symbol(sym.PARENTESIS_IZQUIERDO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 58: break;
          case 10: 
            { System.out.println(yytext()) ; return new Symbol(sym.PARENTESIS_DERECHO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 59: break;
          case 11: 
            { System.out.println(yytext()) ; return new Symbol(sym.CORCHETE_IZQUIERDO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 60: break;
          case 12: 
            { System.out.println(yytext()) ; return new Symbol(sym.CORCHETE_DERECHO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 61: break;
          case 13: 
            { System.out.println(yytext()) ; return new Symbol(sym.SIGNO_IGUAL, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 62: break;
          case 14: 
            { System.out.println(yytext()) ; return new Symbol(sym.COMILLA_DOBLE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 63: break;
          case 15: 
            { System.out.println(yytext()) ; return new Symbol(sym.STRING, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 64: break;
          case 16: 
            { System.out.println(yytext()) ;
            } 
            // fall through
          case 65: break;
          case 17: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_END, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 66: break;
          case 18: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_SUMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 67: break;
          case 19: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_ARRAY, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 68: break;
          case 20: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_RESTA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 69: break;
          case 21: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MAX, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 70: break;
          case 22: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MIN, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 71: break;
          case 23: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MODULO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 72: break;
          case 24: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MULTIPLICACION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 73: break;
          case 25: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_DIVISION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 74: break;
          case 26: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_VAR, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 75: break;
          case 27: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_EXEC, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 76: break;
          case 28: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_EJEX_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 77: break;
          case 29: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_EJEY_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 78: break;
          case 30: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_CHAR, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 79: break;
          case 31: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MODA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 80: break;
          case 32: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_PRINT, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 81: break;
          case 33: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESRVADA_LABEL_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 82: break;
          case 34: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MEDIA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 83: break;
          case 35: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_COLUMN, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 84: break;
          case 36: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_DOUBLE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 85: break;
          case 37: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_VALUES_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 86: break;
          case 38: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_TITULO_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 87: break;
          case 39: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_PROGRAM, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 88: break;
          case 40: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_CONSOLE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 89: break;
          case 41: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_MEDIANA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 90: break;
          case 42: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_TITULOX_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 91: break;
          case 43: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_TITULOY_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 92: break;
          case 44: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_PIE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 93: break;
          case 45: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_BARRA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 94: break;
          case 46: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_VARIANZA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 95: break;
          case 47: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_LINEA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 96: break;
          case 48: 
            { System.out.println(yytext()) ; return new Symbol(sym.RESERVADA_GRAFIA_HISTOGRAMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 97: break;
          case 49: 
            { System.out.println(yytext()) ; return new Symbol(sym.NUMEROS, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
