
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Errores.Error_;
import GUI.gui;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\005\017\000\002\066\003\000\002\066\003\000\002" +
    "\006\015\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\032\003\000\002\032\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\004\000" +
    "\002\035\003\000\002\007\016\000\002\053\003\000\002" +
    "\053\003\000\002\054\005\000\002\054\004\000\002\033" +
    "\004\000\002\033\004\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\022\010\000\002\023" +
    "\010\000\002\024\010\000\002\025\010\000\002\026\010" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\010\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\037\004\000\002\037\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\042\006\000\002\043\006" +
    "\000\002\044\006\000\002\045\006\000\002\046\006\000" +
    "\002\047\006\000\002\011\006\000\002\050\003\000\002" +
    "\050\003\000\002\051\007\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\020\004\000\002\020\003\000" +
    "\002\020\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\052\012\000\002\067\003\000" +
    "\002\067\003\000\002\070\003\000\002\070\004\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\060\051\000\002\061\075\000\002\062\075" +
    "\000\002\063\040" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\004\021\004\001\002\000\020\023\022\026" +
    "\013\042\015\045\014\046\023\047\024\050\027\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\022\022\ufffa\023\ufffa\026\ufffa\042\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\001\002\000\004\022\u019b\001\002\000" +
    "\022\022\ufffb\023\ufffb\026\ufffb\042\ufffb\045\ufffb\046\ufffb" +
    "\047\ufffb\050\ufffb\001\002\000\022\022\uff97\023\uff97\026" +
    "\uff97\042\uff97\045\uff97\046\uff97\047\uff97\050\uff97\001\002" +
    "\000\004\005\u018c\001\002\000\004\014\u0152\001\002\000" +
    "\004\005\u0128\001\002\000\022\022\uff99\023\uff99\026\uff99" +
    "\042\uff99\045\uff99\046\uff99\047\uff99\050\uff99\001\002\000" +
    "\022\022\uffff\023\022\026\013\042\015\045\014\046\023" +
    "\047\024\050\027\001\002\000\022\022\uff98\023\uff98\026" +
    "\uff98\042\uff98\045\uff98\046\uff98\047\uff98\050\uff98\001\002" +
    "\000\022\022\uff9a\023\uff9a\026\uff9a\042\uff9a\045\uff9a\046" +
    "\uff9a\047\uff9a\050\uff9a\001\002\000\004\005\351\001\002" +
    "\000\004\014\303\001\002\000\004\014\211\001\002\000" +
    "\022\022\ufff9\023\ufff9\026\ufff9\042\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\001\002\000\022\022\ufffd\023\ufffd\026" +
    "\ufffd\042\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002" +
    "\000\004\014\031\001\002\000\022\022\ufffc\023\ufffc\026" +
    "\ufffc\042\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\001\002" +
    "\000\004\051\032\001\002\000\004\005\033\001\002\000" +
    "\004\005\034\001\002\000\004\025\035\001\002\000\004" +
    "\016\036\001\002\000\004\017\037\001\002\000\004\020" +
    "\040\001\002\000\004\061\041\001\002\000\004\022\042" +
    "\001\002\000\004\013\043\001\002\000\004\056\044\001" +
    "\002\000\004\005\045\001\002\000\004\005\046\001\002" +
    "\000\004\025\047\001\002\000\004\016\050\001\002\000" +
    "\004\017\051\001\002\000\004\020\052\001\002\000\004" +
    "\016\053\001\002\000\036\027\106\030\067\031\054\032" +
    "\076\033\065\034\064\035\104\036\100\037\062\040\070" +
    "\041\066\061\072\062\073\063\055\001\002\000\004\014" +
    "\uffd2\001\002\000\004\012\210\001\002\000\004\012\206" +
    "\001\002\000\046\004\uffc9\012\uffc9\015\uffc9\017\uffc9\022" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\062\uffc9\063" +
    "\uffc9\001\002\000\040\004\201\017\200\027\106\030\067" +
    "\031\054\032\076\033\065\034\064\035\104\036\100\037" +
    "\062\040\070\041\066\062\202\063\055\001\002\000\046" +
    "\004\uffc7\012\uffc7\015\uffc7\017\uffc7\022\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\041\uffc7\062\uffc7\063\uffc7\001\002\000" +
    "\004\014\173\001\002\000\046\004\uffca\012\uffca\015\uffca" +
    "\017\uffca\022\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\062\uffca\063\uffca\001\002\000\004\014\170\001\002\000" +
    "\004\014\uffd0\001\002\000\004\014\165\001\002\000\004" +
    "\014\uffd3\001\002\000\004\014\162\001\002\000\004\022" +
    "\uffe8\001\002\000\006\012\157\017\160\001\002\000\004" +
    "\012\156\001\002\000\004\014\145\001\002\000\046\004" +
    "\uffc8\012\uffc8\015\uffc8\017\uffc8\022\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\062\uffc8\063\uffc8\001\002\000\004" +
    "\014\uffd1\001\002\000\004\022\uffe9\001\002\000\004\014" +
    "\142\001\002\000\046\004\uffc5\012\uffc5\015\uffc5\017\uffc5" +
    "\022\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\062\uffc5" +
    "\063\uffc5\001\002\000\046\004\uffc6\012\uffc6\015\uffc6\017" +
    "\uffc6\022\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\062" +
    "\uffc6\063\uffc6\001\002\000\004\022\131\001\002\000\004" +
    "\014\110\001\002\000\042\004\uffdf\012\107\017\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\041\uffdf\062\uffdf\063\uffdf\001" +
    "\002\000\004\014\uffd4\001\002\000\040\004\uffe0\017\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\062\uffe0\063\uffe0" +
    "\001\002\000\006\016\112\063\113\001\002\000\004\015" +
    "\130\001\002\000\020\004\116\027\106\030\067\031\054" +
    "\032\076\033\065\062\115\001\002\000\004\015\uffc3\001" +
    "\002\000\006\012\125\017\126\001\002\000\006\012\122" +
    "\017\123\001\002\000\022\004\116\017\120\027\106\030" +
    "\067\031\054\032\076\033\065\062\115\001\002\000\004" +
    "\015\uffc4\001\002\000\004\015\uffbd\001\002\000\004\015" +
    "\uffc0\001\002\000\020\004\116\027\106\030\067\031\054" +
    "\032\076\033\065\062\115\001\002\000\004\015\uffbf\001" +
    "\002\000\004\015\uffc2\001\002\000\020\004\116\027\106" +
    "\030\067\031\054\032\076\033\065\062\115\001\002\000" +
    "\004\015\uffbe\001\002\000\004\015\uffc1\001\002\000\046" +
    "\004\uffbb\012\uffbb\015\uffbb\017\uffbb\022\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\062\uffbb\063\uffbb\001\002\000" +
    "\004\013\132\001\002\000\004\060\133\001\002\000\004" +
    "\050\134\001\002\000\004\022\135\001\002\000\004\013" +
    "\136\001\002\000\004\015\137\001\002\000\004\022\140" +
    "\001\002\000\004\013\141\001\002\000\022\022\uff93\023" +
    "\uff93\026\uff93\042\uff93\045\uff93\046\uff93\047\uff93\050\uff93" +
    "\001\002\000\006\016\112\063\113\001\002\000\004\015" +
    "\144\001\002\000\046\004\uffba\012\uffba\015\uffba\017\uffba" +
    "\022\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\062\uffba" +
    "\063\uffba\001\002\000\034\004\150\027\106\030\067\031" +
    "\054\032\076\033\065\034\064\035\104\036\100\037\062" +
    "\040\070\041\066\062\151\001\002\000\006\012\uffcd\015" +
    "\uffcd\001\002\000\004\012\153\001\002\000\006\012\uffce" +
    "\015\uffce\001\002\000\006\012\uffcf\015\uffcf\001\002\000" +
    "\006\012\uffcc\015\uffcc\001\002\000\034\004\150\027\106" +
    "\030\067\031\054\032\076\033\065\034\064\035\104\036" +
    "\100\037\062\040\070\041\066\062\151\001\002\000\004" +
    "\015\155\001\002\000\010\012\uffcb\015\uffcb\017\uffcb\001" +
    "\002\000\040\004\uffe2\017\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\062\uffe2\063\uffe2\001\002\000\004\061\072" +
    "\001\002\000\004\022\uffe6\001\002\000\004\022\uffe7\001" +
    "\002\000\006\016\112\063\113\001\002\000\004\015\164" +
    "\001\002\000\046\004\uffb8\012\uffb8\015\uffb8\017\uffb8\022" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\062\uffb8\063" +
    "\uffb8\001\002\000\006\016\112\063\113\001\002\000\004" +
    "\015\167\001\002\000\046\004\uffb7\012\uffb7\015\uffb7\017" +
    "\uffb7\022\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\062" +
    "\uffb7\063\uffb7\001\002\000\006\016\112\063\113\001\002" +
    "\000\004\015\172\001\002\000\046\004\uffbc\012\uffbc\015" +
    "\uffbc\017\uffbc\022\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\062\uffbc\063\uffbc\001\002\000\006\016\112\063\113" +
    "\001\002\000\004\015\175\001\002\000\046\004\uffb9\012" +
    "\uffb9\015\uffb9\017\uffb9\022\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\062\uffb9\063\uffb9\001\002\000\004\022\uffe4" +
    "\001\002\000\006\012\206\017\207\001\002\000\004\022" +
    "\uffeb\001\002\000\004\017\205\001\002\000\006\012\156" +
    "\017\204\001\002\000\004\022\uffe5\001\002\000\004\022" +
    "\uffed\001\002\000\004\022\uffee\001\002\000\040\004\uffe3" +
    "\017\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\062\uffe3" +
    "\063\uffe3\001\002\000\004\022\uffec\001\002\000\040\004" +
    "\uffe1\017\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\062" +
    "\uffe1\063\uffe1\001\002\000\004\051\212\001\002\000\004" +
    "\005\213\001\002\000\004\005\214\001\002\000\004\025" +
    "\215\001\002\000\004\016\216\001\002\000\004\017\217" +
    "\001\002\000\004\020\220\001\002\000\004\061\221\001" +
    "\002\000\004\022\222\001\002\000\004\013\223\001\002" +
    "\000\004\052\224\001\002\000\004\005\225\001\002\000" +
    "\004\005\226\001\002\000\004\025\227\001\002\000\004" +
    "\016\230\001\002\000\004\017\231\001\002\000\004\020" +
    "\232\001\002\000\004\016\233\001\002\000\004\061\072" +
    "\001\002\000\004\022\235\001\002\000\004\013\236\001" +
    "\002\000\004\053\237\001\002\000\004\005\240\001\002" +
    "\000\004\005\241\001\002\000\004\024\242\001\002\000" +
    "\004\020\243\001\002\000\004\016\244\001\002\000\036" +
    "\027\106\030\067\031\054\032\076\033\065\034\064\035" +
    "\104\036\100\037\062\040\070\041\066\061\072\062\073" +
    "\063\055\001\002\000\004\022\246\001\002\000\004\013" +
    "\247\001\002\000\004\054\250\001\002\000\004\005\251" +
    "\001\002\000\004\005\252\001\002\000\004\025\253\001" +
    "\002\000\004\016\254\001\002\000\004\017\255\001\002" +
    "\000\004\020\256\001\002\000\004\061\257\001\002\000" +
    "\004\022\260\001\002\000\004\013\261\001\002\000\004" +
    "\055\262\001\002\000\004\005\263\001\002\000\004\005" +
    "\264\001\002\000\004\025\265\001\002\000\004\016\266" +
    "\001\002\000\004\017\267\001\002\000\004\020\270\001" +
    "\002\000\004\061\271\001\002\000\004\022\272\001\002" +
    "\000\004\013\273\001\002\000\004\060\274\001\002\000" +
    "\004\047\275\001\002\000\004\022\276\001\002\000\004" +
    "\013\277\001\002\000\004\015\300\001\002\000\004\022" +
    "\301\001\002\000\004\013\302\001\002\000\022\022\uff94" +
    "\023\uff94\026\uff94\042\uff94\045\uff94\046\uff94\047\uff94\050" +
    "\uff94\001\002\000\004\057\304\001\002\000\004\005\305" +
    "\001\002\000\004\005\306\001\002\000\004\025\307\001" +
    "\002\000\004\016\310\001\002\000\004\017\311\001\002" +
    "\000\004\020\312\001\002\000\004\016\313\001\002\000" +
    "\004\061\072\001\002\000\004\022\315\001\002\000\004" +
    "\013\316\001\002\000\004\056\317\001\002\000\004\005" +
    "\320\001\002\000\004\005\321\001\002\000\004\024\322" +
    "\001\002\000\004\020\323\001\002\000\004\016\324\001" +
    "\002\000\036\027\106\030\067\031\054\032\076\033\065" +
    "\034\064\035\104\036\100\037\062\040\070\041\066\061" +
    "\072\062\073\063\055\001\002\000\004\022\326\001\002" +
    "\000\004\013\327\001\002\000\004\051\330\001\002\000" +
    "\004\005\331\001\002\000\004\005\332\001\002\000\004" +
    "\025\333\001\002\000\004\016\334\001\002\000\004\017" +
    "\335\001\002\000\004\020\336\001\002\000\004\061\337" +
    "\001\002\000\004\022\340\001\002\000\004\013\341\001" +
    "\002\000\004\060\342\001\002\000\004\046\343\001\002" +
    "\000\004\022\344\001\002\000\004\013\345\001\002\000" +
    "\004\015\346\001\002\000\004\022\347\001\002\000\004" +
    "\013\350\001\002\000\022\022\uff96\023\uff96\026\uff96\042" +
    "\uff96\045\uff96\046\uff96\047\uff96\050\uff96\001\002\000\006" +
    "\024\353\025\352\001\002\000\004\016\u011b\001\002\000" +
    "\004\005\354\001\002\000\004\005\355\001\002\000\004" +
    "\004\356\001\002\000\004\006\357\001\002\000\004\010" +
    "\360\001\002\000\034\004\366\027\377\030\370\031\361" +
    "\032\373\033\364\034\064\035\104\036\100\037\062\040" +
    "\070\041\066\062\371\001\002\000\004\014\u0116\001\002" +
    "\000\004\022\u0114\001\002\000\004\022\ufff2\001\002\000" +
    "\004\014\u010f\001\002\000\006\012\uffdc\022\uffdc\001\002" +
    "\000\004\022\ufff3\001\002\000\006\012\uffdd\022\uffdd\001" +
    "\002\000\004\014\u010a\001\002\000\004\022\ufff4\001\002" +
    "\000\006\012\uffdb\022\uffdb\001\002\000\004\014\u0105\001" +
    "\002\000\004\022\ufff1\001\002\000\006\012\uffda\022\uffda" +
    "\001\002\000\006\012\uffde\022\uffde\001\002\000\004\014" +
    "\u0100\001\002\000\034\004\150\027\106\030\067\031\054" +
    "\032\076\033\065\034\064\035\104\036\100\037\062\040" +
    "\070\041\066\062\151\001\002\000\004\012\u0102\001\002" +
    "\000\034\004\150\027\106\030\067\031\054\032\076\033" +
    "\065\034\064\035\104\036\100\037\062\040\070\041\066" +
    "\062\151\001\002\000\004\015\u0104\001\002\000\006\012" +
    "\uffd9\022\uffd9\001\002\000\034\004\150\027\106\030\067" +
    "\031\054\032\076\033\065\034\064\035\104\036\100\037" +
    "\062\040\070\041\066\062\151\001\002\000\004\012\u0107" +
    "\001\002\000\034\004\150\027\106\030\067\031\054\032" +
    "\076\033\065\034\064\035\104\036\100\037\062\040\070" +
    "\041\066\062\151\001\002\000\004\015\u0109\001\002\000" +
    "\006\012\uffd6\022\uffd6\001\002\000\034\004\150\027\106" +
    "\030\067\031\054\032\076\033\065\034\064\035\104\036" +
    "\100\037\062\040\070\041\066\062\151\001\002\000\004" +
    "\012\u010c\001\002\000\034\004\150\027\106\030\067\031" +
    "\054\032\076\033\065\034\064\035\104\036\100\037\062" +
    "\040\070\041\066\062\151\001\002\000\004\015\u010e\001" +
    "\002\000\006\012\uffd8\022\uffd8\001\002\000\034\004\150" +
    "\027\106\030\067\031\054\032\076\033\065\034\064\035" +
    "\104\036\100\037\062\040\070\041\066\062\151\001\002" +
    "\000\004\012\u0111\001\002\000\034\004\150\027\106\030" +
    "\067\031\054\032\076\033\065\034\064\035\104\036\100" +
    "\037\062\040\070\041\066\062\151\001\002\000\004\015" +
    "\u0113\001\002\000\006\012\uffd5\022\uffd5\001\002\000\004" +
    "\013\u0115\001\002\000\022\022\ufff5\023\ufff5\026\ufff5\042" +
    "\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5\001\002\000\034" +
    "\004\150\027\106\030\067\031\054\032\076\033\065\034" +
    "\064\035\104\036\100\037\062\040\070\041\066\062\151" +
    "\001\002\000\004\012\u0118\001\002\000\034\004\150\027" +
    "\106\030\067\031\054\032\076\033\065\034\064\035\104" +
    "\036\100\037\062\040\070\041\066\062\151\001\002\000" +
    "\004\015\u011a\001\002\000\006\012\uffd7\022\uffd7\001\002" +
    "\000\004\017\u011c\001\002\000\004\005\u011d\001\002\000" +
    "\004\005\u011e\001\002\000\006\004\u011f\051\u0120\001\002" +
    "\000\004\006\ufff7\001\002\000\004\006\ufff6\001\002\000" +
    "\004\006\u0122\001\002\000\004\010\u0123\001\002\000\004" +
    "\061\u0124\001\002\000\004\022\u0125\001\002\000\004\013" +
    "\u0126\001\002\000\022\022\ufff8\023\ufff8\026\ufff8\042\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\001\002\000\004\022" +
    "\ufffe\001\002\000\004\005\u0129\001\002\000\006\043\u012b" +
    "\044\u012e\001\002\000\022\022\uffb4\023\uffb4\026\uffb4\042" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000\004" +
    "\020\u013b\001\002\000\022\022\uffb5\023\uffb5\026\uffb5\042" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\001\002\000\022" +
    "\022\uffb6\023\uffb6\026\uffb6\042\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\001\002\000\004\020\u012f\001\002\000\006" +
    "\004\u0130\061\u0132\001\002\000\004\010\uff9d\001\002\000" +
    "\004\010\u0133\001\002\000\004\010\uff9e\001\002\000\004" +
    "\007\u0134\001\002\000\006\016\u0136\063\u0137\001\002\000" +
    "\004\022\u0139\001\002\000\036\027\106\030\067\031\054" +
    "\032\076\033\065\034\064\035\104\036\100\037\062\040" +
    "\070\041\066\061\072\062\073\063\055\001\002\000\004" +
    "\022\uff9c\001\002\000\004\022\uff9b\001\002\000\004\013" +
    "\u013a\001\002\000\022\022\uff9f\023\uff9f\026\uff9f\042\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\001\002\000\036\004" +
    "\u013e\027\377\030\370\031\361\032\373\033\364\034\064" +
    "\035\104\036\100\037\062\040\070\041\066\061\u0140\062" +
    "\u0141\001\002\000\004\022\u0150\001\002\000\006\012\u014f" +
    "\022\uffaf\001\002\000\006\012\u014e\022\uffb0\001\002\000" +
    "\004\022\uffad\001\002\000\006\012\u014d\022\uffb2\001\002" +
    "\000\006\012\u014c\022\uffb1\001\002\000\040\004\u0147\022" +
    "\uffab\027\377\030\370\031\361\032\373\033\364\034\064" +
    "\035\104\036\100\037\062\040\070\041\066\061\u0149\062" +
    "\u014a\001\002\000\006\012\u0144\022\uffae\001\002\000\040" +
    "\004\uffa6\022\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6" +
    "\061\uffa6\062\uffa6\001\002\000\006\012\u014f\022\uffa2\001" +
    "\002\000\004\022\uffaa\001\002\000\006\012\u014e\022\uffa3" +
    "\001\002\000\004\022\uffac\001\002\000\006\012\u014d\022" +
    "\uffa4\001\002\000\006\012\u014c\022\uffa0\001\002\000\006" +
    "\012\u0144\022\uffa1\001\002\000\040\004\uffa8\022\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8" +
    "\036\uffa8\037\uffa8\040\uffa8\041\uffa8\061\uffa8\062\uffa8\001" +
    "\002\000\040\004\uffa9\022\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\061\uffa9\062\uffa9\001\002\000\040\004\uffa5" +
    "\022\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034" +
    "\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\061\uffa5" +
    "\062\uffa5\001\002\000\040\004\uffa7\022\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\061\uffa7\062\uffa7\001\002\000" +
    "\004\013\u0151\001\002\000\022\022\uffb3\023\uffb3\026\uffb3" +
    "\042\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\001\002\000" +
    "\004\051\u0153\001\002\000\004\005\u0154\001\002\000\004" +
    "\005\u0155\001\002\000\004\025\u0156\001\002\000\004\016" +
    "\u0157\001\002\000\004\017\u0158\001\002\000\004\020\u0159" +
    "\001\002\000\004\061\u015a\001\002\000\004\022\u015b\001" +
    "\002\000\004\013\u015c\001\002\000\004\052\u015d\001\002" +
    "\000\004\005\u015e\001\002\000\004\005\u015f\001\002\000" +
    "\004\025\u0160\001\002\000\004\016\u0161\001\002\000\004" +
    "\017\u0162\001\002\000\004\020\u0163\001\002\000\004\016" +
    "\u0164\001\002\000\004\061\072\001\002\000\004\022\u0166" +
    "\001\002\000\004\013\u0167\001\002\000\004\053\u0168\001" +
    "\002\000\004\005\u0169\001\002\000\004\005\u016a\001\002" +
    "\000\004\024\u016b\001\002\000\004\020\u016c\001\002\000" +
    "\004\016\u016d\001\002\000\036\027\106\030\067\031\054" +
    "\032\076\033\065\034\064\035\104\036\100\037\062\040" +
    "\070\041\066\061\072\062\073\063\055\001\002\000\004" +
    "\022\u016f\001\002\000\004\013\u0170\001\002\000\004\054" +
    "\u0171\001\002\000\004\005\u0172\001\002\000\004\005\u0173" +
    "\001\002\000\004\025\u0174\001\002\000\004\016\u0175\001" +
    "\002\000\004\017\u0176\001\002\000\004\020\u0177\001\002" +
    "\000\004\061\u0178\001\002\000\004\022\u0179\001\002\000" +
    "\004\013\u017a\001\002\000\004\055\u017b\001\002\000\004" +
    "\005\u017c\001\002\000\004\005\u017d\001\002\000\004\025" +
    "\u017e\001\002\000\004\016\u017f\001\002\000\004\017\u0180" +
    "\001\002\000\004\020\u0181\001\002\000\004\061\u0182\001" +
    "\002\000\004\022\u0183\001\002\000\004\013\u0184\001\002" +
    "\000\004\060\u0185\001\002\000\004\045\u0186\001\002\000" +
    "\004\022\u0187\001\002\000\004\013\u0188\001\002\000\004" +
    "\015\u0189\001\002\000\004\022\u018a\001\002\000\004\013" +
    "\u018b\001\002\000\022\022\uff95\023\uff95\026\uff95\042\uff95" +
    "\045\uff95\046\uff95\047\uff95\050\uff95\001\002\000\006\024" +
    "\u018f\025\u018e\001\002\000\004\005\u0192\001\002\000\004" +
    "\016\u0190\001\002\000\004\005\ufff0\001\002\000\004\017" +
    "\u0191\001\002\000\004\005\uffef\001\002\000\004\005\u0193" +
    "\001\002\000\004\063\u0194\001\002\000\004\006\u0195\001" +
    "\002\000\004\010\u0196\001\002\000\004\016\u0197\001\002" +
    "\000\036\027\106\030\067\031\054\032\076\033\065\034" +
    "\064\035\104\036\100\037\062\040\070\041\066\061\072" +
    "\062\073\063\055\001\002\000\004\022\u0199\001\002\000" +
    "\004\013\u019a\001\002\000\022\022\uffea\023\uffea\026\uffea" +
    "\042\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001\002\000" +
    "\004\021\u019c\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019a\000\004\002\004\001\001\000\030\003\007\005" +
    "\025\006\027\007\010\011\006\021\016\057\024\060\020" +
    "\061\015\062\017\063\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\u0126" +
    "\005\025\006\027\007\010\011\006\021\016\057\024\060" +
    "\020\061\015\062\017\063\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\030\055\031\073\033\076\034\057\041\104\042" +
    "\062\043\056\044\074\045\060\046\101\047\100\053\102" +
    "\054\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\030\176\031\073" +
    "\033\202\034\057\035\175\041\104\042\062\043\056\044" +
    "\074\045\060\046\101\047\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\110\001\001\000\002\001\001\000\010\030\113\031\073" +
    "\040\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\113\031\073\040\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\113\031\073\040\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\113\031\073\040\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\146\030\145\031\073\041\151\042\062\043\056\044" +
    "\074\045\060\046\101\047\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\153\030\145\031\073\041\151" +
    "\042\062\043\056\044\074\045\060\046\101\047\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\030\055\031\073\033\076\034\057" +
    "\041\104\042\062\043\056\044\074\045\060\046\101\047" +
    "\100\053\244\054\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\030\055\031\073\033\076\034\057\041" +
    "\104\042\062\043\056\044\074\045\060\046\101\047\100" +
    "\053\324\054\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\012" +
    "\362\022\375\023\366\024\364\025\371\026\374\041\373" +
    "\042\062\043\056\044\074\045\060\046\101\047\100\064" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\027\u0100\030\145\031\073\041\151\042\062\043\056\044" +
    "\074\045\060\046\101\047\100\001\001\000\002\001\001" +
    "\000\026\027\u0102\030\145\031\073\041\151\042\062\043" +
    "\056\044\074\045\060\046\101\047\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\027\u0105\030\145\031" +
    "\073\041\151\042\062\043\056\044\074\045\060\046\101" +
    "\047\100\001\001\000\002\001\001\000\026\027\u0107\030" +
    "\145\031\073\041\151\042\062\043\056\044\074\045\060" +
    "\046\101\047\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\027\u010a\030\145\031\073\041\151\042\062" +
    "\043\056\044\074\045\060\046\101\047\100\001\001\000" +
    "\002\001\001\000\026\027\u010c\030\145\031\073\041\151" +
    "\042\062\043\056\044\074\045\060\046\101\047\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\027\u010f" +
    "\030\145\031\073\041\151\042\062\043\056\044\074\045" +
    "\060\046\101\047\100\001\001\000\002\001\001\000\026" +
    "\027\u0111\030\145\031\073\041\151\042\062\043\056\044" +
    "\074\045\060\046\101\047\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\027\u0116\030\145\031\073\041\151\042\062\043\056" +
    "\044\074\045\060\046\101\047\100\001\001\000\002\001" +
    "\001\000\026\027\u0118\030\145\031\073\041\151\042\062" +
    "\043\056\044\074\045\060\046\101\047\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\u0120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\u012c\051\u012b\052\u0129\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\u0134\001\001\000\002\001\001\000\034\030" +
    "\055\031\073\033\076\034\057\041\104\042\062\043\056" +
    "\044\074\045\060\046\101\047\100\053\u0137\054\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\012\u013c\016\u013b\017\u0141\020" +
    "\u013e\022\375\023\366\024\364\025\371\026\374\041\u0142" +
    "\042\062\043\056\044\074\045\060\046\101\047\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\012\u0144\017\u0141\020\u0147\022\375\023\366\024\364" +
    "\025\371\026\374\041\u014a\042\062\043\056\044\074\045" +
    "\060\046\101\047\100\065\u0145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\054\u0164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\030" +
    "\055\031\073\033\076\034\057\041\104\042\062\043\056" +
    "\044\074\045\060\046\101\047\100\053\u016d\054\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\u018c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\030\055\031\073\033\076\034\057\041\104\042\062\043" +
    "\056\044\074\045\060\046\101\047\100\053\u0197\054\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s)
    {
        //System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizador_sintactico$actions {
  private final analizador_sintactico parser;

  /** Constructor */
  CUP$analizador_sintactico$actions(analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action_part00000000(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador_sintactico$parser.done_parsing();
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= cod 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= cod codigo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod ::= textos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod ::= numericas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod ::= arreglos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod ::= print 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cod ::= graficas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // textos ::= RESERVADA_VAR DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO DOS_PUNTOS DOS_PUNTOS text MENOR_QUE GUION STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("textos",3, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // text ::= ID 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("text",52, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // text ::= RESERVADA_TITULO_GRAFICA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("text",52, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numericas ::= RESERVADA_VAR DOS_PUNTOS RESERVADA_DOUBLE DOS_PUNTOS DOS_PUNTOS ID MENOR_QUE GUION valorNumerico RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("numericas",4, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valorNumerico ::= NUMEROS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorNumerico",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // valorNumerico ::= ID 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorNumerico",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valorNumerico ::= aritmeticas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorNumerico",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valorNumerico ::= estadisticas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorNumerico",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipoArreglo ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoArreglo",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipoArreglo ::= RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoArreglo",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ultimo ::= ID CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ultimo ::= NUMEROS CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ultimo ::= anidacion CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ultimo ::= CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arreglos ::= RESERVADA_ARRAY DOS_PUNTOS tipoArreglo DOS_PUNTOS DOS_PUNTOS IDE MENOR_QUE GUION CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("arreglos",5, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenidoD ::= contenido 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoD",41, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contenidoD ::= contenidoS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoD",41, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contenidoS ::= STRING COMA contenidoS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoS",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contenidoS ::= STRING CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoS",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contenido ::= contenido2 contenido 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenido ::= contenido2 ultimo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenido2 ::= anidacion COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenido2 ::= NUMEROS COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenido2 ::= IDE COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contenido2 ::= estadisticas COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contenido2 ::= estadisticas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritmeticas ::= suma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // aritmeticas ::= resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // aritmeticas ::= multiplicacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aritmeticas ::= division 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aritmeticas ::= modulo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // suma ::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n");
  RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("suma",16, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // resta ::= RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n");
    RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("resta",17, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // multiplicacion ::= RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
  RESULT=r;  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multiplicacion",18, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // division ::= RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("division",19, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // modulo ::= RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("modulo",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoAnidada ::= RESERVADA_SUMA 
            {
              Object RESULT =null;
		RESULT="suma";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tipoAnidada ::= RESERVADA_RESTA 
            {
              Object RESULT =null;
		RESULT="resta";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoAnidada ::= RESERVADA_MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="multiplicacion";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoAnidada ::= RESERVADA_DIVISION 
            {
              Object RESULT =null;
		RESULT="division";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoAnidada ::= RESERVADA_MODULO 
            {
              Object RESULT =null;
		RESULT="modulo";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valorAritmetico ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT= c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valorAritmetico ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // valorAritmetico ::= anidacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // valorAritmetico ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // anidacion ::= tipoAnidada PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}

   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("anidacion",22, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estadisticas ::= media 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estadisticas ::= mediana 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // estadisticas ::= moda 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // estadisticas ::= varianza 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // estadisticas ::= max 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estadisticas ::= min 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // contenidoE ::= CORCHETE_IZQUIERDO contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidoE ::= IDE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenidoEE ::= NUMEROS COMA contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenidoEE ::= anidacion COMA contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidoEE ::= ID contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenidoEE ::= NUMEROS CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenidoEE ::= anidacion CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenidoEE ::= ID CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // media ::= RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("media",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mediana ::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("mediana",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // moda ::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("moda",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // varianza ::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("varianza",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // max ::= RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("max",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // min ::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("min",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // print ::= RESERVADA_CONSOLE DOS_PUNTOS DOS_PUNTOS desicionprint 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // desicionprint ::= print1 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // desicionprint ::= print2 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // print1 ::= RESERVADA_PRINT SIGNO_IGUAL valorPrint RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 
        System.out.println("\n"+"Print desde el cup de la cadena: " + s+"\n");
    
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print1",39, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valorPrint ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valorPrint ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valorPrint ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = iddd; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valorPrint ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valorPrint ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valorPrint ::= combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // combinado ::= combinacion combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + cc.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // combinado ::= combinacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // combinado ::= combinacion comb 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + r.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // combinacion ::= STRING COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // combinacion ::= NUMEROS COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // combinacion ::= aritmeticas COMA 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // combinacion ::= estadisticas COMA 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // combinacion ::= ID COMA 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = iddd; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comb ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comb ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = iddd; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comb ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comb ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comb ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // print2 ::= RESERVADA_COLUMN SIGNO_IGUAL pp GUION MAYOR_QUE ppp RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print2",40, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // pp ::= STRING 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",53, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // pp ::= ID 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",53, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ppp ::= IDE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",54, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ppp ::= CORCHETE_IZQUIERDO contenidoD 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",54, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // graficas ::= pie 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // graficas ::= barras 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // graficas ::= linea 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // graficas ::= histograma 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // pie ::= RESERVADA_GRAFICA_PIE PARENTESIS_IZQUIERDO RESRVADA_LABEL_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC RESERVADA_GRAFICA_PIE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pie",46, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-38)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // barras ::= RESERVADA_GRAFICA_BARRA PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC RESERVADA_GRAFICA_BARRA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("barras",47, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-58)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // linea ::= RESERVADA_GRAFICA_LINE PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC RESERVADA_GRAFICA_LINE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("linea",48, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-58)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // histograma ::= RESERVADA_GRAFIA_HISTOGRAMA PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC RESERVADA_GRAFIA_HISTOGRAMA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("histograma",49, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizador_sintactico$do_action_part00000000(
                               CUP$analizador_sintactico$act_num,
                               CUP$analizador_sintactico$parser,
                               CUP$analizador_sintactico$stack,
                               CUP$analizador_sintactico$top);
    }
}

}
