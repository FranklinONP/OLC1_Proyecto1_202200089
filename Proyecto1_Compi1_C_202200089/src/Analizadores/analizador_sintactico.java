
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\005\017\000\002\006\015\000\002" +
    "\032\003\000\002\032\003\000\002\035\004\000\002\035" +
    "\004\000\002\035\004\000\002\007\016\000\002\033\004" +
    "\000\002\033\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\022" +
    "\011\000\002\023\011\000\002\024\011\000\002\025\011" +
    "\000\002\026\011\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\010\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\037\004\000\002\037\003\000\002\040\005\000\002" +
    "\040\005\000\002\040\004\000\002\040\004\000\002\040" +
    "\004\000\002\040\004\000\002\042\006\000\002\043\006" +
    "\000\002\044\006\000\002\045\006\000\002\046\006\000" +
    "\002\047\006\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\020\004\000\002\020\003\000\002\017" +
    "\005\000\002\017\005\000\002\011\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\021\004\001\002\000\036\023\032\026" +
    "\022\027\046\030\030\031\007\032\035\033\021\034\017" +
    "\035\042\036\036\037\014\040\031\041\023\042\024\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\014\264\001\002\000\040\022\ufffa\023\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\001" +
    "\002\000\040\022\ufff9\023\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\001\002\000\040\022\uffd6" +
    "\023\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\001\002\000\040\022\uffd4\023\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\001\002\000" +
    "\004\014\261\001\002\000\004\022\257\001\002\000\040" +
    "\022\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\001\002\000\004\014\254\001\002\000" +
    "\040\022\ufffb\023\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040" +
    "\ufffb\041\ufffb\042\ufffb\001\002\000\004\014\246\001\002" +
    "\000\004\005\212\001\002\000\004\014\207\001\002\000" +
    "\004\005\165\001\002\000\040\022\uffe8\023\uffe8\026\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\001\002" +
    "\000\040\022\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\001\002\000\040\022\uffff\023" +
    "\032\026\022\027\046\030\030\031\007\032\035\033\021" +
    "\034\017\035\042\036\036\037\014\040\031\041\023\042" +
    "\024\001\002\000\004\014\156\001\002\000\004\014\153" +
    "\001\002\000\004\005\126\001\002\000\040\022\uffe7\023" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\001\002\000\040\022\uffd5\023\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\001\002\000\004" +
    "\014\120\001\002\000\004\014\115\001\002\000\040\022" +
    "\uffd2\023\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041" +
    "\uffd2\042\uffd2\001\002\000\040\022\uffd3\023\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\001\002" +
    "\000\040\022\ufff8\023\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\001\002\000\004\014\074\001" +
    "\002\000\040\022\uffe6\023\uffe6\026\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000\040\022\uffea" +
    "\023\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\001\002\000\040\022\ufffd\023\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\001\002\000" +
    "\004\014\050\001\002\000\040\022\ufffc\023\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\001\002" +
    "\000\020\004\061\027\053\030\062\031\051\032\060\033" +
    "\055\062\056\001\002\000\004\014\uffde\001\002\000\006" +
    "\012\uffd9\015\uffd9\001\002\000\004\014\uffe0\001\002\000" +
    "\004\014\067\001\002\000\004\014\uffdc\001\002\000\006" +
    "\012\uffdb\015\uffdb\001\002\000\004\012\063\001\002\000" +
    "\004\014\uffdd\001\002\000\006\012\uffda\015\uffda\001\002" +
    "\000\004\014\uffdf\001\002\000\020\004\061\027\053\030" +
    "\062\031\051\032\060\033\055\062\056\001\002\000\004" +
    "\015\065\001\002\000\004\013\066\001\002\000\040\022" +
    "\uffe5\023\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\001\002\000\020\004\061\027\053\030\062" +
    "\031\051\032\060\033\055\062\056\001\002\000\004\012" +
    "\071\001\002\000\020\004\061\027\053\030\062\031\051" +
    "\032\060\033\055\062\056\001\002\000\004\015\073\001" +
    "\002\000\010\012\uffd8\015\uffd8\017\uffd8\001\002\000\006" +
    "\004\075\016\077\001\002\000\004\015\uffd0\001\002\000" +
    "\004\015\114\001\002\000\020\004\102\027\053\030\062" +
    "\031\051\032\060\033\055\062\101\001\002\000\006\012" +
    "\111\017\112\001\002\000\006\012\106\017\107\001\002" +
    "\000\022\004\102\017\104\027\053\030\062\031\051\032" +
    "\060\033\055\062\101\001\002\000\004\015\uffd1\001\002" +
    "\000\004\015\uffca\001\002\000\004\015\uffcd\001\002\000" +
    "\020\004\102\027\053\030\062\031\051\032\060\033\055" +
    "\062\101\001\002\000\004\015\uffcc\001\002\000\004\015" +
    "\uffcf\001\002\000\020\004\102\027\053\030\062\031\051" +
    "\032\060\033\055\062\101\001\002\000\004\015\uffcb\001" +
    "\002\000\004\015\uffce\001\002\000\040\022\uffc8\023\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\001\002\000\006\004\075\016\077\001\002\000\004\015" +
    "\117\001\002\000\040\022\uffc7\023\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\001\002\000\020" +
    "\004\061\027\053\030\062\031\051\032\060\033\055\062" +
    "\056\001\002\000\004\012\122\001\002\000\020\004\061" +
    "\027\053\030\062\031\051\032\060\033\055\062\056\001" +
    "\002\000\004\015\124\001\002\000\004\013\125\001\002" +
    "\000\040\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\001\002\000\006\024\130\025" +
    "\127\001\002\000\004\016\141\001\002\000\004\005\131" +
    "\001\002\000\004\005\132\001\002\000\004\004\133\001" +
    "\002\000\004\006\134\001\002\000\004\010\135\001\002" +
    "\000\004\062\136\001\002\000\004\022\137\001\002\000" +
    "\004\013\140\001\002\000\040\022\ufff6\023\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\001\002" +
    "\000\004\017\142\001\002\000\004\005\143\001\002\000" +
    "\004\005\144\001\002\000\004\004\145\001\002\000\004" +
    "\006\146\001\002\000\004\010\147\001\002\000\004\061" +
    "\150\001\002\000\004\022\151\001\002\000\004\013\152" +
    "\001\002\000\040\022\ufff7\023\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\042\ufff7\001\002\000\006\004" +
    "\075\016\077\001\002\000\004\015\155\001\002\000\040" +
    "\022\uffc5\023\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\001\002\000\020\004\061\027\053\030" +
    "\062\031\051\032\060\033\055\062\056\001\002\000\004" +
    "\012\160\001\002\000\020\004\061\027\053\030\062\031" +
    "\051\032\060\033\055\062\056\001\002\000\004\015\162" +
    "\001\002\000\004\013\163\001\002\000\040\022\uffe4\023" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\001\002\000\004\022\ufffe\001\002\000\004\005\166" +
    "\001\002\000\004\043\167\001\002\000\004\020\170\001" +
    "\002\000\006\061\173\062\175\001\002\000\010\022\uffbf" +
    "\061\204\062\206\001\002\000\004\022\202\001\002\000" +
    "\006\012\200\022\uffc3\001\002\000\004\022\uffc1\001\002" +
    "\000\006\012\176\022\uffc2\001\002\000\004\061\177\001" +
    "\002\000\010\022\uffbd\061\uffbd\062\uffbd\001\002\000\004" +
    "\062\201\001\002\000\010\022\uffbe\061\uffbe\062\uffbe\001" +
    "\002\000\004\013\203\001\002\000\040\022\uffbc\023\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\001\002\000\004\012\200\001\002\000\004\022\uffc0\001" +
    "\002\000\004\012\176\001\002\000\006\004\075\016\077" +
    "\001\002\000\004\015\211\001\002\000\040\022\uffc4\023" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\001\002\000\006\024\215\025\214\001\002\000\004" +
    "\005\216\001\002\000\004\005\ufff4\001\002\000\004\005" +
    "\ufff5\001\002\000\004\005\217\001\002\000\004\004\220" +
    "\001\002\000\004\006\221\001\002\000\004\010\222\001" +
    "\002\000\004\016\223\001\002\000\020\004\226\027\053" +
    "\030\062\031\051\032\060\033\055\062\225\001\002\000" +
    "\004\012\242\001\002\000\004\012\240\001\002\000\004" +
    "\012\236\001\002\000\004\022\244\001\002\000\020\004" +
    "\234\027\053\030\062\031\051\032\060\033\055\062\233" +
    "\001\002\000\006\012\242\017\243\001\002\000\004\022" +
    "\uffee\001\002\000\006\012\240\017\241\001\002\000\006" +
    "\012\236\017\237\001\002\000\004\022\uffef\001\002\000" +
    "\020\004\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\062\uffeb\001\002\000\004\022\ufff3\001\002\000\020\004" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\062\uffec" +
    "\001\002\000\004\022\ufff2\001\002\000\020\004\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\062\uffed\001\002" +
    "\000\004\022\ufff1\001\002\000\004\013\245\001\002\000" +
    "\040\022\ufff0\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\042\ufff0\001\002\000\020\004\061\027\053" +
    "\030\062\031\051\032\060\033\055\062\056\001\002\000" +
    "\004\012\250\001\002\000\020\004\061\027\053\030\062" +
    "\031\051\032\060\033\055\062\056\001\002\000\004\015" +
    "\252\001\002\000\004\013\253\001\002\000\040\022\uffe1" +
    "\023\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1" +
    "\042\uffe1\001\002\000\006\004\075\016\077\001\002\000" +
    "\004\015\256\001\002\000\040\022\uffc9\023\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\004\021\260\001\002\000\004\002\000\001\002\000" +
    "\006\004\075\016\077\001\002\000\004\015\263\001\002" +
    "\000\040\022\uffc6\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\042\uffc6\001\002\000\020\004\061\027" +
    "\053\030\062\031\051\032\060\033\055\062\056\001\002" +
    "\000\004\012\266\001\002\000\020\004\061\027\053\030" +
    "\062\031\051\032\060\033\055\062\056\001\002\000\004" +
    "\015\270\001\002\000\004\013\271\001\002\000\040\022" +
    "\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\002\004\001\001\000\050\003\014\005" +
    "\044\006\046\007\017\011\007\012\010\021\026\022\043" +
    "\023\025\024\024\025\032\026\042\041\040\042\015\043" +
    "\011\044\033\045\012\046\037\047\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\163\005\044\006\046" +
    "\007\017\011\007\012\010\021\026\022\043\023\025\024" +
    "\024\025\032\026\042\041\040\042\015\043\011\044\033" +
    "\045\012\046\037\047\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\027\056\030\051" +
    "\031\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\063\030\051\031\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\067\030\051\031\053\001\001\000\002" +
    "\001\001\000\010\027\071\030\051\031\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\077\031" +
    "\053\040\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\077\031\053\040\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\077" +
    "\031\053\040\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\077\031\053\040\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\120\030\051\031\053\001\001\000\002\001\001\000" +
    "\010\027\122\030\051\031\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\156\030\051\031\053\001\001\000" +
    "\002\001\001\000\010\027\160\030\051\031\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\171\017\170\020\173\001\001\000" +
    "\006\017\170\020\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\223\031\053" +
    "\033\226\034\227\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\230" +
    "\031\053\033\234\034\227\035\231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\246\030\051\031\053\001\001\000\002\001\001\000\010" +
    "\027\250\030\051\031\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\264\030\051\031\053\001" +
    "\001\000\002\001\001\000\010\027\266\030\051\031\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol s)
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizador_sintactico$actions {
  private final analizador_sintactico parser;

  /** Constructor */
  CUP$analizador_sintactico$actions(analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action_part00000000(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador_sintactico$parser.done_parsing();
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= cod 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= cod codigo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod ::= textos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod ::= numericas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod ::= arreglos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod ::= print 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cod ::= aritmeticas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cod ::= estadisticas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // textos ::= RESERVADA_VAR DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO DOS_PUNTOS DOS_PUNTOS ID MENOR_QUE GUION STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("textos",3, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // numericas ::= RESERVADA_VAR DOS_PUNTOS RESERVADA_DOUBLE DOS_PUNTOS DOS_PUNTOS ID MENOR_QUE GUION NUMEROS RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("numericas",4, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoArreglo ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoArreglo",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoArreglo ::= RESERVADA_CHAR 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoArreglo",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ultimo ::= ID CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ultimo ::= NUMEROS CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ultimo ::= anidacion CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ultimo",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // arreglos ::= RESERVADA_ARRAY DOS_PUNTOS tipoArreglo DOS_PUNTOS DOS_PUNTOS ID MENOR_QUE GUION CORCHETE_IZQUIERDO contenido RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("arreglos",5, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // contenido ::= contenido2 contenido 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // contenido ::= contenido2 ultimo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // contenido2 ::= anidacion COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // contenido2 ::= NUMEROS COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // contenido2 ::= ID COMA 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenido2",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aritmeticas ::= suma 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aritmeticas ::= resta 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aritmeticas ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aritmeticas ::= division 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // aritmeticas ::= modulo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // suma ::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n"); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("suma",16, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // resta ::= RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n"); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("resta",17, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // multiplicacion ::= RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multiplicacion",18, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // division ::= RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n"); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("division",19, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modulo ::= RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n"); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("modulo",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipoAnidada ::= RESERVADA_SUMA 
            {
              Object RESULT =null;
		RESULT="suma";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipoAnidada ::= RESERVADA_RESTA 
            {
              Object RESULT =null;
		RESULT="resta";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipoAnidada ::= RESERVADA_MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="multiplicacion";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipoAnidada ::= RESERVADA_DIVISION 
            {
              Object RESULT =null;
		RESULT="division";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipoAnidada ::= RESERVADA_MODULO 
            {
              Object RESULT =null;
		RESULT="modulo";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valorAritmetico ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT= c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valorAritmetico ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // valorAritmetico ::= anidacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // anidacion ::= tipoAnidada PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}

   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("anidacion",22, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estadisticas ::= media 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estadisticas ::= mediana 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estadisticas ::= moda 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // estadisticas ::= varianza 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // estadisticas ::= max 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // estadisticas ::= min 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenidoE ::= CORCHETE_IZQUIERDO contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenidoE ::= ID 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidoEE ::= NUMEROS COMA contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidoEE ::= anidacion COMA contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidoEE ::= ID contenidoEE 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidoEE ::= NUMEROS CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidoEE ::= anidacion CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidoEE ::= ID CORCHETE_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoEE",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // media ::= RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("media",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mediana ::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("mediana",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // moda ::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("moda",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // varianza ::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("varianza",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // max ::= RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("max",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // min ::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("min",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valorPrint ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valorPrint ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valorPrint ::= combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // combinado ::= combinacion combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + cc.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // combinado ::= combinacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // combinacion ::= STRING COMA NUMEROS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s + n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // combinacion ::= NUMEROS COMA STRING 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n.toString() + s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // print ::= RESERVADA_CONSOLE DOS_PUNTOS DOS_PUNTOS RESERVADA_PRINT SIGNO_IGUAL valorPrint RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 
        System.out.println("\n"+"Print desde el cup de la cadena: " + s+"\n");
    
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizador_sintactico$do_action_part00000000(
                               CUP$analizador_sintactico$act_num,
                               CUP$analizador_sintactico$parser,
                               CUP$analizador_sintactico$stack,
                               CUP$analizador_sintactico$top);
    }
}

}
