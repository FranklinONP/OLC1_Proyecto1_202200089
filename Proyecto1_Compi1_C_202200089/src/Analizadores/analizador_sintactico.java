
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.Arrays;
import java.util.LinkedList;
import java_cup.runtime.*;
import Errores.Error_;
import GUI.gui;
import DB.ts;
import java.util.HashMap;
import java.util.Map;
import DB.ImageCreator;
import java.util.HashSet;
import java.util.Set;
import java.io.File;
import java.io.IOException;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.plot.PlotOrientation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\033\003\000\002\033\003\000\002\017\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\005\014\000\002\006\014\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\027\010\000\002\030\010\000\002" +
    "\031\010\000\002\032\010\000\002\034\010\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\037\010\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\026\003" +
    "\000\002\026\003\000\002\020\006\000\002\021\006\000" +
    "\002\022\006\000\002\023\006\000\002\024\006\000\002" +
    "\025\006\000\002\007\006\000\002\040\003\000\002\040" +
    "\003\000\002\041\007\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\004\000\002\043\003\000\002" +
    "\043\004\000\002\044\004\000\002\044\004\000\002\044" +
    "\004\000\002\044\004\000\002\044\004\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\046\012\000\002\047\003\000\002" +
    "\047\003\000\002\050\003\000\002\050\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\057\003\000\002\057" +
    "\003\000\002\064\014\000\002\060\014\000\002\061\012" +
    "\000\002\062\014\000\002\063\014\000\002\065\014\000" +
    "\002\066\012\000\002\052\020\000\002\051\016\000\002" +
    "\053\020\000\002\054\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\021\004\001\002\000\020\023\012\026" +
    "\015\042\013\045\011\046\022\047\007\050\025\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\004\014\u0135\001\002\000\022\022\ufffb\023\ufffb\026\ufffb" +
    "\042\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000" +
    "\004\014\375\001\002\000\004\005\357\001\002\000\004" +
    "\005\306\001\002\000\022\022\ufffd\023\ufffd\026\ufffd\042" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002\000\004" +
    "\005\271\001\002\000\022\022\uffa4\023\uffa4\026\uffa4\042" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\001\002\000\022" +
    "\022\uffff\023\012\026\015\042\013\045\011\046\022\047" +
    "\007\050\025\001\002\000\022\022\uffa1\023\uffa1\026\uffa1" +
    "\042\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\001\002\000" +
    "\022\022\ufffc\023\ufffc\026\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\001\002\000\004\014\240\001\002\000" +
    "\022\022\ufffa\023\ufffa\026\ufffa\042\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\001\002\000\022\022\uffa2\023\uffa2\026" +
    "\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\001\002" +
    "\000\004\014\032\001\002\000\004\022\030\001\002\000" +
    "\022\022\uffa3\023\uffa3\026\uffa3\042\uffa3\045\uffa3\046\uffa3" +
    "\047\uffa3\050\uffa3\001\002\000\004\021\031\001\002\000" +
    "\004\002\000\001\002\000\006\051\035\056\036\001\002" +
    "\000\010\051\uff98\056\uff98\060\uff98\001\002\000\010\051" +
    "\uff97\056\uff97\060\uff97\001\002\000\004\005\227\001\002" +
    "\000\004\005\050\001\002\000\006\051\035\056\036\001" +
    "\002\000\004\060\041\001\002\000\004\050\042\001\002" +
    "\000\004\022\043\001\002\000\004\013\044\001\002\000" +
    "\004\015\045\001\002\000\004\022\046\001\002\000\004" +
    "\013\047\001\002\000\022\022\uff8c\023\uff8c\026\uff8c\042" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\001\002\000\004" +
    "\005\051\001\002\000\006\024\054\025\053\001\002\000" +
    "\004\020\057\001\002\000\004\016\055\001\002\000\006" +
    "\005\ufff8\020\ufff8\001\002\000\004\017\056\001\002\000" +
    "\006\005\ufff9\020\ufff9\001\002\000\006\016\062\063\061" +
    "\001\002\000\004\022\225\001\002\000\006\015\uffc7\022" +
    "\uffc7\001\002\000\036\004\075\027\117\030\100\031\064" +
    "\032\107\033\073\034\072\035\113\036\110\037\070\040" +
    "\101\041\074\061\103\062\104\001\002\000\006\015\uffc8" +
    "\022\uffc8\001\002\000\004\014\220\001\002\000\006\012" +
    "\216\017\uffe6\001\002\000\012\012\uffcd\015\uffcd\017\uffcd" +
    "\022\uffcd\001\002\000\012\012\uffcb\015\uffcb\017\uffcb\022" +
    "\uffcb\001\002\000\004\014\213\001\002\000\012\012\uffce" +
    "\015\uffce\017\uffce\022\uffce\001\002\000\004\014\210\001" +
    "\002\000\004\014\203\001\002\000\004\014\200\001\002" +
    "\000\006\012\176\017\uffe7\001\002\000\010\012\uffe0\017" +
    "\uffe0\022\uffe0\001\002\000\010\012\uffe1\017\uffe1\022\uffe1" +
    "\001\002\000\004\014\171\001\002\000\004\014\166\001" +
    "\002\000\004\017\165\001\002\000\006\012\163\017\uffe9" +
    "\001\002\000\006\012\161\017\uffe8\001\002\000\010\012" +
    "\uffdf\017\uffdf\022\uffdf\001\002\000\012\012\uffcc\015\uffcc" +
    "\017\uffcc\022\uffcc\001\002\000\004\014\154\001\002\000" +
    "\004\014\151\001\002\000\012\012\uffc9\015\uffc9\017\uffc9" +
    "\022\uffc9\001\002\000\012\012\uffca\015\uffca\017\uffca\022" +
    "\uffca\001\002\000\004\014\146\001\002\000\006\012\144" +
    "\017\uffe5\001\002\000\010\012\uffde\017\uffde\022\uffde\001" +
    "\002\000\010\012\uffe2\017\uffe2\022\uffe2\001\002\000\004" +
    "\014\120\001\002\000\034\004\125\027\133\030\126\031" +
    "\121\032\131\033\123\034\072\035\113\036\110\037\070" +
    "\040\101\041\074\062\127\001\002\000\004\014\uffd6\001" +
    "\002\000\006\012\uffd1\015\uffd1\001\002\000\004\014\uffd4" +
    "\001\002\000\004\012\141\001\002\000\006\012\uffd2\015" +
    "\uffd2\001\002\000\004\014\uffd7\001\002\000\006\012\uffd3" +
    "\015\uffd3\001\002\000\004\014\134\001\002\000\004\014" +
    "\uffd5\001\002\000\006\012\uffd0\015\uffd0\001\002\000\004" +
    "\014\uffd8\001\002\000\034\004\125\027\133\030\126\031" +
    "\121\032\131\033\123\034\072\035\113\036\110\037\070" +
    "\040\101\041\074\062\127\001\002\000\004\012\136\001" +
    "\002\000\034\004\125\027\133\030\126\031\121\032\131" +
    "\033\123\034\072\035\113\036\110\037\070\040\101\041" +
    "\074\062\127\001\002\000\004\015\140\001\002\000\006" +
    "\012\uffcf\015\uffcf\001\002\000\034\004\125\027\133\030" +
    "\126\031\121\032\131\033\123\034\072\035\113\036\110" +
    "\037\070\040\101\041\074\062\127\001\002\000\004\015" +
    "\143\001\002\000\010\012\uffdd\017\uffdd\022\uffdd\001\002" +
    "\000\036\004\075\027\117\030\100\031\064\032\107\033" +
    "\073\034\072\035\113\036\110\037\070\040\101\041\074" +
    "\061\103\062\104\001\002\000\004\017\uffea\001\002\000" +
    "\006\016\062\063\061\001\002\000\004\015\150\001\002" +
    "\000\012\012\uffc5\015\uffc5\017\uffc5\022\uffc5\001\002\000" +
    "\006\016\062\063\061\001\002\000\004\015\153\001\002" +
    "\000\012\012\uffc4\015\uffc4\017\uffc4\022\uffc4\001\002\000" +
    "\034\004\125\027\133\030\126\031\121\032\131\033\123" +
    "\034\072\035\113\036\110\037\070\040\101\041\074\062" +
    "\127\001\002\000\004\012\156\001\002\000\034\004\125" +
    "\027\133\030\126\031\121\032\131\033\123\034\072\035" +
    "\113\036\110\037\070\040\101\041\074\062\127\001\002" +
    "\000\004\015\160\001\002\000\010\012\uffda\017\uffda\022" +
    "\uffda\001\002\000\036\004\075\027\117\030\100\031\064" +
    "\032\107\033\073\034\072\035\113\036\110\037\070\040" +
    "\101\041\074\061\103\062\104\001\002\000\004\017\uffed" +
    "\001\002\000\036\004\075\027\117\030\100\031\064\032" +
    "\107\033\073\034\072\035\113\036\110\037\070\040\101" +
    "\041\074\061\103\062\104\001\002\000\004\017\uffee\001" +
    "\002\000\006\015\uffef\022\uffef\001\002\000\006\016\062" +
    "\063\061\001\002\000\004\015\170\001\002\000\012\012" +
    "\uffc2\015\uffc2\017\uffc2\022\uffc2\001\002\000\034\004\125" +
    "\027\133\030\126\031\121\032\131\033\123\034\072\035" +
    "\113\036\110\037\070\040\101\041\074\062\127\001\002" +
    "\000\004\012\173\001\002\000\034\004\125\027\133\030" +
    "\126\031\121\032\131\033\123\034\072\035\113\036\110" +
    "\037\070\040\101\041\074\062\127\001\002\000\004\015" +
    "\175\001\002\000\010\012\uffdc\017\uffdc\022\uffdc\001\002" +
    "\000\036\004\075\027\117\030\100\031\064\032\107\033" +
    "\073\034\072\035\113\036\110\037\070\040\101\041\074" +
    "\061\103\062\104\001\002\000\004\017\uffec\001\002\000" +
    "\006\016\062\063\061\001\002\000\004\015\202\001\002" +
    "\000\012\012\uffc1\015\uffc1\017\uffc1\022\uffc1\001\002\000" +
    "\034\004\125\027\133\030\126\031\121\032\131\033\123" +
    "\034\072\035\113\036\110\037\070\040\101\041\074\062" +
    "\127\001\002\000\004\012\205\001\002\000\034\004\125" +
    "\027\133\030\126\031\121\032\131\033\123\034\072\035" +
    "\113\036\110\037\070\040\101\041\074\062\127\001\002" +
    "\000\004\015\207\001\002\000\010\012\uffd9\017\uffd9\022" +
    "\uffd9\001\002\000\006\016\062\063\061\001\002\000\004" +
    "\015\212\001\002\000\012\012\uffc6\015\uffc6\017\uffc6\022" +
    "\uffc6\001\002\000\006\016\062\063\061\001\002\000\004" +
    "\015\215\001\002\000\012\012\uffc3\015\uffc3\017\uffc3\022" +
    "\uffc3\001\002\000\036\004\075\027\117\030\100\031\064" +
    "\032\107\033\073\034\072\035\113\036\110\037\070\040" +
    "\101\041\074\061\103\062\104\001\002\000\004\017\uffeb" +
    "\001\002\000\034\004\125\027\133\030\126\031\121\032" +
    "\131\033\123\034\072\035\113\036\110\037\070\040\101" +
    "\041\074\062\127\001\002\000\004\012\222\001\002\000" +
    "\034\004\125\027\133\030\126\031\121\032\131\033\123" +
    "\034\072\035\113\036\110\037\070\040\101\041\074\062" +
    "\127\001\002\000\004\015\224\001\002\000\010\012\uffdb" +
    "\017\uffdb\022\uffdb\001\002\000\004\013\226\001\002\000" +
    "\012\051\uff90\056\uff90\057\uff90\060\uff90\001\002\000\004" +
    "\005\230\001\002\000\004\025\231\001\002\000\004\016" +
    "\232\001\002\000\004\017\233\001\002\000\004\020\234" +
    "\001\002\000\004\061\235\001\002\000\004\022\236\001" +
    "\002\000\004\013\237\001\002\000\022\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\001" +
    "\002\000\010\051\035\056\036\057\243\001\002\000\010" +
    "\051\035\056\036\057\243\001\002\000\012\051\uff99\056" +
    "\uff99\057\uff99\060\uff99\001\002\000\004\005\246\001\002" +
    "\000\012\051\uff9a\056\uff9a\057\uff9a\060\uff9a\001\002\000" +
    "\012\051\uff9b\056\uff9b\057\uff9b\060\uff9b\001\002\000\004" +
    "\005\247\001\002\000\004\025\250\001\002\000\004\016" +
    "\251\001\002\000\004\017\252\001\002\000\004\020\253" +
    "\001\002\000\006\016\062\063\061\001\002\000\004\022" +
    "\255\001\002\000\004\013\256\001\002\000\012\051\uff91" +
    "\056\uff91\057\uff91\060\uff91\001\002\000\010\051\035\056" +
    "\036\057\243\001\002\000\004\060\261\001\002\000\004" +
    "\046\262\001\002\000\004\022\263\001\002\000\004\013" +
    "\264\001\002\000\004\015\265\001\002\000\004\022\266" +
    "\001\002\000\004\013\267\001\002\000\022\022\uff8e\023" +
    "\uff8e\026\uff8e\042\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\001\002\000\004\022\ufffe\001\002\000\006\024\054\025" +
    "\053\001\002\000\004\005\274\001\002\000\004\063\276" +
    "\001\002\000\004\005\275\001\002\000\006\004\ufff7\063" +
    "\ufff7\001\002\000\004\006\277\001\002\000\004\010\300" +
    "\001\002\000\006\016\062\063\302\001\002\000\004\022" +
    "\304\001\002\000\004\022\ufff0\001\002\000\004\022\ufff1" +
    "\001\002\000\004\013\305\001\002\000\022\022\uffe3\023" +
    "\uffe3\026\uffe3\042\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\001\002\000\004\005\307\001\002\000\006\043\312\044" +
    "\314\001\002\000\022\022\uffbe\023\uffbe\026\uffbe\042\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\001\002\000\022\022" +
    "\uffbf\023\uffbf\026\uffbf\042\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\001\002\000\004\020\330\001\002\000\022\022" +
    "\uffc0\023\uffc0\026\uffc0\042\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\001\002\000\004\020\315\001\002\000\006\004" +
    "\316\061\320\001\002\000\004\010\uffa7\001\002\000\004" +
    "\010\321\001\002\000\004\010\uffa8\001\002\000\004\007" +
    "\322\001\002\000\006\016\062\063\324\001\002\000\004" +
    "\022\326\001\002\000\004\022\uffa6\001\002\000\004\022" +
    "\uffa5\001\002\000\004\013\327\001\002\000\022\022\uffa9" +
    "\023\uffa9\026\uffa9\042\uffa9\045\uffa9\046\uffa9\047\uffa9\050" +
    "\uffa9\001\002\000\036\004\333\027\117\030\100\031\064" +
    "\032\107\033\073\034\072\035\113\036\110\037\070\040" +
    "\101\041\074\061\335\062\336\001\002\000\004\022\355" +
    "\001\002\000\006\012\354\022\uffb9\001\002\000\006\012" +
    "\353\022\uffba\001\002\000\004\022\uffb7\001\002\000\006" +
    "\012\352\022\uffbc\001\002\000\006\012\351\022\uffbb\001" +
    "\002\000\040\004\344\022\uffb5\027\117\030\100\031\064" +
    "\032\107\033\073\034\072\035\113\036\110\037\070\040" +
    "\101\041\074\061\346\062\347\001\002\000\006\012\341" +
    "\022\uffb8\001\002\000\040\004\uffb0\022\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\061\uffb0\062\uffb0\001\002\000" +
    "\006\012\354\022\uffac\001\002\000\004\022\uffb4\001\002" +
    "\000\006\012\353\022\uffad\001\002\000\004\022\uffb6\001" +
    "\002\000\006\012\352\022\uffae\001\002\000\006\012\351" +
    "\022\uffaa\001\002\000\006\012\341\022\uffab\001\002\000" +
    "\040\004\uffb2\022\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\061\uffb2\062\uffb2\001\002\000\040\004\uffb3\022\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\061\uffb3\062\uffb3" +
    "\001\002\000\040\004\uffaf\022\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\061\uffaf\062\uffaf\001\002\000\040\004" +
    "\uffb1\022\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\061" +
    "\uffb1\062\uffb1\001\002\000\004\013\356\001\002\000\022" +
    "\022\uffbd\023\uffbd\026\uffbd\042\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\001\002\000\006\024\054\025\053\001\002" +
    "\000\004\005\274\001\002\000\004\004\362\001\002\000" +
    "\004\006\363\001\002\000\004\010\364\001\002\000\036" +
    "\004\366\027\117\030\100\031\064\032\107\033\073\034" +
    "\072\035\113\036\110\037\070\040\101\041\074\061\367" +
    "\062\370\001\002\000\004\022\ufff3\001\002\000\004\022" +
    "\ufff5\001\002\000\004\022\ufff4\001\002\000\004\022\ufff6" +
    "\001\002\000\004\022\373\001\002\000\004\022\ufff2\001" +
    "\002\000\004\013\374\001\002\000\022\022\uffe4\023\uffe4" +
    "\026\uffe4\042\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\001" +
    "\002\000\014\051\035\052\u0101\053\u0105\054\u0102\055\u0107" +
    "\001\002\000\016\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\060\uff9e\001\002\000\016\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\060\uffa0\001\002\000\016\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\055\uff9c\060\uff9c\001\002\000\004" +
    "\005\u012c\001\002\000\004\005\u0123\001\002\000\016\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\060\uff9f\001\002" +
    "\000\016\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\060" +
    "\uff9d\001\002\000\004\005\u011c\001\002\000\014\051\035" +
    "\052\u0101\053\u0105\054\u0102\055\u0107\001\002\000\004\005" +
    "\u0108\001\002\000\004\005\u0109\001\002\000\004\025\u010a" +
    "\001\002\000\004\016\u010b\001\002\000\004\017\u010c\001" +
    "\002\000\004\020\u010d\001\002\000\004\061\u010e\001\002" +
    "\000\004\022\u010f\001\002\000\004\013\u0110\001\002\000" +
    "\016\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\060\uff92" +
    "\001\002\000\014\051\035\052\u0101\053\u0105\054\u0102\055" +
    "\u0107\001\002\000\014\051\035\052\u0101\053\u0105\054\u0102" +
    "\055\u0107\001\002\000\014\051\035\052\u0101\053\u0105\054" +
    "\u0102\055\u0107\001\002\000\004\060\u0115\001\002\000\004" +
    "\045\u0116\001\002\000\004\022\u0117\001\002\000\004\013" +
    "\u0118\001\002\000\004\015\u0119\001\002\000\004\022\u011a" +
    "\001\002\000\004\013\u011b\001\002\000\022\022\uff8f\023" +
    "\uff8f\026\uff8f\042\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\001\002\000\004\005\u011d\001\002\000\004\024\u011e\001" +
    "\002\000\004\020\u011f\001\002\000\006\016\062\063\061" +
    "\001\002\000\004\022\u0121\001\002\000\004\013\u0122\001" +
    "\002\000\016\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94" +
    "\060\uff94\001\002\000\004\005\u0124\001\002\000\004\025" +
    "\u0125\001\002\000\004\016\u0126\001\002\000\004\017\u0127" +
    "\001\002\000\004\020\u0128\001\002\000\004\061\u0129\001" +
    "\002\000\004\022\u012a\001\002\000\004\013\u012b\001\002" +
    "\000\016\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\060" +
    "\uff93\001\002\000\004\005\u012d\001\002\000\004\025\u012e" +
    "\001\002\000\004\016\u012f\001\002\000\004\017\u0130\001" +
    "\002\000\004\020\u0131\001\002\000\006\016\062\063\061" +
    "\001\002\000\004\022\u0133\001\002\000\004\013\u0134\001" +
    "\002\000\016\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95" +
    "\060\uff95\001\002\000\014\051\035\052\u0101\053\u0105\054" +
    "\u0102\055\u0107\001\002\000\014\051\035\052\u0101\053\u0105" +
    "\054\u0102\055\u0107\001\002\000\014\051\035\052\u0101\053" +
    "\u0105\054\u0102\055\u0107\001\002\000\014\051\035\052\u0101" +
    "\053\u0105\054\u0102\055\u0107\001\002\000\014\051\035\052" +
    "\u0101\053\u0105\054\u0102\055\u0107\001\002\000\004\060\u013b" +
    "\001\002\000\004\047\u013c\001\002\000\004\022\u013d\001" +
    "\002\000\004\013\u013e\001\002\000\004\015\u013f\001\002" +
    "\000\004\022\u0140\001\002\000\004\013\u0141\001\002\000" +
    "\022\022\uff8d\023\uff8d\026\uff8d\042\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\002\004\001\001\000\026\003\025\004" +
    "\016\005\013\006\020\007\007\010\022\051\015\052\026" +
    "\053\023\054\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\267\004\016" +
    "\005\013\006\020\007\007\010\022\051\015\052\026\053" +
    "\023\054\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\057\036\064\032\066" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\057\037\064\032\066" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\062\026\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\014\064\015\113\016\101\020\070" +
    "\021\065\022\105\023\066\024\111\025\110\027\115\030" +
    "\076\031\075\032\104\034\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\131\020" +
    "\070\021\065\022\105\023\066\024\111\025\110\035\123" +
    "\036\127\037\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\131\020\070\021\065\022\105\023\066\024\111\025" +
    "\110\035\134\036\127\037\121\001\001\000\002\001\001" +
    "\000\026\015\131\020\070\021\065\022\105\023\066\024" +
    "\111\025\110\035\136\036\127\037\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\131\020\070\021" +
    "\065\022\105\023\066\024\111\025\110\035\141\036\127" +
    "\037\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\064\015\113\016\144\020\070\021\065\022\105" +
    "\023\066\024\111\025\110\027\115\030\076\031\075\032" +
    "\104\034\114\001\001\000\002\001\001\000\006\017\062" +
    "\026\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\062\026\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\131\020\070\021\065\022\105\023" +
    "\066\024\111\025\110\035\154\036\127\037\121\001\001" +
    "\000\002\001\001\000\026\015\131\020\070\021\065\022" +
    "\105\023\066\024\111\025\110\035\156\036\127\037\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\014" +
    "\064\015\113\016\161\020\070\021\065\022\105\023\066" +
    "\024\111\025\110\027\115\030\076\031\075\032\104\034" +
    "\114\001\001\000\002\001\001\000\036\014\064\015\113" +
    "\016\163\020\070\021\065\022\105\023\066\024\111\025" +
    "\110\027\115\030\076\031\075\032\104\034\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\062\026" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\131\020\070\021\065\022\105\023\066\024\111\025" +
    "\110\035\171\036\127\037\121\001\001\000\002\001\001" +
    "\000\026\015\131\020\070\021\065\022\105\023\066\024" +
    "\111\025\110\035\173\036\127\037\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\014\064\015\113\016" +
    "\176\020\070\021\065\022\105\023\066\024\111\025\110" +
    "\027\115\030\076\031\075\032\104\034\114\001\001\000" +
    "\002\001\001\000\006\017\062\026\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\131\020\070\021" +
    "\065\022\105\023\066\024\111\025\110\035\203\036\127" +
    "\037\121\001\001\000\002\001\001\000\026\015\131\020" +
    "\070\021\065\022\105\023\066\024\111\025\110\035\205" +
    "\036\127\037\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\062\026\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\062\026\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\014\064\015\113" +
    "\016\216\020\070\021\065\022\105\023\066\024\111\025" +
    "\110\027\115\030\076\031\075\032\104\034\114\001\001" +
    "\000\002\001\001\000\026\015\131\020\070\021\065\022" +
    "\105\023\066\024\111\025\110\035\220\036\127\037\121" +
    "\001\001\000\002\001\001\000\026\015\131\020\070\021" +
    "\065\022\105\023\066\024\111\025\110\035\222\036\127" +
    "\037\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\056\240\064\241\065\244\066" +
    "\243\001\001\000\012\056\256\064\241\065\244\066\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\062\026\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\056\257\064\241\065" +
    "\244\066\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\271\001\001\000\004\012\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\302\033" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\312\041\310\046\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\324\050\322\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\331\015\337\020\070\021\065" +
    "\022\105\023\066\024\111\025\110\027\115\030\076\031" +
    "\075\032\104\034\114\042\330\043\333\044\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\014\341\015\347\020\070\021\065\022\105\023\066\024" +
    "\111\025\110\027\115\030\076\031\075\032\104\034\114" +
    "\043\344\044\336\045\342\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\357\001\001\000\004\012\360" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\013\370\014\364\015\371\020\070\021\065" +
    "\022\105\023\066\024\111\025\110\027\115\030\076\031" +
    "\075\032\104\034\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\055\u0105\060\u0102\061\375\062\u0103\063\377\064" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\055\u0110" +
    "\060\u0102\061\375\062\u0103\063\377\064\376\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\055\u0111\060\u0102\061\375\062\u0103\063\377\064" +
    "\376\001\001\000\016\055\u0112\060\u0102\061\375\062\u0103" +
    "\063\377\064\376\001\001\000\016\055\u0113\060\u0102\061" +
    "\375\062\u0103\063\377\064\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\062\026\u011f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\062\026\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\055\u0135\060\u0102\061" +
    "\375\062\u0103\063\377\064\376\001\001\000\016\055\u0136" +
    "\060\u0102\061\375\062\u0103\063\377\064\376\001\001\000" +
    "\016\055\u0137\060\u0102\061\375\062\u0103\063\377\064\376" +
    "\001\001\000\016\055\u0138\060\u0102\061\375\062\u0103\063" +
    "\377\064\376\001\001\000\016\055\u0139\060\u0102\061\375" +
    "\062\u0103\063\377\064\376\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String concatenarArreglos(double[] sinR, int[] frec, int[] frecA, double[] frecR) {
        StringBuilder resultado = new StringBuilder();

        for (int i = 0; i < sinR.length; i++) {
            // Concatenar valores de cada arreglo, separados por tabuladores
            resultado.append(sinR[i]).append("\t").append(frec[i]).append("\t").append(frecA[i]).append("\t").append(frecR[i]);

            // Agregar un salto de línea después de cada conjunto de valores
            resultado.append("%"+"\n");
        }

        return resultado.toString();
    }

    public static double[] obtenerArregloSinRepetidos(double[] arreglo) {
        Set<Double> valoresUnicos = new HashSet<>();

        // Agregar valores únicos al conjunto
        for (double valor : arreglo) {
            valoresUnicos.add(valor);
        }

        // Convertir el conjunto a un arreglo
        double[] resultado = new double[valoresUnicos.size()];
        int index = 0;
        for (double valor : valoresUnicos) {
            resultado[index++] = valor;
        }

        return resultado;
    }

    public static int[] obtenerFrecuencia(double[] arreglo) {
        Map<Double, Integer> mapaFrecuencia = new HashMap<>();

        // Contar frecuencia de cada valor
        for (double valor : arreglo) {
            mapaFrecuencia.put(valor, mapaFrecuencia.getOrDefault(valor, 0) + 1);
        }

        // Convertir el mapa a un arreglo de frecuencia
        int[] frecuencia = new int[mapaFrecuencia.size()];
        int index = 0;
        for (double valor : mapaFrecuencia.keySet()) {
            frecuencia[index++] = mapaFrecuencia.get(valor);
        }

        return frecuencia;
    }

    public static int[] obtenerFrecuenciaAcumulada(int[] frecuencia) {
        int[] frecuenciaAcumulada = new int[frecuencia.length];
        int acumulada = 0;

        for (int i = 0; i < frecuencia.length; i++) {
            acumulada += frecuencia[i];
            frecuenciaAcumulada[i] = acumulada;
        }

        return frecuenciaAcumulada;
    }

    public static double[] obtenerFrecuenciaRelativa(int[] frecuencia, int totalElementos) {
        double[] frecuenciaRelativa = new double[frecuencia.length];
        double num=0;

        for (int i = 0; i < frecuencia.length; i++) {
            num=(double) frecuencia[i] / totalElementos;
            num=num*100;
            int numR = (int) Math.round(num);
            frecuenciaRelativa[i] = numR;
        }

        return frecuenciaRelativa;
    }



public static String[] dividirStringPorComillas(String cadena) {
    String[] resultado = new String[2];

    // Encuentra la posición de la primera comilla doble
    int indiceComilla = cadena.indexOf("\"");

    // Verifica si se encontró una comilla doble
    if (indiceComilla != -1) {
        // Divide la cadena en dos partes
        resultado[0] = cadena.substring(0, indiceComilla);
        resultado[1] = cadena.substring(indiceComilla);
    } else {
        // Si no se encontró una comilla doble, asigna la cadena completa a la primera parte
        resultado[0] = cadena;
        resultado[1] = "";
    }

    return resultado;
}

    public static float calcularMaximo(float[] numeros) {
        float maximo = Integer.MIN_VALUE;

        for (float numero : numeros) {
            if (numero > maximo) {
                maximo = numero;
            }
        }

        return maximo;
    }
private static int[] convertirDoubleAInt(double[] arregloDouble) {
        int[] arregloInt = new int[arregloDouble.length];

        for (int i = 0; i < arregloDouble.length; i++) {
            // Convertir cada elemento de double a int
            arregloInt[i] = (int) arregloDouble[i];
        }

        return arregloInt;
    }
    public static float calcularMinimo(float[] numeros) {
        float minimo = Integer.MAX_VALUE;

        for (float numero : numeros) {
            if (numero < minimo) {
                minimo = numero;
            }
        }

        return minimo;
    }

    
      public static double calcularVarianza(float[] numeros) {
        // Calcular la media
        double media = calcularMedia(numeros);

        // Calcular la suma de los cuadrados de las diferencias entre cada número y la media
        double sumaCuadradosDiferencias = 0;

        for (float numero : numeros) {
            double diferencia = numero - media;
            sumaCuadradosDiferencias += diferencia * diferencia;
        }

        // Calcular la varianza dividiendo la suma de los cuadrados por la cantidad de elementos
        double varianza = sumaCuadradosDiferencias / numeros.length;

        return varianza;
    }

     public static double calcularMedia(float[] numeros) {
        float suma = 0;

        for (float numero : numeros) {
            suma += numero;
        }

        return (double) suma / numeros.length;
    }

     public static double calcularModa(float[] numeros) {
    // Utilizamos un mapa para almacenar la frecuencia de cada número
    Map<Float, Integer> frecuenciaMapa = new HashMap<>();

    // Calcular la frecuencia de cada número
    for (float numero : numeros) {
        frecuenciaMapa.put(numero, frecuenciaMapa.getOrDefault(numero, 0) + 1);
    }

    // Encontrar el número con la frecuencia máxima
    double moda = 0;
    int frecuenciaMaxima = 0;

    for (Map.Entry<Float, Integer> entry : frecuenciaMapa.entrySet()) {
        float numero = entry.getKey();
        int frecuencia = entry.getValue();

        if (frecuencia > frecuenciaMaxima) {
            moda = numero;
            frecuenciaMaxima = frecuencia;
        }
    }

    return moda;
}
    
    public static float[] convertirCadenaAArray(String numerosString) {
    String[] numerosStringArray = numerosString.split(",");
    float[] numeros = new float[numerosStringArray.length];

    for (int i = 0; i < numerosStringArray.length; i++) {
        numeros[i] = Float.parseFloat(numerosStringArray[i]);
    }

    return numeros;
}
public static double[] convertirStringADoubleArray(String cadena) {
    // Divide la cadena por comas y convierte cada elemento a double
    String[] numerosString = cadena.split(",");
    double[] numeros = new double[numerosString.length];

    for (int i = 0; i < numerosString.length; i++) {
        numeros[i] = Double.parseDouble(numerosString[i]);
    }

    return numeros;
}

   public static double calcularMediana(float[] numeros) {
    int n = numeros.length;
    if (n % 2 == 0) {
        // Si hay un número par de elementos, promediar los dos valores centrales
        int indice1 = n / 2 - 1;
        int indice2 = n / 2;
        return (numeros[indice1] + numeros[indice2]) / 2.0;
    } else {
        // Si hay un número impar de elementos, devolver el valor central
        int indiceCentral = n / 2;
        return numeros[indiceCentral];
    }
}

    
    public static String arregloTemporal="";
    public static String arregloNumeros="";

    public static String tituloGG="";
    public static String ejexGG="";
    public static String ejeyGG="";
    public static String tituloxGG="";
    public static String tituloyGG="";
    public static String labelGG="";
    public static String valuesGG="";
   
    public static String obtenerValor(LinkedList<ts> lista, String nombreBuscado) {
        for (ts item : lista) {
            System.out.println("Buscando: "+nombreBuscado+"      Iterando: "+item.getNombre() );
            if (item.getNombre().equals(nombreBuscado)) {
                System.out.println("Econtro: "+item.getNombre() );
                System.out.println("Con valor "+item.getValor());
                return item.getValor();
            }
        }
        return null; // Retorna null si no se encuentra el nodo
    }





    public void syntax_error(Symbol s)
    {
        //System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
        Error_ nuevoError = new Error_(s.left,s.right,"No se esperaba el siguiente token: "+s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
        Error_ nuevoError = new Error_(s.left,s.right,"No se esperaba el siguiente token: "+s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizador_sintactico$actions {
  private final analizador_sintactico parser;

  /** Constructor */
  CUP$analizador_sintactico$actions(analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action_part00000000(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador_sintactico$parser.done_parsing();
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= cod 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= cod codigo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod ::= primitivas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod ::= arreglos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod ::= print 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod ::= graficas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO 
            {
              Object RESULT =null;
		RESULT="CHAR[]";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		RESULT="DOUBLE";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dospuntos ::= DOS_PUNTOS DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("dospuntos",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenidoVariable ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=n.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoVariable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenidoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenidoVariable ::= aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=a.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenidoVariable ::= estadisticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=e.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cont ::= listaValores 
            {
              Object RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=lv;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cont",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cont ::= IDE 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) ide);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cont",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaValores ::= CORCHETE_IZQUIERDO cuerpoLista CORCHETE_DERECHO 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		arregloNumeros=arregloTemporal;
                System.out.println(" arrS:"+arregloTemporal+" arrN:"+arregloNumeros);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpoLista ::= STRING COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpoLista ::= NUMEROS COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpoLista ::= ID COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoLista ::= aritmeticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoLista ::= estadisticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoLista ::= STRING 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoLista ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoLista ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpoLista ::= aritmeticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpoLista ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitivas ::= RESERVADA_VAR DOS_PUNTOS tipo dospuntos ID MENOR_QUE GUION contenidoVariable RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                ts news = new ts(id.toString(),c.toString(),"Variable tipo "+t.toString(),cleft,cright);
                gui.listaSimbolos.add(news);
                
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // arreglos ::= RESERVADA_ARRAY DOS_PUNTOS tipo dospuntos IDE MENOR_QUE GUION cont RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                //arregloTemporal="["+arregloTemporal+"]";
                //arregloNumeros=arregloTemporal;
                ts news = new ts(ide.toString(),arregloTemporal,"Array tipo "+t.toString(),lvleft,lvright);
                gui.listaSimbolos.add(news);
                arregloTemporal="";       
            
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("arreglos",4, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aritmeticas ::= suma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aritmeticas ::= resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritmeticas ::= multiplicacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // aritmeticas ::= division 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // aritmeticas ::= modulo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // suma ::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n");
  RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // resta ::= RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n");
    RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // multiplicacion ::= RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
  RESULT=r;  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // division ::= RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // modulo ::= RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("modulo",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoAnidada ::= RESERVADA_SUMA 
            {
              Object RESULT =null;
		RESULT="suma";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoAnidada ::= RESERVADA_RESTA 
            {
              Object RESULT =null;
		RESULT="resta";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoAnidada ::= RESERVADA_MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="multiplicacion";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tipoAnidada ::= RESERVADA_DIVISION 
            {
              Object RESULT =null;
		RESULT="division";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tipoAnidada ::= RESERVADA_MODULO 
            {
              Object RESULT =null;
		RESULT="modulo";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valorAritmetico ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT= c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorAritmetico ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valorAritmetico ::= anidacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valorAritmetico ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // anidacion ::= tipoAnidada PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("anidacion",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estadisticas ::= media 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estadisticas ::= mediana 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estadisticas ::= moda 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estadisticas ::= varianza 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // estadisticas ::= max 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // estadisticas ::= min 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenidoE ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenidoE ::= IDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // media ::= RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
       
        if(arregloTemporal.length()==0){
            float[] numeros=convertirCadenaAArray(c.toString());
            double media =calcularMedia(numeros);
            RESULT=media;
        }else{
            float[] numeros=convertirCadenaAArray(arregloTemporal);
            double media =calcularMedia(numeros);
            RESULT=media;
            arregloTemporal="";
            arregloNumeros="";
        }
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("media",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mediana ::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
        } else {
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("mediana",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // moda ::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
 
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            double moda = calcularModa(numeros);
            RESULT=moda;
        } else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            double moda = calcularModa(numeros);
            RESULT=moda;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("moda",16, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // varianza ::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
    
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            double varianza = calcularVarianza(numeros);
            RESULT=varianza;
        } else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            double varianza = calcularVarianza(numeros);
            RESULT=varianza;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("varianza",17, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // max ::= RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		

        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            float maximo = calcularMaximo(numeros);
            RESULT=maximo;
        }else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            float maximo = calcularMaximo(numeros);
            RESULT=maximo;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // min ::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            float minimo = calcularMinimo(numeros);
            RESULT=minimo;
        }else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            float minimo = calcularMinimo(numeros);
            RESULT=minimo;
            arregloTemporal="";
            arregloNumeros="";
        }      

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("min",19, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // print ::= RESERVADA_CONSOLE DOS_PUNTOS DOS_PUNTOS desicionprint 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print",5, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // desicionprint ::= print1 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // desicionprint ::= print2 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // print1 ::= RESERVADA_PRINT SIGNO_IGUAL valorPrint RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 
        
String cuer = s.toString().replace("\"", "");
        System.out.println("\n"+"Print desde el cup de la cadena: " + cuer+"\n");
        gui.listaPrint.add(cuer);
    
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print1",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valorPrint ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valorPrint ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valorPrint ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valorPrint ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valorPrint ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valorPrint ::= combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // combinado ::= combinacion combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + cc.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // combinado ::= combinacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // combinado ::= combinacion comb 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + r.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // combinacion ::= STRING COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = s.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // combinacion ::= NUMEROS COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = n.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // combinacion ::= aritmeticas COMA 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = ar.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // combinacion ::= estadisticas COMA 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = st.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // combinacion ::= ID COMA 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd)+",";  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comb ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comb ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comb ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comb ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comb ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // print2 ::= RESERVADA_COLUMN SIGNO_IGUAL pp GUION MAYOR_QUE ppp RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        String cuerpo;
        if(c==null){
            if (arregloTemporal.startsWith("\"")) {         //Char
               cuerpo = arregloTemporal.replaceAll("[\",]", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =arregloTemporal.replaceAll(",", "\n");
            }
        }else{
            if (c.toString().startsWith("\"")) {         //Char
               cuerpo = c.toString().replaceAll("\"", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =c.toString().replaceAll(",", "\n");
            }
        }
        int longitud = t.toString().length();
        String lin = "=".repeat(longitud);

        String tit = t.toString().replace("\"", "");
        cuerpo=lin+"\n"+tit+"\n"+lin+"\n"+cuerpo;
        System.out.println("\n"+"Print desde el cup de la cadena: " + cuerpo+"\n");
        gui.listaPrint.add((String) cuerpo); 
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print2",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pp ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pp ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ppp ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ppp ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // graficas ::= pie 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // graficas ::= barras 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // graficas ::= linea 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // graficas ::= histograma 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias ::= ejexG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencias ::= ejeyG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencias ::= tituloxG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencias ::= tituloyG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencias2 ::= labelG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",44, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias2 ::= valuesG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",44, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias2 ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",44, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentencias3 ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias3",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentencias3 ::= valuesG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias3",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tituloG ::= RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          tituloGG=t.toString();
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloG",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ejexG ::= RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        if(ex==null){
        ejexGG=arregloTemporal;
        } else{
        ejexGG=ex.toString();
        }
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejexG",46, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ejeyG ::= RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        if(ey==null){
        ejeyGG=arregloTemporal;
        } else{
        ejeyGG=ey.toString();
        }
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejeyG",47, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tituloxG ::= RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
           tituloxGG=x.toString();
           
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloxG",48, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tituloyG ::= RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
           tituloyGG=y.toString();
            
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloyG",49, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // labelG ::= RESRVADA_LABEL_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          if(ex==null){
             labelGG=arregloTemporal;
          } else{
             labelGG=ex.toString();
          }
          arregloTemporal="";
          arregloNumeros="";
         
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("labelG",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valuesG ::= RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS tipo SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          if(ey==null){
             valuesGG=arregloTemporal;
          } else{
             valuesGG=ey.toString();
          }
          arregloTemporal="";
          arregloNumeros="";
          
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valuesG",52, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // barras ::= RESERVADA_GRAFICA_BARRA PARENTESIS_IZQUIERDO sentencias sentencias sentencias sentencias sentencias RESERVADA_EXEC RESERVADA_GRAFICA_BARRA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        String[] categorias = ejexGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(ejeyGG);
        
        ImageCreator.createBarChartImage(categorias,valores,tituloGG,tituloxGG,tituloyGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        ejexGG="";
        ejeyGG="";
        tituloxGG="";
        tituloyGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("barras",40, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pie ::= RESERVADA_GRAFICA_PIE PARENTESIS_IZQUIERDO sentencias2 sentencias2 sentencias2 RESERVADA_EXEC RESERVADA_GRAFICA_PIE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        String[] categorias = labelGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(valuesGG);

        ImageCreator.createPieChartImage(categorias,valores,tituloGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        valuesGG="";
        labelGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pie",39, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // linea ::= RESERVADA_GRAFICA_LINE PARENTESIS_IZQUIERDO sentencias sentencias sentencias sentencias sentencias RESERVADA_EXEC RESERVADA_GRAFICA_LINE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		

        String[] categorias = ejexGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(ejeyGG);
        
        ImageCreator.createLineChartImage(categorias,valores,tituloGG,tituloxGG,tituloyGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        ejexGG="";
        ejeyGG="";
        tituloxGG="";
        tituloyGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("linea",41, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // histograma ::= RESERVADA_GRAFIA_HISTOGRAMA PARENTESIS_IZQUIERDO sentencias3 sentencias3 RESERVADA_EXEC RESERVADA_GRAFIA_HISTOGRAMA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  
         double[] valores;
         System.out.println(valuesGG);
         valores = convertirStringADoubleArray(valuesGG);
  
         int[] arregloInt = new int[valores.length];

         for (int i = 0; i < valores.length; i++) {
            String valorComoCadena = Double.toString(valores[i]).replace(".", "");
            arregloInt[i] = Integer.parseInt(valorComoCadena);
        }
        
        ImageCreator.createHistogramImage(arregloInt,tituloGG);
        String tit = tituloGG.replace("\"", "");
        String r="\n                                "+tit+"\n";
        r=r+"============================================="+"\n";
        r=r+"Valor                  Fb                      Fa                      Fr"+"\n";
        r=r+"============================================="+"\n";
        double[] sinR = obtenerArregloSinRepetidos(valores);
        int[] frec = obtenerFrecuencia(valores);
        //int[] arreg = convertirDoubleAInt(valores);
        int[] frecA = obtenerFrecuenciaAcumulada(frec);
        double[] frecR = obtenerFrecuenciaRelativa(frec, valores.length);
        r =r+concatenarArreglos(sinR, frec, frecA, frecR);
        int up = frecA.length - 1;
        int upp = frecA[up];
        r=r+"============================================="+"\n";
        r=r+"Totales              "+upp+"                       "+upp+"                         100%"+"\n";
        r=r+"============================================="+"\n";

        System.out.println("\n"+"Print desde el cup de la cadena: " + r+"\n");
        gui.listaPrint.add((String) r); 

        arregloTemporal="";
        arregloNumeros="";
        valuesGG="";
        tituloGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("histograma",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizador_sintactico$do_action_part00000000(
                               CUP$analizador_sintactico$act_num,
                               CUP$analizador_sintactico$parser,
                               CUP$analizador_sintactico$stack,
                               CUP$analizador_sintactico$top);
    }
}

}
