
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.Arrays;
import java.util.LinkedList;
import java_cup.runtime.*;
import Errores.Error_;
import GUI.gui;
import DB.ts;
import java.util.HashMap;
import java.util.Map;
import DB.ImageCreator;
import java.util.HashSet;
import java.util.Set;
import java.io.File;
import java.io.IOException;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.plot.PlotOrientation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\017\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\005\014\000\002\006" +
    "\014\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\027\010\000" +
    "\002\030\010\000\002\031\010\000\002\032\010\000\002" +
    "\033\010\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\010\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\026\003\000\002\026\003\000\002\020\006" +
    "\000\002\021\006\000\002\022\006\000\002\023\006\000" +
    "\002\024\006\000\002\025\006\000\002\007\006\000\002" +
    "\037\003\000\002\037\003\000\002\040\007\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\004\000" +
    "\002\042\003\000\002\042\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\045\012\000" +
    "\002\046\003\000\002\046\003\000\002\047\003\000\002" +
    "\047\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\051\073\000\002\050\047" +
    "\000\002\052\073\000\002\053\037" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\021\004\001\002\000\020\023\012\026" +
    "\015\042\013\045\011\046\022\047\007\050\024\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\004\014\u013d\001\002\000\022\022\ufffb\023\ufffb\026\ufffb" +
    "\042\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000" +
    "\004\014\u0105\001\002\000\004\005\367\001\002\000\004" +
    "\005\316\001\002\000\022\022\ufffd\023\ufffd\026\ufffd\042" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002\000\004" +
    "\005\277\001\002\000\022\022\uffa6\023\uffa6\026\uffa6\042" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002\000\022" +
    "\022\uffff\023\012\026\015\042\013\045\011\046\022\047" +
    "\007\050\024\001\002\000\022\022\uffa3\023\uffa3\026\uffa3" +
    "\042\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002\000" +
    "\022\022\ufffc\023\ufffc\026\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\001\002\000\004\014\232\001\002\000" +
    "\022\022\ufffa\023\ufffa\026\ufffa\042\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\001\002\000\004\014\032\001\002\000" +
    "\022\022\uffa4\023\uffa4\026\uffa4\042\uffa4\045\uffa4\046\uffa4" +
    "\047\uffa4\050\uffa4\001\002\000\004\022\030\001\002\000" +
    "\022\022\uffa5\023\uffa5\026\uffa5\042\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\001\002\000\004\021\031\001\002\000" +
    "\004\002\000\001\002\000\004\051\033\001\002\000\004" +
    "\005\034\001\002\000\004\005\035\001\002\000\004\025" +
    "\036\001\002\000\004\016\037\001\002\000\004\017\040" +
    "\001\002\000\004\020\041\001\002\000\004\061\042\001" +
    "\002\000\004\022\043\001\002\000\004\013\044\001\002" +
    "\000\004\056\045\001\002\000\004\005\046\001\002\000" +
    "\004\005\047\001\002\000\004\025\050\001\002\000\004" +
    "\016\051\001\002\000\004\017\052\001\002\000\004\020" +
    "\053\001\002\000\006\016\056\063\055\001\002\000\004" +
    "\022\221\001\002\000\006\015\uffc9\022\uffc9\001\002\000" +
    "\036\004\071\027\113\030\075\031\060\032\103\033\067" +
    "\034\066\035\107\036\104\037\064\040\074\041\070\061" +
    "\077\062\100\001\002\000\006\015\uffca\022\uffca\001\002" +
    "\000\004\014\214\001\002\000\006\012\212\017\uffe8\001" +
    "\002\000\012\012\uffcf\015\uffcf\017\uffcf\022\uffcf\001\002" +
    "\000\012\012\uffcd\015\uffcd\017\uffcd\022\uffcd\001\002\000" +
    "\004\014\207\001\002\000\012\012\uffd0\015\uffd0\017\uffd0" +
    "\022\uffd0\001\002\000\004\014\204\001\002\000\004\014" +
    "\177\001\002\000\004\014\174\001\002\000\006\012\172" +
    "\017\uffe9\001\002\000\010\012\uffe2\017\uffe2\022\uffe2\001" +
    "\002\000\010\012\uffe3\017\uffe3\022\uffe3\001\002\000\004" +
    "\014\167\001\002\000\004\014\162\001\002\000\004\017" +
    "\161\001\002\000\006\012\157\017\uffeb\001\002\000\006" +
    "\012\155\017\uffea\001\002\000\010\012\uffe1\017\uffe1\022" +
    "\uffe1\001\002\000\012\012\uffce\015\uffce\017\uffce\022\uffce" +
    "\001\002\000\004\014\150\001\002\000\004\014\145\001" +
    "\002\000\012\012\uffcb\015\uffcb\017\uffcb\022\uffcb\001\002" +
    "\000\012\012\uffcc\015\uffcc\017\uffcc\022\uffcc\001\002\000" +
    "\004\014\142\001\002\000\006\012\140\017\uffe7\001\002" +
    "\000\010\012\uffe0\017\uffe0\022\uffe0\001\002\000\010\012" +
    "\uffe4\017\uffe4\022\uffe4\001\002\000\004\014\114\001\002" +
    "\000\034\004\121\027\127\030\122\031\115\032\125\033" +
    "\117\034\066\035\107\036\104\037\064\040\074\041\070" +
    "\062\123\001\002\000\004\014\uffd8\001\002\000\006\012" +
    "\uffd3\015\uffd3\001\002\000\004\014\uffd6\001\002\000\004" +
    "\012\135\001\002\000\006\012\uffd4\015\uffd4\001\002\000" +
    "\004\014\uffd9\001\002\000\006\012\uffd5\015\uffd5\001\002" +
    "\000\004\014\130\001\002\000\004\014\uffd7\001\002\000" +
    "\006\012\uffd2\015\uffd2\001\002\000\004\014\uffda\001\002" +
    "\000\034\004\121\027\127\030\122\031\115\032\125\033" +
    "\117\034\066\035\107\036\104\037\064\040\074\041\070" +
    "\062\123\001\002\000\004\012\132\001\002\000\034\004" +
    "\121\027\127\030\122\031\115\032\125\033\117\034\066" +
    "\035\107\036\104\037\064\040\074\041\070\062\123\001" +
    "\002\000\004\015\134\001\002\000\006\012\uffd1\015\uffd1" +
    "\001\002\000\034\004\121\027\127\030\122\031\115\032" +
    "\125\033\117\034\066\035\107\036\104\037\064\040\074" +
    "\041\070\062\123\001\002\000\004\015\137\001\002\000" +
    "\010\012\uffdf\017\uffdf\022\uffdf\001\002\000\036\004\071" +
    "\027\113\030\075\031\060\032\103\033\067\034\066\035" +
    "\107\036\104\037\064\040\074\041\070\061\077\062\100" +
    "\001\002\000\004\017\uffec\001\002\000\006\016\056\063" +
    "\055\001\002\000\004\015\144\001\002\000\012\012\uffc7" +
    "\015\uffc7\017\uffc7\022\uffc7\001\002\000\006\016\056\063" +
    "\055\001\002\000\004\015\147\001\002\000\012\012\uffc6" +
    "\015\uffc6\017\uffc6\022\uffc6\001\002\000\034\004\121\027" +
    "\127\030\122\031\115\032\125\033\117\034\066\035\107" +
    "\036\104\037\064\040\074\041\070\062\123\001\002\000" +
    "\004\012\152\001\002\000\034\004\121\027\127\030\122" +
    "\031\115\032\125\033\117\034\066\035\107\036\104\037" +
    "\064\040\074\041\070\062\123\001\002\000\004\015\154" +
    "\001\002\000\010\012\uffdc\017\uffdc\022\uffdc\001\002\000" +
    "\036\004\071\027\113\030\075\031\060\032\103\033\067" +
    "\034\066\035\107\036\104\037\064\040\074\041\070\061" +
    "\077\062\100\001\002\000\004\017\uffef\001\002\000\036" +
    "\004\071\027\113\030\075\031\060\032\103\033\067\034" +
    "\066\035\107\036\104\037\064\040\074\041\070\061\077" +
    "\062\100\001\002\000\004\017\ufff0\001\002\000\006\015" +
    "\ufff1\022\ufff1\001\002\000\034\004\121\027\127\030\122" +
    "\031\115\032\125\033\117\034\066\035\107\036\104\037" +
    "\064\040\074\041\070\062\123\001\002\000\004\012\164" +
    "\001\002\000\034\004\121\027\127\030\122\031\115\032" +
    "\125\033\117\034\066\035\107\036\104\037\064\040\074" +
    "\041\070\062\123\001\002\000\004\015\166\001\002\000" +
    "\010\012\uffde\017\uffde\022\uffde\001\002\000\006\016\056" +
    "\063\055\001\002\000\004\015\171\001\002\000\012\012" +
    "\uffc4\015\uffc4\017\uffc4\022\uffc4\001\002\000\036\004\071" +
    "\027\113\030\075\031\060\032\103\033\067\034\066\035" +
    "\107\036\104\037\064\040\074\041\070\061\077\062\100" +
    "\001\002\000\004\017\uffee\001\002\000\006\016\056\063" +
    "\055\001\002\000\004\015\176\001\002\000\012\012\uffc3" +
    "\015\uffc3\017\uffc3\022\uffc3\001\002\000\034\004\121\027" +
    "\127\030\122\031\115\032\125\033\117\034\066\035\107" +
    "\036\104\037\064\040\074\041\070\062\123\001\002\000" +
    "\004\012\201\001\002\000\034\004\121\027\127\030\122" +
    "\031\115\032\125\033\117\034\066\035\107\036\104\037" +
    "\064\040\074\041\070\062\123\001\002\000\004\015\203" +
    "\001\002\000\010\012\uffdb\017\uffdb\022\uffdb\001\002\000" +
    "\006\016\056\063\055\001\002\000\004\015\206\001\002" +
    "\000\012\012\uffc8\015\uffc8\017\uffc8\022\uffc8\001\002\000" +
    "\006\016\056\063\055\001\002\000\004\015\211\001\002" +
    "\000\012\012\uffc5\015\uffc5\017\uffc5\022\uffc5\001\002\000" +
    "\036\004\071\027\113\030\075\031\060\032\103\033\067" +
    "\034\066\035\107\036\104\037\064\040\074\041\070\061" +
    "\077\062\100\001\002\000\004\017\uffed\001\002\000\034" +
    "\004\121\027\127\030\122\031\115\032\125\033\117\034" +
    "\066\035\107\036\104\037\064\040\074\041\070\062\123" +
    "\001\002\000\004\012\216\001\002\000\034\004\121\027" +
    "\127\030\122\031\115\032\125\033\117\034\066\035\107" +
    "\036\104\037\064\040\074\041\070\062\123\001\002\000" +
    "\004\015\220\001\002\000\010\012\uffdd\017\uffdd\022\uffdd" +
    "\001\002\000\004\013\222\001\002\000\004\060\223\001" +
    "\002\000\004\050\224\001\002\000\004\022\225\001\002" +
    "\000\004\013\226\001\002\000\004\015\227\001\002\000" +
    "\004\022\230\001\002\000\004\013\231\001\002\000\022" +
    "\022\uff9f\023\uff9f\026\uff9f\042\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\001\002\000\004\057\233\001\002\000\004" +
    "\005\234\001\002\000\004\005\235\001\002\000\004\025" +
    "\236\001\002\000\004\016\237\001\002\000\004\017\240" +
    "\001\002\000\004\020\241\001\002\000\006\016\056\063" +
    "\055\001\002\000\004\022\243\001\002\000\004\013\244" +
    "\001\002\000\004\056\245\001\002\000\004\005\246\001" +
    "\002\000\004\005\247\001\002\000\004\024\250\001\002" +
    "\000\004\020\251\001\002\000\006\016\056\063\055\001" +
    "\002\000\004\022\253\001\002\000\004\013\254\001\002" +
    "\000\004\051\255\001\002\000\004\005\256\001\002\000" +
    "\004\005\257\001\002\000\004\025\260\001\002\000\004" +
    "\016\261\001\002\000\004\017\262\001\002\000\004\020" +
    "\263\001\002\000\004\061\264\001\002\000\004\022\265" +
    "\001\002\000\004\013\266\001\002\000\004\060\267\001" +
    "\002\000\004\065\270\001\002\000\004\022\271\001\002" +
    "\000\004\013\272\001\002\000\004\015\273\001\002\000" +
    "\004\022\274\001\002\000\004\013\275\001\002\000\022" +
    "\022\uffa1\023\uffa1\026\uffa1\042\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\050\uffa1\001\002\000\004\022\ufffe\001\002\000\006" +
    "\024\302\025\301\001\002\000\004\005\306\001\002\000" +
    "\004\016\303\001\002\000\004\005\ufff8\001\002\000\004" +
    "\017\304\001\002\000\004\005\ufff9\001\002\000\004\063" +
    "\310\001\002\000\004\005\307\001\002\000\006\004\ufff7" +
    "\063\ufff7\001\002\000\004\006\311\001\002\000\004\010" +
    "\312\001\002\000\004\016\056\001\002\000\004\022\314" +
    "\001\002\000\004\013\315\001\002\000\022\022\uffe5\023" +
    "\uffe5\026\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\001\002\000\004\005\317\001\002\000\006\043\321\044" +
    "\324\001\002\000\022\022\uffc0\023\uffc0\026\uffc0\042\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\004\020" +
    "\340\001\002\000\022\022\uffc1\023\uffc1\026\uffc1\042\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\022\022" +
    "\uffc2\023\uffc2\026\uffc2\042\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\050\uffc2\001\002\000\004\020\325\001\002\000\006\004" +
    "\326\061\330\001\002\000\004\010\uffa9\001\002\000\004" +
    "\010\331\001\002\000\004\010\uffaa\001\002\000\004\007" +
    "\332\001\002\000\006\016\056\063\334\001\002\000\004" +
    "\022\336\001\002\000\004\022\uffa8\001\002\000\004\022" +
    "\uffa7\001\002\000\004\013\337\001\002\000\022\022\uffab" +
    "\023\uffab\026\uffab\042\uffab\045\uffab\046\uffab\047\uffab\050" +
    "\uffab\001\002\000\036\004\343\027\113\030\075\031\060" +
    "\032\103\033\067\034\066\035\107\036\104\037\064\040" +
    "\074\041\070\061\345\062\346\001\002\000\004\022\365" +
    "\001\002\000\006\012\364\022\uffbb\001\002\000\006\012" +
    "\363\022\uffbc\001\002\000\004\022\uffb9\001\002\000\006" +
    "\012\362\022\uffbe\001\002\000\006\012\361\022\uffbd\001" +
    "\002\000\040\004\354\022\uffb7\027\113\030\075\031\060" +
    "\032\103\033\067\034\066\035\107\036\104\037\064\040" +
    "\074\041\070\061\356\062\357\001\002\000\006\012\351" +
    "\022\uffba\001\002\000\040\004\uffb2\022\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\061\uffb2\062\uffb2\001\002\000" +
    "\004\022\uffb6\001\002\000\006\012\364\022\uffae\001\002" +
    "\000\006\012\363\022\uffaf\001\002\000\004\022\uffb8\001" +
    "\002\000\006\012\362\022\uffb0\001\002\000\006\012\361" +
    "\022\uffac\001\002\000\006\012\351\022\uffad\001\002\000" +
    "\040\004\uffb4\022\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\061\uffb4\062\uffb4\001\002\000\040\004\uffb5\022\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\037\uffb5\040\uffb5\041\uffb5\061\uffb5\062\uffb5" +
    "\001\002\000\040\004\uffb1\022\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\061\uffb1\062\uffb1\001\002\000\040\004" +
    "\uffb3\022\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\061" +
    "\uffb3\062\uffb3\001\002\000\004\013\366\001\002\000\022" +
    "\022\uffbf\023\uffbf\026\uffbf\042\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\001\002\000\006\024\302\025\301\001\002" +
    "\000\004\005\306\001\002\000\004\004\372\001\002\000" +
    "\004\006\373\001\002\000\004\010\374\001\002\000\036" +
    "\004\376\027\113\030\075\031\060\032\103\033\067\034" +
    "\066\035\107\036\104\037\064\040\074\041\070\061\377" +
    "\062\u0100\001\002\000\004\022\ufff3\001\002\000\004\022" +
    "\ufff5\001\002\000\004\022\ufff4\001\002\000\004\022\ufff6" +
    "\001\002\000\004\022\u0103\001\002\000\004\022\ufff2\001" +
    "\002\000\004\013\u0104\001\002\000\022\022\uffe6\023\uffe6" +
    "\026\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\001" +
    "\002\000\004\051\u0106\001\002\000\004\005\u0107\001\002" +
    "\000\004\005\u0108\001\002\000\004\025\u0109\001\002\000" +
    "\004\016\u010a\001\002\000\004\017\u010b\001\002\000\004" +
    "\020\u010c\001\002\000\004\061\u010d\001\002\000\004\022" +
    "\u010e\001\002\000\004\013\u010f\001\002\000\004\052\u0110" +
    "\001\002\000\004\005\u0111\001\002\000\004\005\u0112\001" +
    "\002\000\004\025\u0113\001\002\000\004\016\u0114\001\002" +
    "\000\004\017\u0115\001\002\000\004\020\u0116\001\002\000" +
    "\006\016\056\063\055\001\002\000\004\022\u0118\001\002" +
    "\000\004\013\u0119\001\002\000\004\053\u011a\001\002\000" +
    "\004\005\u011b\001\002\000\004\005\u011c\001\002\000\004" +
    "\024\u011d\001\002\000\004\020\u011e\001\002\000\006\016" +
    "\056\063\055\001\002\000\004\022\u0120\001\002\000\004" +
    "\013\u0121\001\002\000\004\054\u0122\001\002\000\004\005" +
    "\u0123\001\002\000\004\005\u0124\001\002\000\004\025\u0125" +
    "\001\002\000\004\016\u0126\001\002\000\004\017\u0127\001" +
    "\002\000\004\020\u0128\001\002\000\004\061\u0129\001\002" +
    "\000\004\022\u012a\001\002\000\004\013\u012b\001\002\000" +
    "\004\055\u012c\001\002\000\004\005\u012d\001\002\000\004" +
    "\005\u012e\001\002\000\004\025\u012f\001\002\000\004\016" +
    "\u0130\001\002\000\004\017\u0131\001\002\000\004\020\u0132" +
    "\001\002\000\004\061\u0133\001\002\000\004\022\u0134\001" +
    "\002\000\004\013\u0135\001\002\000\004\060\u0136\001\002" +
    "\000\004\066\u0137\001\002\000\004\022\u0138\001\002\000" +
    "\004\013\u0139\001\002\000\004\015\u013a\001\002\000\004" +
    "\022\u013b\001\002\000\004\013\u013c\001\002\000\022\022" +
    "\uffa2\023\uffa2\026\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\001\002\000\004\051\u013e\001\002\000\004\005" +
    "\u013f\001\002\000\004\005\u0140\001\002\000\004\025\u0141" +
    "\001\002\000\004\016\u0142\001\002\000\004\017\u0143\001" +
    "\002\000\004\020\u0144\001\002\000\004\061\u0145\001\002" +
    "\000\004\022\u0146\001\002\000\004\013\u0147\001\002\000" +
    "\004\052\u0148\001\002\000\004\005\u0149\001\002\000\004" +
    "\005\u014a\001\002\000\004\025\u014b\001\002\000\004\016" +
    "\u014c\001\002\000\004\017\u014d\001\002\000\004\020\u014e" +
    "\001\002\000\006\016\056\063\055\001\002\000\004\022" +
    "\u0150\001\002\000\004\013\u0151\001\002\000\004\053\u0152" +
    "\001\002\000\004\005\u0153\001\002\000\004\005\u0154\001" +
    "\002\000\004\024\u0155\001\002\000\004\020\u0156\001\002" +
    "\000\006\016\056\063\055\001\002\000\004\022\u0158\001" +
    "\002\000\004\013\u0159\001\002\000\004\054\u015a\001\002" +
    "\000\004\005\u015b\001\002\000\004\005\u015c\001\002\000" +
    "\004\025\u015d\001\002\000\004\016\u015e\001\002\000\004" +
    "\017\u015f\001\002\000\004\020\u0160\001\002\000\004\061" +
    "\u0161\001\002\000\004\022\u0162\001\002\000\004\013\u0163" +
    "\001\002\000\004\055\u0164\001\002\000\004\005\u0165\001" +
    "\002\000\004\005\u0166\001\002\000\004\025\u0167\001\002" +
    "\000\004\016\u0168\001\002\000\004\017\u0169\001\002\000" +
    "\004\020\u016a\001\002\000\004\061\u016b\001\002\000\004" +
    "\022\u016c\001\002\000\004\013\u016d\001\002\000\004\060" +
    "\u016e\001\002\000\004\064\u016f\001\002\000\004\022\u0170" +
    "\001\002\000\004\013\u0171\001\002\000\004\015\u0172\001" +
    "\002\000\004\022\u0173\001\002\000\004\013\u0174\001\002" +
    "\000\022\022\uffa0\023\uffa0\026\uffa0\042\uffa0\045\uffa0\046" +
    "\uffa0\047\uffa0\050\uffa0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\002\004\001\001\000\026\003\025\004" +
    "\016\005\013\006\020\007\007\010\022\050\015\051\026" +
    "\052\024\053\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\275\004\016" +
    "\005\013\006\020\007\007\010\022\050\015\051\026\052" +
    "\024\053\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\056" +
    "\026\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\014\060\015\107\016\075\020\064\021\061\022\101" +
    "\023\062\024\105\025\104\027\111\030\072\031\071\032" +
    "\100\033\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\015\125\020\064\021\061\022" +
    "\101\023\062\024\105\025\104\034\117\035\123\036\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\125\020\064" +
    "\021\061\022\101\023\062\024\105\025\104\034\130\035" +
    "\123\036\115\001\001\000\002\001\001\000\026\015\125" +
    "\020\064\021\061\022\101\023\062\024\105\025\104\034" +
    "\132\035\123\036\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\125\020\064\021\061\022\101\023" +
    "\062\024\105\025\104\034\135\035\123\036\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\014\060\015" +
    "\107\016\140\020\064\021\061\022\101\023\062\024\105" +
    "\025\104\027\111\030\072\031\071\032\100\033\110\001" +
    "\001\000\002\001\001\000\006\017\056\026\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\056\026" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\125\020\064\021\061\022\101\023\062\024\105\025" +
    "\104\034\150\035\123\036\115\001\001\000\002\001\001" +
    "\000\026\015\125\020\064\021\061\022\101\023\062\024" +
    "\105\025\104\034\152\035\123\036\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\014\060\015\107\016" +
    "\155\020\064\021\061\022\101\023\062\024\105\025\104" +
    "\027\111\030\072\031\071\032\100\033\110\001\001\000" +
    "\002\001\001\000\036\014\060\015\107\016\157\020\064" +
    "\021\061\022\101\023\062\024\105\025\104\027\111\030" +
    "\072\031\071\032\100\033\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\015\125\020\064\021\061\022" +
    "\101\023\062\024\105\025\104\034\162\035\123\036\115" +
    "\001\001\000\002\001\001\000\026\015\125\020\064\021" +
    "\061\022\101\023\062\024\105\025\104\034\164\035\123" +
    "\036\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\056\026\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\014\060\015\107\016\172\020\064\021" +
    "\061\022\101\023\062\024\105\025\104\027\111\030\072" +
    "\031\071\032\100\033\110\001\001\000\002\001\001\000" +
    "\006\017\056\026\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\125\020\064\021\061\022\101\023" +
    "\062\024\105\025\104\034\177\035\123\036\115\001\001" +
    "\000\002\001\001\000\026\015\125\020\064\021\061\022" +
    "\101\023\062\024\105\025\104\034\201\035\123\036\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\056\026\204\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\056\026\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\014\060\015\107\016\212\020\064" +
    "\021\061\022\101\023\062\024\105\025\104\027\111\030" +
    "\072\031\071\032\100\033\110\001\001\000\002\001\001" +
    "\000\026\015\125\020\064\021\061\022\101\023\062\024" +
    "\105\025\104\034\214\035\123\036\115\001\001\000\002" +
    "\001\001\000\026\015\125\020\064\021\061\022\101\023" +
    "\062\024\105\025\104\034\216\035\123\036\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\056\026\241" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\056\026\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\277\001\001\000\004" +
    "\012\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\037" +
    "\322\040\321\045\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\334\047\332\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\014\341\015\347\020\064\021\061\022\101\023\062" +
    "\024\105\025\104\027\111\030\072\031\071\032\100\033" +
    "\110\041\340\042\343\043\346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\352\015\357" +
    "\020\064\021\061\022\101\023\062\024\105\025\104\027" +
    "\111\030\072\031\071\032\100\033\110\042\354\043\346" +
    "\044\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\367\001\001\000\004\012\370\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\u0100\014\374\015\u0101\020\064\021\061\022\101\023\062" +
    "\024\105\025\104\027\111\030\072\031\071\032\100\033" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\056\026\u0116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\056" +
    "\026\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\056\026\u014e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\056\026\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String concatenarArreglos(double[] sinR, int[] frec, int[] frecA, double[] frecR) {
        StringBuilder resultado = new StringBuilder();

        for (int i = 0; i < sinR.length; i++) {
            // Concatenar valores de cada arreglo, separados por tabuladores
            resultado.append(sinR[i]).append("\t").append(frec[i]).append("\t").append(frecA[i]).append("\t").append(frecR[i]);

            // Agregar un salto de línea después de cada conjunto de valores
            resultado.append("\n");
        }

        return resultado.toString();
    }

    public static double[] obtenerArregloSinRepetidos(double[] arreglo) {
        Set<Double> valoresUnicos = new HashSet<>();

        // Agregar valores únicos al conjunto
        for (double valor : arreglo) {
            valoresUnicos.add(valor);
        }

        // Convertir el conjunto a un arreglo
        double[] resultado = new double[valoresUnicos.size()];
        int index = 0;
        for (double valor : valoresUnicos) {
            resultado[index++] = valor;
        }

        return resultado;
    }

    public static int[] obtenerFrecuencia(double[] arreglo) {
        Map<Double, Integer> mapaFrecuencia = new HashMap<>();

        // Contar frecuencia de cada valor
        for (double valor : arreglo) {
            mapaFrecuencia.put(valor, mapaFrecuencia.getOrDefault(valor, 0) + 1);
        }

        // Convertir el mapa a un arreglo de frecuencia
        int[] frecuencia = new int[mapaFrecuencia.size()];
        int index = 0;
        for (double valor : mapaFrecuencia.keySet()) {
            frecuencia[index++] = mapaFrecuencia.get(valor);
        }

        return frecuencia;
    }

    public static int[] obtenerFrecuenciaAcumulada(int[] frecuencia) {
        int[] frecuenciaAcumulada = new int[frecuencia.length];
        int acumulada = 0;

        for (int i = 0; i < frecuencia.length; i++) {
            acumulada += frecuencia[i];
            frecuenciaAcumulada[i] = acumulada;
        }

        return frecuenciaAcumulada;
    }

    public static double[] obtenerFrecuenciaRelativa(int[] frecuencia, int totalElementos) {
        double[] frecuenciaRelativa = new double[frecuencia.length];

        for (int i = 0; i < frecuencia.length; i++) {
            frecuenciaRelativa[i] = (double) frecuencia[i] / totalElementos;
        }

        return frecuenciaRelativa;
    }



public static String[] dividirStringPorComillas(String cadena) {
    String[] resultado = new String[2];

    // Encuentra la posición de la primera comilla doble
    int indiceComilla = cadena.indexOf("\"");

    // Verifica si se encontró una comilla doble
    if (indiceComilla != -1) {
        // Divide la cadena en dos partes
        resultado[0] = cadena.substring(0, indiceComilla);
        resultado[1] = cadena.substring(indiceComilla);
    } else {
        // Si no se encontró una comilla doble, asigna la cadena completa a la primera parte
        resultado[0] = cadena;
        resultado[1] = "";
    }

    return resultado;
}

    public static float calcularMaximo(float[] numeros) {
        float maximo = Integer.MIN_VALUE;

        for (float numero : numeros) {
            if (numero > maximo) {
                maximo = numero;
            }
        }

        return maximo;
    }
private static int[] convertirDoubleAInt(double[] arregloDouble) {
        int[] arregloInt = new int[arregloDouble.length];

        for (int i = 0; i < arregloDouble.length; i++) {
            // Convertir cada elemento de double a int
            arregloInt[i] = (int) arregloDouble[i];
        }

        return arregloInt;
    }
    public static float calcularMinimo(float[] numeros) {
        float minimo = Integer.MAX_VALUE;

        for (float numero : numeros) {
            if (numero < minimo) {
                minimo = numero;
            }
        }

        return minimo;
    }

    
      public static double calcularVarianza(float[] numeros) {
        // Calcular la media
        double media = calcularMedia(numeros);

        // Calcular la suma de los cuadrados de las diferencias entre cada número y la media
        double sumaCuadradosDiferencias = 0;

        for (float numero : numeros) {
            double diferencia = numero - media;
            sumaCuadradosDiferencias += diferencia * diferencia;
        }

        // Calcular la varianza dividiendo la suma de los cuadrados por la cantidad de elementos
        double varianza = sumaCuadradosDiferencias / numeros.length;

        return varianza;
    }

     public static double calcularMedia(float[] numeros) {
        float suma = 0;

        for (float numero : numeros) {
            suma += numero;
        }

        return (double) suma / numeros.length;
    }

     public static double calcularModa(float[] numeros) {
    // Utilizamos un mapa para almacenar la frecuencia de cada número
    Map<Float, Integer> frecuenciaMapa = new HashMap<>();

    // Calcular la frecuencia de cada número
    for (float numero : numeros) {
        frecuenciaMapa.put(numero, frecuenciaMapa.getOrDefault(numero, 0) + 1);
    }

    // Encontrar el número con la frecuencia máxima
    double moda = 0;
    int frecuenciaMaxima = 0;

    for (Map.Entry<Float, Integer> entry : frecuenciaMapa.entrySet()) {
        float numero = entry.getKey();
        int frecuencia = entry.getValue();

        if (frecuencia > frecuenciaMaxima) {
            moda = numero;
            frecuenciaMaxima = frecuencia;
        }
    }

    return moda;
}
    
    public static float[] convertirCadenaAArray(String numerosString) {
    String[] numerosStringArray = numerosString.split(",");
    float[] numeros = new float[numerosStringArray.length];

    for (int i = 0; i < numerosStringArray.length; i++) {
        numeros[i] = Float.parseFloat(numerosStringArray[i]);
    }

    return numeros;
}
public static double[] convertirStringADoubleArray(String cadena) {
    // Divide la cadena por comas y convierte cada elemento a double
    String[] numerosString = cadena.split(",");
    double[] numeros = new double[numerosString.length];

    for (int i = 0; i < numerosString.length; i++) {
        numeros[i] = Double.parseDouble(numerosString[i]);
    }

    return numeros;
}

   public static double calcularMediana(float[] numeros) {
    int n = numeros.length;
    if (n % 2 == 0) {
        // Si hay un número par de elementos, promediar los dos valores centrales
        int indice1 = n / 2 - 1;
        int indice2 = n / 2;
        return (numeros[indice1] + numeros[indice2]) / 2.0;
    } else {
        // Si hay un número impar de elementos, devolver el valor central
        int indiceCentral = n / 2;
        return numeros[indiceCentral];
    }
}

    
    public static String arregloTemporal="";
    public static String arregloNumeros="";
   
    public static String obtenerValor(LinkedList<ts> lista, String nombreBuscado) {
        for (ts item : lista) {
            if (item.getNombre().equals(nombreBuscado)) {
                return item.getValor();
            }
        }
        return null; // Retorna null si no se encuentra el nodo
    }





    public void syntax_error(Symbol s)
    {
        //System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizador_sintactico$actions {
  private final analizador_sintactico parser;

  /** Constructor */
  CUP$analizador_sintactico$actions(analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action_part00000000(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador_sintactico$parser.done_parsing();
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= cod 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= cod codigo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod ::= primitivas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod ::= arreglos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod ::= print 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod ::= graficas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO 
            {
              Object RESULT =null;
		RESULT="CHAR[]";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		RESULT="DOUBLE";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dospuntos ::= DOS_PUNTOS DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("dospuntos",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenidoVariable ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=n.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoVariable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenidoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenidoVariable ::= aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=a.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenidoVariable ::= estadisticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=e.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaValores ::= CORCHETE_IZQUIERDO cuerpoLista CORCHETE_DERECHO 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		arregloNumeros=arregloTemporal;
                System.out.println(" arrS:"+arregloTemporal+" arrN:"+arregloNumeros);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoLista ::= STRING COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpoLista ::= NUMEROS COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpoLista ::= ID COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpoLista ::= aritmeticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpoLista ::= estadisticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoLista ::= STRING 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoLista ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoLista ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoLista ::= aritmeticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoLista ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitivas ::= RESERVADA_VAR DOS_PUNTOS tipo dospuntos ID MENOR_QUE GUION contenidoVariable RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                ts news = new ts(id.toString(),c.toString(),"Variable tipo "+t.toString(),cleft,cright);
                gui.listaSimbolos.add(news);
                
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglos ::= RESERVADA_ARRAY DOS_PUNTOS tipo dospuntos IDE MENOR_QUE GUION listaValores RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                //arregloTemporal="["+arregloTemporal+"]";
                //arregloNumeros=arregloTemporal;
                ts news = new ts(ide.toString(),arregloTemporal,"Array tipo "+t.toString(),lvleft,lvright);
                gui.listaSimbolos.add(news);
                arregloTemporal="";
            
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("arreglos",4, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aritmeticas ::= suma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aritmeticas ::= resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aritmeticas ::= multiplicacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aritmeticas ::= division 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritmeticas ::= modulo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // suma ::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n");
  RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // resta ::= RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n");
    RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicacion ::= RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
  RESULT=r;  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // division ::= RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modulo ::= RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("modulo",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoAnidada ::= RESERVADA_SUMA 
            {
              Object RESULT =null;
		RESULT="suma";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoAnidada ::= RESERVADA_RESTA 
            {
              Object RESULT =null;
		RESULT="resta";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoAnidada ::= RESERVADA_MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="multiplicacion";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoAnidada ::= RESERVADA_DIVISION 
            {
              Object RESULT =null;
		RESULT="division";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoAnidada ::= RESERVADA_MODULO 
            {
              Object RESULT =null;
		RESULT="modulo";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valorAritmetico ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT= c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorAritmetico ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valorAritmetico ::= anidacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorAritmetico ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // anidacion ::= tipoAnidada PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("anidacion",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // estadisticas ::= media 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estadisticas ::= mediana 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estadisticas ::= moda 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estadisticas ::= varianza 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estadisticas ::= max 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estadisticas ::= min 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidoE ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidoE ::= IDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // media ::= RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
            
        if(arregloTemporal.length()==0){
            float[] numeros=convertirCadenaAArray(c.toString());
            double media =calcularMedia(numeros);
            RESULT=media;
        }else{
            float[] numeros=convertirCadenaAArray(arregloTemporal);
            double media =calcularMedia(numeros);
            RESULT=media;
            arregloTemporal="";
        }
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("media",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mediana ::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
        } else {
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
            arregloTemporal="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("mediana",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // moda ::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
 
        if(arregloTemporal.length()==0){
        float[] numeros = convertirCadenaAArray(c.toString());
        double moda = calcularModa(numeros);
        RESULT=moda;
        } else{
        float[] numeros = convertirCadenaAArray(arregloTemporal);
        double moda = calcularModa(numeros);
        RESULT=moda;
        arregloTemporal="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("moda",16, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varianza ::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
    
        if(arregloTemporal.length()==0){
        float[] numeros = convertirCadenaAArray(c.toString());
        double varianza = calcularVarianza(numeros);
        RESULT=varianza;
        } else{
        float[] numeros = convertirCadenaAArray(arregloTemporal);
        double varianza = calcularVarianza(numeros);
        RESULT=varianza;
        arregloTemporal="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("varianza",17, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // max ::= RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		

        if(arregloTemporal.length()==0){
        float[] numeros = convertirCadenaAArray(c.toString());
        float maximo = calcularMaximo(numeros);
        }else{
        float[] numeros = convertirCadenaAArray(arregloTemporal);
        float maximo = calcularMaximo(numeros);
        RESULT=maximo;
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // min ::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
        float[] numeros = convertirCadenaAArray(arregloTemporal);
        float minimo = calcularMinimo(numeros);
        }else{
        float[] numeros = convertirCadenaAArray(arregloTemporal);
        float minimo = calcularMinimo(numeros);
        RESULT=minimo;
        }      

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("min",19, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print ::= RESERVADA_CONSOLE DOS_PUNTOS DOS_PUNTOS desicionprint 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print",5, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // desicionprint ::= print1 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // desicionprint ::= print2 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print1 ::= RESERVADA_PRINT SIGNO_IGUAL valorPrint RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 
        System.out.println("\n"+"Print desde el cup de la cadena: " + s+"\n");
        gui.listaPrint.add((String) s);
    
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print1",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valorPrint ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valorPrint ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valorPrint ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valorPrint ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valorPrint ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valorPrint ::= combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // combinado ::= combinacion combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + cc.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // combinado ::= combinacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // combinado ::= combinacion comb 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + r.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // combinacion ::= STRING COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // combinacion ::= NUMEROS COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // combinacion ::= aritmeticas COMA 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // combinacion ::= estadisticas COMA 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // combinacion ::= ID COMA 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comb ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comb ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comb ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comb ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comb ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // print2 ::= RESERVADA_COLUMN SIGNO_IGUAL pp GUION MAYOR_QUE ppp RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        String cuerpo;
        if(c==null){
            if (arregloTemporal.startsWith("\"")) {         //Char
               cuerpo = arregloTemporal.replaceAll("[\",]", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =arregloTemporal.replaceAll(",", "\n");
            }
        }else{
            if (c.toString().startsWith("\"")) {         //Char
               cuerpo = c.toString().replaceAll("\"", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =c.toString().replaceAll(",", "\n");
            }
        }
        cuerpo=t+"\n"+cuerpo;
        System.out.println("\n"+"Print desde el cup de la cadena: " + cuerpo+"\n");
        gui.listaPrint.add((String) cuerpo); 
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print2",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // pp ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // pp ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ppp ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ppp ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // graficas ::= pie 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // graficas ::= barras 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // graficas ::= linea 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // graficas ::= histograma 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // barras ::= RESERVADA_GRAFICA_BARRA PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC CERRADURA_BARRAS RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).value;
		
        if(ex==null){ //eje x, arreglo char
            // si ex esta vacio es porque usare un arreglo, aca estoy seguro que no usare un IDE de arreglo
            String[] partes = dividirStringPorComillas(arregloTemporal);
            arregloTemporal=partes[1];
        }else{
            arregloTemporal=ex.toString();
        }
        if(ey==null) {//eje y, arreglo de numeros
            String[] partes = dividirStringPorComillas(arregloNumeros);
            arregloNumeros=partes[0];
        }else{
            arregloNumeros=ey.toString();
}


        String[] categorias = arregloTemporal.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(arregloNumeros);
        
        ImageCreator.createBarChartImage(categorias,valores,t.toString(),x.toString(),y.toString());
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("barras",39, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-56)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // pie ::= RESERVADA_GRAFICA_PIE PARENTESIS_IZQUIERDO RESRVADA_LABEL_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC CERRADURA_PIE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-27)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-27)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-27)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).value;
		
        if(ex==null){ //eje x, arreglo char
            // si ex esta vacio es porque usare un arreglo, aca estoy seguro que no usare un IDE de arreglo
            String[] partes = dividirStringPorComillas(arregloTemporal);
            arregloTemporal=partes[1];
        }else{
            arregloTemporal=ex.toString();
        }
        if(ey==null) {//eje y, arreglo de numeros
            String[] partes = dividirStringPorComillas(arregloNumeros);
            arregloNumeros=partes[0];
        }else{
            arregloNumeros=ey.toString();
}

        String[] categorias = arregloTemporal.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(arregloNumeros);

        ImageCreator.createPieChartImage(categorias,valores,s.toString());
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pie",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-36)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // linea ::= RESERVADA_GRAFICA_LINE PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC CERRADURA_LINEA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-47)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-37)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-29)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).value;
		
        if(ex==null){ //eje x, arreglo char
            // si ex esta vacio es porque usare un arreglo, aca estoy seguro que no usare un IDE de arreglo
            String[] partes = dividirStringPorComillas(arregloTemporal);
            arregloTemporal=partes[1];
        }else{
            arregloTemporal=ex.toString();
        }
        if(ey==null) {//eje y, arreglo de numeros
            String[] partes = dividirStringPorComillas(arregloNumeros);
            arregloNumeros=partes[0];
        }else{
            arregloNumeros=ey.toString();
}

        String[] categorias = arregloTemporal.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(arregloNumeros);
        
        ImageCreator.createLineChartImage(categorias,valores,t.toString(),x.toString(),y.toString());
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("linea",40, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-56)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // histograma ::= RESERVADA_GRAFIA_HISTOGRAMA PARENTESIS_IZQUIERDO RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA RESERVADA_EXEC RESERVADA_GRAFIA_HISTOGRAMA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-19)).value;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)).value;
		  
         double[] valores;
        if(ey==null) {//eje y, arreglo de numeros
            String[] partes = dividirStringPorComillas(arregloNumeros);
            arregloNumeros=partes[0];
        }else{
            arregloNumeros=ey.toString();
}
       valores = convertirStringADoubleArray(arregloNumeros);
  
        int[] arregloInt = new int[valores.length];

        for (int i = 0; i < valores.length; i++) {
            String valorComoCadena = Double.toString(valores[i]).replace(".", "");
            arregloInt[i] = Integer.parseInt(valorComoCadena);
        }
        
        ImageCreator.createHistogramImage(arregloInt,t.toString());

        String r=t+"\n";
        double[] sinR = obtenerArregloSinRepetidos(valores);
        int[] frec = obtenerFrecuencia(valores);
        int[] arreg = convertirDoubleAInt(valores);
        int[] frecA = obtenerFrecuenciaAcumulada(arreg);
        double[] frecR = obtenerFrecuenciaRelativa(frec, valores.length);
        r =r+concatenarArreglos(sinR, frec, frecA, frecR);

        System.out.println("\n"+"Print desde el cup de la cadena: " + r+"\n");
        gui.listaPrint.add((String) r); 

        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("histograma",41, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-28)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizador_sintactico$do_action_part00000000(
                               CUP$analizador_sintactico$act_num,
                               CUP$analizador_sintactico$parser,
                               CUP$analizador_sintactico$stack,
                               CUP$analizador_sintactico$top);
    }
}

}
