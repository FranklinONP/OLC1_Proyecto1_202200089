
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java.util.Arrays;
import java.util.LinkedList;
import java_cup.runtime.*;
import Errores.Error_;
import GUI.gui;
import DB.ts;
import java.util.HashMap;
import java.util.Map;
import DB.ImageCreator;
import java.util.HashSet;
import java.util.Set;
import java.io.File;
import java.io.IOException;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.plot.PlotOrientation;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analizador_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analizador_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analizador_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\011\005\000" +
    "\002\011\003\000\002\012\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\017\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\005\014\000\002\006" +
    "\014\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\027\010\000" +
    "\002\030\010\000\002\031\010\000\002\032\010\000\002" +
    "\033\010\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\010\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\026\003\000\002\026\003\000\002\020\006" +
    "\000\002\021\006\000\002\022\006\000\002\023\006\000" +
    "\002\024\006\000\002\025\006\000\002\007\006\000\002" +
    "\037\003\000\002\037\003\000\002\040\007\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\042\004\000" +
    "\002\042\003\000\002\042\004\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\004\000\002\043" +
    "\004\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\045\012\000" +
    "\002\046\003\000\002\046\003\000\002\047\003\000\002" +
    "\047\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\003\000\002\056\003\000\002\063\014\000\002\057" +
    "\014\000\002\060\012\000\002\061\014\000\002\062\014" +
    "\000\002\064\014\000\002\065\012\000\002\051\020\000" +
    "\002\050\016\000\002\052\020\000\002\053\015" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\004\021\004\001\002\000\020\023\012\026" +
    "\015\042\013\045\011\046\022\047\007\050\025\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\004\014\u0133\001\002\000\022\022\ufffb\023\ufffb\026\ufffb" +
    "\042\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\001\002\000" +
    "\004\014\373\001\002\000\004\005\355\001\002\000\004" +
    "\005\304\001\002\000\022\022\ufffd\023\ufffd\026\ufffd\042" +
    "\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002\000\004" +
    "\005\271\001\002\000\022\022\uffa6\023\uffa6\026\uffa6\042" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\001\002\000\022" +
    "\022\uffff\023\012\026\015\042\013\045\011\046\022\047" +
    "\007\050\025\001\002\000\022\022\uffa3\023\uffa3\026\uffa3" +
    "\042\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\001\002\000" +
    "\022\022\ufffc\023\ufffc\026\ufffc\042\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\001\002\000\004\014\240\001\002\000" +
    "\022\022\ufffa\023\ufffa\026\ufffa\042\ufffa\045\ufffa\046\ufffa" +
    "\047\ufffa\050\ufffa\001\002\000\022\022\uffa4\023\uffa4\026" +
    "\uffa4\042\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\001\002" +
    "\000\004\014\032\001\002\000\004\022\030\001\002\000" +
    "\022\022\uffa5\023\uffa5\026\uffa5\042\uffa5\045\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\001\002\000\004\021\031\001\002\000" +
    "\004\002\000\001\002\000\006\051\035\056\037\001\002" +
    "\000\010\051\uff9a\056\uff9a\060\uff9a\001\002\000\010\051" +
    "\uff99\056\uff99\060\uff99\001\002\000\004\005\227\001\002" +
    "\000\006\051\035\056\037\001\002\000\004\005\040\001" +
    "\002\000\004\005\041\001\002\000\006\024\044\025\043" +
    "\001\002\000\004\020\047\001\002\000\004\016\045\001" +
    "\002\000\006\005\ufff8\020\ufff8\001\002\000\004\017\046" +
    "\001\002\000\006\005\ufff9\020\ufff9\001\002\000\006\016" +
    "\052\063\051\001\002\000\004\022\215\001\002\000\006" +
    "\015\uffc9\022\uffc9\001\002\000\036\004\065\027\107\030" +
    "\071\031\054\032\077\033\063\034\062\035\103\036\100" +
    "\037\060\040\070\041\064\061\073\062\074\001\002\000" +
    "\006\015\uffca\022\uffca\001\002\000\004\014\210\001\002" +
    "\000\006\012\206\017\uffe8\001\002\000\012\012\uffcf\015" +
    "\uffcf\017\uffcf\022\uffcf\001\002\000\012\012\uffcd\015\uffcd" +
    "\017\uffcd\022\uffcd\001\002\000\004\014\203\001\002\000" +
    "\012\012\uffd0\015\uffd0\017\uffd0\022\uffd0\001\002\000\004" +
    "\014\200\001\002\000\004\014\173\001\002\000\004\014" +
    "\170\001\002\000\006\012\166\017\uffe9\001\002\000\010" +
    "\012\uffe2\017\uffe2\022\uffe2\001\002\000\010\012\uffe3\017" +
    "\uffe3\022\uffe3\001\002\000\004\014\163\001\002\000\004" +
    "\014\156\001\002\000\004\017\155\001\002\000\006\012" +
    "\153\017\uffeb\001\002\000\006\012\151\017\uffea\001\002" +
    "\000\010\012\uffe1\017\uffe1\022\uffe1\001\002\000\012\012" +
    "\uffce\015\uffce\017\uffce\022\uffce\001\002\000\004\014\144" +
    "\001\002\000\004\014\141\001\002\000\012\012\uffcb\015" +
    "\uffcb\017\uffcb\022\uffcb\001\002\000\012\012\uffcc\015\uffcc" +
    "\017\uffcc\022\uffcc\001\002\000\004\014\136\001\002\000" +
    "\006\012\134\017\uffe7\001\002\000\010\012\uffe0\017\uffe0" +
    "\022\uffe0\001\002\000\010\012\uffe4\017\uffe4\022\uffe4\001" +
    "\002\000\004\014\110\001\002\000\034\004\115\027\123" +
    "\030\116\031\111\032\121\033\113\034\062\035\103\036" +
    "\100\037\060\040\070\041\064\062\117\001\002\000\004" +
    "\014\uffd8\001\002\000\006\012\uffd3\015\uffd3\001\002\000" +
    "\004\014\uffd6\001\002\000\004\012\131\001\002\000\006" +
    "\012\uffd4\015\uffd4\001\002\000\004\014\uffd9\001\002\000" +
    "\006\012\uffd5\015\uffd5\001\002\000\004\014\124\001\002" +
    "\000\004\014\uffd7\001\002\000\006\012\uffd2\015\uffd2\001" +
    "\002\000\004\014\uffda\001\002\000\034\004\115\027\123" +
    "\030\116\031\111\032\121\033\113\034\062\035\103\036" +
    "\100\037\060\040\070\041\064\062\117\001\002\000\004" +
    "\012\126\001\002\000\034\004\115\027\123\030\116\031" +
    "\111\032\121\033\113\034\062\035\103\036\100\037\060" +
    "\040\070\041\064\062\117\001\002\000\004\015\130\001" +
    "\002\000\006\012\uffd1\015\uffd1\001\002\000\034\004\115" +
    "\027\123\030\116\031\111\032\121\033\113\034\062\035" +
    "\103\036\100\037\060\040\070\041\064\062\117\001\002" +
    "\000\004\015\133\001\002\000\010\012\uffdf\017\uffdf\022" +
    "\uffdf\001\002\000\036\004\065\027\107\030\071\031\054" +
    "\032\077\033\063\034\062\035\103\036\100\037\060\040" +
    "\070\041\064\061\073\062\074\001\002\000\004\017\uffec" +
    "\001\002\000\006\016\052\063\051\001\002\000\004\015" +
    "\140\001\002\000\012\012\uffc7\015\uffc7\017\uffc7\022\uffc7" +
    "\001\002\000\006\016\052\063\051\001\002\000\004\015" +
    "\143\001\002\000\012\012\uffc6\015\uffc6\017\uffc6\022\uffc6" +
    "\001\002\000\034\004\115\027\123\030\116\031\111\032" +
    "\121\033\113\034\062\035\103\036\100\037\060\040\070" +
    "\041\064\062\117\001\002\000\004\012\146\001\002\000" +
    "\034\004\115\027\123\030\116\031\111\032\121\033\113" +
    "\034\062\035\103\036\100\037\060\040\070\041\064\062" +
    "\117\001\002\000\004\015\150\001\002\000\010\012\uffdc" +
    "\017\uffdc\022\uffdc\001\002\000\036\004\065\027\107\030" +
    "\071\031\054\032\077\033\063\034\062\035\103\036\100" +
    "\037\060\040\070\041\064\061\073\062\074\001\002\000" +
    "\004\017\uffef\001\002\000\036\004\065\027\107\030\071" +
    "\031\054\032\077\033\063\034\062\035\103\036\100\037" +
    "\060\040\070\041\064\061\073\062\074\001\002\000\004" +
    "\017\ufff0\001\002\000\006\015\ufff1\022\ufff1\001\002\000" +
    "\034\004\115\027\123\030\116\031\111\032\121\033\113" +
    "\034\062\035\103\036\100\037\060\040\070\041\064\062" +
    "\117\001\002\000\004\012\160\001\002\000\034\004\115" +
    "\027\123\030\116\031\111\032\121\033\113\034\062\035" +
    "\103\036\100\037\060\040\070\041\064\062\117\001\002" +
    "\000\004\015\162\001\002\000\010\012\uffde\017\uffde\022" +
    "\uffde\001\002\000\006\016\052\063\051\001\002\000\004" +
    "\015\165\001\002\000\012\012\uffc4\015\uffc4\017\uffc4\022" +
    "\uffc4\001\002\000\036\004\065\027\107\030\071\031\054" +
    "\032\077\033\063\034\062\035\103\036\100\037\060\040" +
    "\070\041\064\061\073\062\074\001\002\000\004\017\uffee" +
    "\001\002\000\006\016\052\063\051\001\002\000\004\015" +
    "\172\001\002\000\012\012\uffc3\015\uffc3\017\uffc3\022\uffc3" +
    "\001\002\000\034\004\115\027\123\030\116\031\111\032" +
    "\121\033\113\034\062\035\103\036\100\037\060\040\070" +
    "\041\064\062\117\001\002\000\004\012\175\001\002\000" +
    "\034\004\115\027\123\030\116\031\111\032\121\033\113" +
    "\034\062\035\103\036\100\037\060\040\070\041\064\062" +
    "\117\001\002\000\004\015\177\001\002\000\010\012\uffdb" +
    "\017\uffdb\022\uffdb\001\002\000\006\016\052\063\051\001" +
    "\002\000\004\015\202\001\002\000\012\012\uffc8\015\uffc8" +
    "\017\uffc8\022\uffc8\001\002\000\006\016\052\063\051\001" +
    "\002\000\004\015\205\001\002\000\012\012\uffc5\015\uffc5" +
    "\017\uffc5\022\uffc5\001\002\000\036\004\065\027\107\030" +
    "\071\031\054\032\077\033\063\034\062\035\103\036\100" +
    "\037\060\040\070\041\064\061\073\062\074\001\002\000" +
    "\004\017\uffed\001\002\000\034\004\115\027\123\030\116" +
    "\031\111\032\121\033\113\034\062\035\103\036\100\037" +
    "\060\040\070\041\064\062\117\001\002\000\004\012\212" +
    "\001\002\000\034\004\115\027\123\030\116\031\111\032" +
    "\121\033\113\034\062\035\103\036\100\037\060\040\070" +
    "\041\064\062\117\001\002\000\004\015\214\001\002\000" +
    "\010\012\uffdd\017\uffdd\022\uffdd\001\002\000\004\013\216" +
    "\001\002\000\012\051\uff92\056\uff92\057\uff92\060\uff92\001" +
    "\002\000\004\060\220\001\002\000\004\050\221\001\002" +
    "\000\004\022\222\001\002\000\004\013\223\001\002\000" +
    "\004\015\224\001\002\000\004\022\225\001\002\000\004" +
    "\013\226\001\002\000\022\022\uff8e\023\uff8e\026\uff8e\042" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\001\002\000\004" +
    "\005\230\001\002\000\004\025\231\001\002\000\004\016" +
    "\232\001\002\000\004\017\233\001\002\000\004\020\234" +
    "\001\002\000\004\061\235\001\002\000\004\022\236\001" +
    "\002\000\004\013\237\001\002\000\022\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98\001" +
    "\002\000\010\051\035\056\037\057\243\001\002\000\010" +
    "\051\035\056\037\057\243\001\002\000\012\051\uff9b\056" +
    "\uff9b\057\uff9b\060\uff9b\001\002\000\004\005\246\001\002" +
    "\000\012\051\uff9c\056\uff9c\057\uff9c\060\uff9c\001\002\000" +
    "\012\051\uff9d\056\uff9d\057\uff9d\060\uff9d\001\002\000\004" +
    "\005\247\001\002\000\004\025\250\001\002\000\004\016" +
    "\251\001\002\000\004\017\252\001\002\000\004\020\253" +
    "\001\002\000\006\016\052\063\051\001\002\000\004\022" +
    "\255\001\002\000\004\013\256\001\002\000\012\051\uff93" +
    "\056\uff93\057\uff93\060\uff93\001\002\000\010\051\035\056" +
    "\037\057\243\001\002\000\004\060\261\001\002\000\004" +
    "\046\262\001\002\000\004\022\263\001\002\000\004\013" +
    "\264\001\002\000\004\015\265\001\002\000\004\022\266" +
    "\001\002\000\004\013\267\001\002\000\022\022\uff90\023" +
    "\uff90\026\uff90\042\uff90\045\uff90\046\uff90\047\uff90\050\uff90" +
    "\001\002\000\004\022\ufffe\001\002\000\006\024\044\025" +
    "\043\001\002\000\004\005\274\001\002\000\004\063\276" +
    "\001\002\000\004\005\275\001\002\000\006\004\ufff7\063" +
    "\ufff7\001\002\000\004\006\277\001\002\000\004\010\300" +
    "\001\002\000\004\016\052\001\002\000\004\022\302\001" +
    "\002\000\004\013\303\001\002\000\022\022\uffe5\023\uffe5" +
    "\026\uffe5\042\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001" +
    "\002\000\004\005\305\001\002\000\006\043\307\044\312" +
    "\001\002\000\022\022\uffc0\023\uffc0\026\uffc0\042\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\004\020\326" +
    "\001\002\000\022\022\uffc1\023\uffc1\026\uffc1\042\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\001\002\000\022\022\uffc2" +
    "\023\uffc2\026\uffc2\042\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\001\002\000\004\020\313\001\002\000\006\004\314" +
    "\061\316\001\002\000\004\010\uffa9\001\002\000\004\010" +
    "\317\001\002\000\004\010\uffaa\001\002\000\004\007\320" +
    "\001\002\000\006\016\052\063\322\001\002\000\004\022" +
    "\324\001\002\000\004\022\uffa8\001\002\000\004\022\uffa7" +
    "\001\002\000\004\013\325\001\002\000\022\022\uffab\023" +
    "\uffab\026\uffab\042\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\001\002\000\036\004\331\027\107\030\071\031\054\032" +
    "\077\033\063\034\062\035\103\036\100\037\060\040\070" +
    "\041\064\061\333\062\334\001\002\000\004\022\353\001" +
    "\002\000\006\012\352\022\uffbb\001\002\000\006\012\351" +
    "\022\uffbc\001\002\000\004\022\uffb9\001\002\000\006\012" +
    "\350\022\uffbe\001\002\000\006\012\347\022\uffbd\001\002" +
    "\000\040\004\342\022\uffb7\027\107\030\071\031\054\032" +
    "\077\033\063\034\062\035\103\036\100\037\060\040\070" +
    "\041\064\061\344\062\345\001\002\000\006\012\337\022" +
    "\uffba\001\002\000\040\004\uffb2\022\uffb2\027\uffb2\030\uffb2" +
    "\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037" +
    "\uffb2\040\uffb2\041\uffb2\061\uffb2\062\uffb2\001\002\000\004" +
    "\022\uffb6\001\002\000\006\012\352\022\uffae\001\002\000" +
    "\006\012\351\022\uffaf\001\002\000\004\022\uffb8\001\002" +
    "\000\006\012\350\022\uffb0\001\002\000\006\012\347\022" +
    "\uffac\001\002\000\006\012\337\022\uffad\001\002\000\040" +
    "\004\uffb4\022\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\061\uffb4\062\uffb4\001\002\000\040\004\uffb5\022\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\061\uffb5\062\uffb5\001" +
    "\002\000\040\004\uffb1\022\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\061\uffb1\062\uffb1\001\002\000\040\004\uffb3" +
    "\022\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\061\uffb3" +
    "\062\uffb3\001\002\000\004\013\354\001\002\000\022\022" +
    "\uffbf\023\uffbf\026\uffbf\042\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\001\002\000\006\024\044\025\043\001\002\000" +
    "\004\005\274\001\002\000\004\004\360\001\002\000\004" +
    "\006\361\001\002\000\004\010\362\001\002\000\036\004" +
    "\364\027\107\030\071\031\054\032\077\033\063\034\062" +
    "\035\103\036\100\037\060\040\070\041\064\061\365\062" +
    "\366\001\002\000\004\022\ufff3\001\002\000\004\022\ufff5" +
    "\001\002\000\004\022\ufff4\001\002\000\004\022\ufff6\001" +
    "\002\000\004\022\371\001\002\000\004\022\ufff2\001\002" +
    "\000\004\013\372\001\002\000\022\022\uffe6\023\uffe6\026" +
    "\uffe6\042\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\001\002" +
    "\000\014\051\035\052\377\053\u0103\054\u0100\055\u0105\001" +
    "\002\000\016\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\060\uffa2\001\002\000\016\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\060\uffa0\001\002\000\016\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\060\uff9e\001\002\000\004\005" +
    "\u012a\001\002\000\004\005\u0121\001\002\000\016\051\uffa1" +
    "\052\uffa1\053\uffa1\054\uffa1\055\uffa1\060\uffa1\001\002\000" +
    "\016\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\060\uff9f" +
    "\001\002\000\004\005\u011a\001\002\000\014\051\035\052" +
    "\377\053\u0103\054\u0100\055\u0105\001\002\000\004\005\u0106" +
    "\001\002\000\004\005\u0107\001\002\000\004\025\u0108\001" +
    "\002\000\004\016\u0109\001\002\000\004\017\u010a\001\002" +
    "\000\004\020\u010b\001\002\000\004\061\u010c\001\002\000" +
    "\004\022\u010d\001\002\000\004\013\u010e\001\002\000\016" +
    "\051\uff94\052\uff94\053\uff94\054\uff94\055\uff94\060\uff94\001" +
    "\002\000\014\051\035\052\377\053\u0103\054\u0100\055\u0105" +
    "\001\002\000\014\051\035\052\377\053\u0103\054\u0100\055" +
    "\u0105\001\002\000\014\051\035\052\377\053\u0103\054\u0100" +
    "\055\u0105\001\002\000\004\060\u0113\001\002\000\004\045" +
    "\u0114\001\002\000\004\022\u0115\001\002\000\004\013\u0116" +
    "\001\002\000\004\015\u0117\001\002\000\004\022\u0118\001" +
    "\002\000\004\013\u0119\001\002\000\022\022\uff91\023\uff91" +
    "\026\uff91\042\uff91\045\uff91\046\uff91\047\uff91\050\uff91\001" +
    "\002\000\004\005\u011b\001\002\000\004\024\u011c\001\002" +
    "\000\004\020\u011d\001\002\000\006\016\052\063\051\001" +
    "\002\000\004\022\u011f\001\002\000\004\013\u0120\001\002" +
    "\000\016\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\060" +
    "\uff96\001\002\000\004\005\u0122\001\002\000\004\025\u0123" +
    "\001\002\000\004\016\u0124\001\002\000\004\017\u0125\001" +
    "\002\000\004\020\u0126\001\002\000\004\061\u0127\001\002" +
    "\000\004\022\u0128\001\002\000\004\013\u0129\001\002\000" +
    "\016\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\060\uff95" +
    "\001\002\000\004\005\u012b\001\002\000\004\025\u012c\001" +
    "\002\000\004\016\u012d\001\002\000\004\017\u012e\001\002" +
    "\000\004\020\u012f\001\002\000\006\016\052\063\051\001" +
    "\002\000\004\022\u0131\001\002\000\004\013\u0132\001\002" +
    "\000\016\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\060" +
    "\uff97\001\002\000\014\051\035\052\377\053\u0103\054\u0100" +
    "\055\u0105\001\002\000\014\051\035\052\377\053\u0103\054" +
    "\u0100\055\u0105\001\002\000\014\051\035\052\377\053\u0103" +
    "\054\u0100\055\u0105\001\002\000\014\051\035\052\377\053" +
    "\u0103\054\u0100\055\u0105\001\002\000\014\051\035\052\377" +
    "\053\u0103\054\u0100\055\u0105\001\002\000\004\060\u0139\001" +
    "\002\000\004\047\u013a\001\002\000\004\022\u013b\001\002" +
    "\000\004\013\u013c\001\002\000\004\015\u013d\001\002\000" +
    "\004\022\u013e\001\002\000\004\013\u013f\001\002\000\022" +
    "\022\uff8f\023\uff8f\026\uff8f\042\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013d\000\004\002\004\001\001\000\026\003\025\004" +
    "\016\005\013\006\020\007\007\010\022\050\015\051\026" +
    "\052\023\053\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\267\004\016" +
    "\005\013\006\020\007\007\010\022\050\015\051\026\052" +
    "\023\053\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\056\035\063\032\065" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\056\216\063\032\065\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\052\026\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\014" +
    "\054\015\103\016\071\020\060\021\055\022\075\023\056" +
    "\024\101\025\100\027\105\030\066\031\065\032\074\033" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\121\020\060\021\055\022\075\023" +
    "\056\024\101\025\100\034\113\035\117\036\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\121\020\060\021\055" +
    "\022\075\023\056\024\101\025\100\034\124\035\117\036" +
    "\111\001\001\000\002\001\001\000\026\015\121\020\060" +
    "\021\055\022\075\023\056\024\101\025\100\034\126\035" +
    "\117\036\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\121\020\060\021\055\022\075\023\056\024" +
    "\101\025\100\034\131\035\117\036\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\014\054\015\103\016" +
    "\134\020\060\021\055\022\075\023\056\024\101\025\100" +
    "\027\105\030\066\031\065\032\074\033\104\001\001\000" +
    "\002\001\001\000\006\017\052\026\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\052\026\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\121" +
    "\020\060\021\055\022\075\023\056\024\101\025\100\034" +
    "\144\035\117\036\111\001\001\000\002\001\001\000\026" +
    "\015\121\020\060\021\055\022\075\023\056\024\101\025" +
    "\100\034\146\035\117\036\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\014\054\015\103\016\151\020" +
    "\060\021\055\022\075\023\056\024\101\025\100\027\105" +
    "\030\066\031\065\032\074\033\104\001\001\000\002\001" +
    "\001\000\036\014\054\015\103\016\153\020\060\021\055" +
    "\022\075\023\056\024\101\025\100\027\105\030\066\031" +
    "\065\032\074\033\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\121\020\060\021\055\022\075\023" +
    "\056\024\101\025\100\034\156\035\117\036\111\001\001" +
    "\000\002\001\001\000\026\015\121\020\060\021\055\022" +
    "\075\023\056\024\101\025\100\034\160\035\117\036\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\052\026\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\014\054\015\103\016\166\020\060\021\055\022" +
    "\075\023\056\024\101\025\100\027\105\030\066\031\065" +
    "\032\074\033\104\001\001\000\002\001\001\000\006\017" +
    "\052\026\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\121\020\060\021\055\022\075\023\056\024" +
    "\101\025\100\034\173\035\117\036\111\001\001\000\002" +
    "\001\001\000\026\015\121\020\060\021\055\022\075\023" +
    "\056\024\101\025\100\034\175\035\117\036\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\052\026" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\052\026\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\014\054\015\103\016\206\020\060\021\055" +
    "\022\075\023\056\024\101\025\100\027\105\030\066\031" +
    "\065\032\074\033\104\001\001\000\002\001\001\000\026" +
    "\015\121\020\060\021\055\022\075\023\056\024\101\025" +
    "\100\034\210\035\117\036\111\001\001\000\002\001\001" +
    "\000\026\015\121\020\060\021\055\022\075\023\056\024" +
    "\101\025\100\034\212\035\117\036\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\055\240\063\241\064\244\065" +
    "\243\001\001\000\012\055\256\063\241\064\244\065\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\052\026\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\055\257\063\241\064" +
    "\244\065\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\271\001\001\000\004\012\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\310\040\307\045\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\314\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\322\047\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\327\015\335\020" +
    "\060\021\055\022\075\023\056\024\101\025\100\027\105" +
    "\030\066\031\065\032\074\033\104\041\326\042\331\043" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\340\015\345\020\060\021\055\022\075" +
    "\023\056\024\101\025\100\027\105\030\066\031\065\032" +
    "\074\033\104\042\342\043\334\044\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\355\001\001\000" +
    "\004\012\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\013\366\014\362\015\367\020" +
    "\060\021\055\022\075\023\056\024\101\025\100\027\105" +
    "\030\066\031\065\032\074\033\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\054\u0103\057\u0100\060\374\061\u0101" +
    "\062\375\063\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\054\u010e\057\u0100\060\374\061\u0101\062\375\063\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\054\u010f\057\u0100\060\374\061\u0101" +
    "\062\375\063\373\001\001\000\016\054\u0110\057\u0100\060" +
    "\374\061\u0101\062\375\063\373\001\001\000\016\054\u0111" +
    "\057\u0100\060\374\061\u0101\062\375\063\373\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\052\026\u011d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\052\026\u012f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\054\u0133" +
    "\057\u0100\060\374\061\u0101\062\375\063\373\001\001\000" +
    "\016\054\u0134\057\u0100\060\374\061\u0101\062\375\063\373" +
    "\001\001\000\016\054\u0135\057\u0100\060\374\061\u0101\062" +
    "\375\063\373\001\001\000\016\054\u0136\057\u0100\060\374" +
    "\061\u0101\062\375\063\373\001\001\000\016\054\u0137\057" +
    "\u0100\060\374\061\u0101\062\375\063\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String concatenarArreglos(double[] sinR, int[] frec, int[] frecA, double[] frecR) {
        StringBuilder resultado = new StringBuilder();

        for (int i = 0; i < sinR.length; i++) {
            // Concatenar valores de cada arreglo, separados por tabuladores
            resultado.append(sinR[i]).append("\t").append(frec[i]).append("\t").append(frecA[i]).append("\t").append(frecR[i]);

            // Agregar un salto de línea después de cada conjunto de valores
            resultado.append("%"+"\n");
        }

        return resultado.toString();
    }

    public static double[] obtenerArregloSinRepetidos(double[] arreglo) {
        Set<Double> valoresUnicos = new HashSet<>();

        // Agregar valores únicos al conjunto
        for (double valor : arreglo) {
            valoresUnicos.add(valor);
        }

        // Convertir el conjunto a un arreglo
        double[] resultado = new double[valoresUnicos.size()];
        int index = 0;
        for (double valor : valoresUnicos) {
            resultado[index++] = valor;
        }

        return resultado;
    }

    public static int[] obtenerFrecuencia(double[] arreglo) {
        Map<Double, Integer> mapaFrecuencia = new HashMap<>();

        // Contar frecuencia de cada valor
        for (double valor : arreglo) {
            mapaFrecuencia.put(valor, mapaFrecuencia.getOrDefault(valor, 0) + 1);
        }

        // Convertir el mapa a un arreglo de frecuencia
        int[] frecuencia = new int[mapaFrecuencia.size()];
        int index = 0;
        for (double valor : mapaFrecuencia.keySet()) {
            frecuencia[index++] = mapaFrecuencia.get(valor);
        }

        return frecuencia;
    }

    public static int[] obtenerFrecuenciaAcumulada(int[] frecuencia) {
        int[] frecuenciaAcumulada = new int[frecuencia.length];
        int acumulada = 0;

        for (int i = 0; i < frecuencia.length; i++) {
            acumulada += frecuencia[i];
            frecuenciaAcumulada[i] = acumulada;
        }

        return frecuenciaAcumulada;
    }

    public static double[] obtenerFrecuenciaRelativa(int[] frecuencia, int totalElementos) {
        double[] frecuenciaRelativa = new double[frecuencia.length];
        double num=0;

        for (int i = 0; i < frecuencia.length; i++) {
            num=(double) frecuencia[i] / totalElementos;
            num=num*100;
            int numR = (int) Math.round(num);
            frecuenciaRelativa[i] = numR;
        }

        return frecuenciaRelativa;
    }



public static String[] dividirStringPorComillas(String cadena) {
    String[] resultado = new String[2];

    // Encuentra la posición de la primera comilla doble
    int indiceComilla = cadena.indexOf("\"");

    // Verifica si se encontró una comilla doble
    if (indiceComilla != -1) {
        // Divide la cadena en dos partes
        resultado[0] = cadena.substring(0, indiceComilla);
        resultado[1] = cadena.substring(indiceComilla);
    } else {
        // Si no se encontró una comilla doble, asigna la cadena completa a la primera parte
        resultado[0] = cadena;
        resultado[1] = "";
    }

    return resultado;
}

    public static float calcularMaximo(float[] numeros) {
        float maximo = Integer.MIN_VALUE;

        for (float numero : numeros) {
            if (numero > maximo) {
                maximo = numero;
            }
        }

        return maximo;
    }
private static int[] convertirDoubleAInt(double[] arregloDouble) {
        int[] arregloInt = new int[arregloDouble.length];

        for (int i = 0; i < arregloDouble.length; i++) {
            // Convertir cada elemento de double a int
            arregloInt[i] = (int) arregloDouble[i];
        }

        return arregloInt;
    }
    public static float calcularMinimo(float[] numeros) {
        float minimo = Integer.MAX_VALUE;

        for (float numero : numeros) {
            if (numero < minimo) {
                minimo = numero;
            }
        }

        return minimo;
    }

    
      public static double calcularVarianza(float[] numeros) {
        // Calcular la media
        double media = calcularMedia(numeros);

        // Calcular la suma de los cuadrados de las diferencias entre cada número y la media
        double sumaCuadradosDiferencias = 0;

        for (float numero : numeros) {
            double diferencia = numero - media;
            sumaCuadradosDiferencias += diferencia * diferencia;
        }

        // Calcular la varianza dividiendo la suma de los cuadrados por la cantidad de elementos
        double varianza = sumaCuadradosDiferencias / numeros.length;

        return varianza;
    }

     public static double calcularMedia(float[] numeros) {
        float suma = 0;

        for (float numero : numeros) {
            suma += numero;
        }

        return (double) suma / numeros.length;
    }

     public static double calcularModa(float[] numeros) {
    // Utilizamos un mapa para almacenar la frecuencia de cada número
    Map<Float, Integer> frecuenciaMapa = new HashMap<>();

    // Calcular la frecuencia de cada número
    for (float numero : numeros) {
        frecuenciaMapa.put(numero, frecuenciaMapa.getOrDefault(numero, 0) + 1);
    }

    // Encontrar el número con la frecuencia máxima
    double moda = 0;
    int frecuenciaMaxima = 0;

    for (Map.Entry<Float, Integer> entry : frecuenciaMapa.entrySet()) {
        float numero = entry.getKey();
        int frecuencia = entry.getValue();

        if (frecuencia > frecuenciaMaxima) {
            moda = numero;
            frecuenciaMaxima = frecuencia;
        }
    }

    return moda;
}
    
    public static float[] convertirCadenaAArray(String numerosString) {
    String[] numerosStringArray = numerosString.split(",");
    float[] numeros = new float[numerosStringArray.length];

    for (int i = 0; i < numerosStringArray.length; i++) {
        numeros[i] = Float.parseFloat(numerosStringArray[i]);
    }

    return numeros;
}
public static double[] convertirStringADoubleArray(String cadena) {
    // Divide la cadena por comas y convierte cada elemento a double
    String[] numerosString = cadena.split(",");
    double[] numeros = new double[numerosString.length];

    for (int i = 0; i < numerosString.length; i++) {
        numeros[i] = Double.parseDouble(numerosString[i]);
    }

    return numeros;
}

   public static double calcularMediana(float[] numeros) {
    int n = numeros.length;
    if (n % 2 == 0) {
        // Si hay un número par de elementos, promediar los dos valores centrales
        int indice1 = n / 2 - 1;
        int indice2 = n / 2;
        return (numeros[indice1] + numeros[indice2]) / 2.0;
    } else {
        // Si hay un número impar de elementos, devolver el valor central
        int indiceCentral = n / 2;
        return numeros[indiceCentral];
    }
}

    
    public static String arregloTemporal="";
    public static String arregloNumeros="";

    public static String tituloGG="";
    public static String ejexGG="";
    public static String ejeyGG="";
    public static String tituloxGG="";
    public static String tituloyGG="";
    public static String labelGG="";
    public static String valuesGG="";
   
    public static String obtenerValor(LinkedList<ts> lista, String nombreBuscado) {
        for (ts item : lista) {
            if (item.getNombre().equals(nombreBuscado)) {
                return item.getValor();
            }
        }
        return null; // Retorna null si no se encuentra el nodo
    }





    public void syntax_error(Symbol s)
    {
        //System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
        Error_ nuevoError = new Error_(s.left,s.right,"No se esperaba el siguiente token: "+s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
        Error_ nuevoError = new Error_(s.left,s.right,"No se esperaba el siguiente token: "+s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }
 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analizador_sintactico$actions {
  private final analizador_sintactico parser;

  /** Constructor */
  CUP$analizador_sintactico$actions(analizador_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action_part00000000(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analizador_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador_sintactico$parser.done_parsing();
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= cod 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= cod codigo 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cod ::= primitivas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cod ::= arreglos 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cod ::= print 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cod ::= graficas 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cod",2, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo ::= RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO 
            {
              Object RESULT =null;
		RESULT="CHAR[]";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= RESERVADA_DOUBLE 
            {
              Object RESULT =null;
		RESULT="DOUBLE";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dospuntos ::= DOS_PUNTOS DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("dospuntos",8, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // contenidoVariable ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=n.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenidoVariable ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenidoVariable ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenidoVariable ::= aritmeticas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=a.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // contenidoVariable ::= estadisticas 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=e.toString();
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoVariable",9, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaValores ::= CORCHETE_IZQUIERDO cuerpoLista CORCHETE_DERECHO 
            {
              Object RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		arregloNumeros=arregloTemporal;
                System.out.println(" arrS:"+arregloTemporal+" arrN:"+arregloNumeros);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("listaValores",13, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpoLista ::= STRING COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpoLista ::= NUMEROS COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpoLista ::= ID COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpoLista ::= aritmeticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpoLista ::= estadisticas COMA cuerpoLista 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		arregloTemporal=c.toString()+","+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpoLista ::= STRING 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpoLista ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpoLista ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=obtenerValor(gui.listaSimbolos,(String) c)+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpoLista ::= aritmeticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpoLista ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		arregloTemporal=c.toString()+arregloTemporal;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoLista",12, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitivas ::= RESERVADA_VAR DOS_PUNTOS tipo dospuntos ID MENOR_QUE GUION contenidoVariable RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                ts news = new ts(id.toString(),c.toString(),"Variable tipo "+t.toString(),cleft,cright);
                gui.listaSimbolos.add(news);
                
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("primitivas",3, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // arreglos ::= RESERVADA_ARRAY DOS_PUNTOS tipo dospuntos IDE MENOR_QUE GUION listaValores RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)).value;
		int ideleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object lv = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
                //arregloTemporal="["+arregloTemporal+"]";
                //arregloNumeros=arregloTemporal;
                ts news = new ts(ide.toString(),arregloTemporal,"Array tipo "+t.toString(),lvleft,lvright);
                gui.listaSimbolos.add(news);
                arregloTemporal="";
            
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("arreglos",4, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // aritmeticas ::= suma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // aritmeticas ::= resta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // aritmeticas ::= multiplicacion 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // aritmeticas ::= division 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // aritmeticas ::= modulo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=r;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("aritmeticas",10, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // suma ::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n");
  RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("suma",21, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // resta ::= RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n");
    RESULT=r; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("resta",22, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // multiplicacion ::= RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
  RESULT=r;  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("multiplicacion",23, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // division ::= RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("division",24, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // modulo ::= RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n");
  RESULT=r;   
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("modulo",25, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoAnidada ::= RESERVADA_SUMA 
            {
              Object RESULT =null;
		RESULT="suma";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoAnidada ::= RESERVADA_RESTA 
            {
              Object RESULT =null;
		RESULT="resta";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipoAnidada ::= RESERVADA_MULTIPLICACION 
            {
              Object RESULT =null;
		RESULT="multiplicacion";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoAnidada ::= RESERVADA_DIVISION 
            {
              Object RESULT =null;
		RESULT="division";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoAnidada ::= RESERVADA_MODULO 
            {
              Object RESULT =null;
		RESULT="modulo";
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tipoAnidada",27, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valorAritmetico ::= NUMEROS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT= c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorAritmetico ::= ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valorAritmetico ::= anidacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorAritmetico ::= estadisticas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT=c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorAritmetico",26, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // anidacion ::= tipoAnidada PARENTESIS_IZQUIERDO valorAritmetico COMA valorAritmetico PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object to = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("anidacion",28, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // estadisticas ::= media 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estadisticas ::= mediana 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estadisticas ::= moda 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estadisticas ::= varianza 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estadisticas ::= max 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // estadisticas ::= min 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=c;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("estadisticas",11, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidoE ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidoE ::= IDE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=obtenerValor(gui.listaSimbolos,(String) c);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("contenidoE",20, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // media ::= RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 
       
        if(arregloTemporal.length()==0){
            float[] numeros=convertirCadenaAArray(c.toString());
            double media =calcularMedia(numeros);
            RESULT=media;
        }else{
            float[] numeros=convertirCadenaAArray(arregloTemporal);
            double media =calcularMedia(numeros);
            RESULT=media;
            arregloTemporal="";
            arregloNumeros="";
        }
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("media",14, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mediana ::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
        } else {
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            Arrays.sort(numeros);
            double mediana = calcularMediana(numeros);
            RESULT=mediana;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("mediana",15, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // moda ::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
 
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            double moda = calcularModa(numeros);
            RESULT=moda;
        } else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            double moda = calcularModa(numeros);
            RESULT=moda;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("moda",16, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // varianza ::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
    
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            double varianza = calcularVarianza(numeros);
            RESULT=varianza;
        } else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            double varianza = calcularVarianza(numeros);
            RESULT=varianza;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("varianza",17, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // max ::= RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		

        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            float maximo = calcularMaximo(numeros);
            RESULT=maximo;
        }else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            float maximo = calcularMaximo(numeros);
            RESULT=maximo;
            arregloTemporal="";
            arregloNumeros="";
        }

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("max",18, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // min ::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE PARENTESIS_DERECHO 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		
        
        if(arregloTemporal.length()==0){
            float[] numeros = convertirCadenaAArray(c.toString());
            float minimo = calcularMinimo(numeros);
            RESULT=minimo;
        }else{
            float[] numeros = convertirCadenaAArray(arregloTemporal);
            float minimo = calcularMinimo(numeros);
            RESULT=minimo;
            arregloTemporal="";
            arregloNumeros="";
        }      

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("min",19, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // print ::= RESERVADA_CONSOLE DOS_PUNTOS DOS_PUNTOS desicionprint 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print",5, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // desicionprint ::= print1 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // desicionprint ::= print2 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("desicionprint",29, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // print1 ::= RESERVADA_PRINT SIGNO_IGUAL valorPrint RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int e4left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).right;
		Object e5 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int e7left = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int e7right = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object e7 = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 
        
String cuer = s.toString().replace("\"", "");
        System.out.println("\n"+"Print desde el cup de la cadena: " + cuer+"\n");
        gui.listaPrint.add(cuer);
    
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print1",30, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // valorPrint ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // valorPrint ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // valorPrint ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // valorPrint ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // valorPrint ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valorPrint ::= combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valorPrint",31, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // combinado ::= combinacion combinado 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + cc.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // combinado ::= combinacion 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // combinado ::= combinacion comb 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = c.toString() + r.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinado",32, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // combinacion ::= STRING COMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = s.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // combinacion ::= NUMEROS COMA 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = n.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // combinacion ::= aritmeticas COMA 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = ar.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // combinacion ::= estadisticas COMA 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = st.toString()+","; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // combinacion ::= ID COMA 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd)+",";  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("combinacion",33, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comb ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = s; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comb ::= ID 
            {
              Object RESULT =null;
		int idddleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idddright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object iddd = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comb ::= aritmeticas 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = ar; 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comb ::= estadisticas 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = st.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comb ::= NUMEROS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = n.toString(); 
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("comb",34, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // print2 ::= RESERVADA_COLUMN SIGNO_IGUAL pp GUION MAYOR_QUE ppp RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        String cuerpo;
        if(c==null){
            if (arregloTemporal.startsWith("\"")) {         //Char
               cuerpo = arregloTemporal.replaceAll("[\",]", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =arregloTemporal.replaceAll(",", "\n");
            }
        }else{
            if (c.toString().startsWith("\"")) {         //Char
               cuerpo = c.toString().replaceAll("\"", "").replace(",", "\n");
            } else {                                        //Double
               cuerpo =c.toString().replaceAll(",", "\n");
            }
        }
        int longitud = t.toString().length();
        String lin = "=".repeat(longitud);

        String tit = t.toString().replace("\"", "");
        cuerpo=lin+"\n"+tit+"\n"+lin+"\n"+cuerpo;
        System.out.println("\n"+"Print desde el cup de la cadena: " + cuerpo+"\n");
        gui.listaPrint.add((String) cuerpo); 
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("print2",35, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // pp ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		RESULT=s;
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // pp ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pp",36, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ppp ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.peek()).value;
		 RESULT = obtenerValor(gui.listaSimbolos,(String) id);
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ppp ::= listaValores 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ppp",37, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // graficas ::= pie 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // graficas ::= barras 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // graficas ::= linea 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // graficas ::= histograma 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("graficas",6, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencias ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencias ::= ejexG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencias ::= ejeyG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencias ::= tituloxG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sentencias ::= tituloyG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",42, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sentencias2 ::= labelG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sentencias2 ::= valuesG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencias2 ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias2",43, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentencias3 ::= tituloG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias3",44, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentencias3 ::= valuesG 
            {
              Object RESULT =null;

              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("sentencias3",44, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tituloG ::= RESERVADA_TITULO_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          tituloGG=t.toString();
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloG",49, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ejexG ::= RESERVADA_EJEX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        if(ex==null){
        ejexGG=arregloTemporal;
        } else{
        ejexGG=ex.toString();
        }
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejexG",45, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ejeyG ::= RESERVADA_EJEY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_DOUBLE SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
        if(ey==null){
        ejeyGG=arregloTemporal;
        } else{
        ejeyGG=ey.toString();
        }
        arregloTemporal="";
        arregloNumeros="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("ejeyG",46, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tituloxG ::= RESERVADA_TITULOX_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
           tituloxGG=x.toString();
           
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloxG",47, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tituloyG ::= RESERVADA_TITULOY_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
           tituloyGG=y.toString();
            
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("tituloyG",48, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // labelG ::= RESRVADA_LABEL_GRAFICA DOS_PUNTOS DOS_PUNTOS RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          if(ex==null){
             labelGG=arregloTemporal;
          } else{
             labelGG=ex.toString();
          }
          arregloTemporal="";
          arregloNumeros="";
         
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("labelG",50, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valuesG ::= RESERVADA_VALUES_GRAFICA DOS_PUNTOS DOS_PUNTOS tipo SIGNO_IGUAL contenidoE RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int eyleft = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).left;
		int eyright = ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).right;
		Object ey = (Object)((java_cup.runtime.Symbol) CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-2)).value;
		
          if(ey==null){
             valuesGG=arregloTemporal;
          } else{
             valuesGG=ey.toString();
          }
          arregloTemporal="";
          arregloNumeros="";
          
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("valuesG",51, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // barras ::= RESERVADA_GRAFICA_BARRA PARENTESIS_IZQUIERDO sentencias sentencias sentencias sentencias sentencias RESERVADA_EXEC RESERVADA_GRAFICA_BARRA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        String[] categorias = ejexGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(ejeyGG);
        
        ImageCreator.createBarChartImage(categorias,valores,tituloGG,tituloxGG,tituloyGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        ejexGG="";
        ejeyGG="";
        tituloxGG="";
        tituloyGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("barras",39, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pie ::= RESERVADA_GRAFICA_PIE PARENTESIS_IZQUIERDO sentencias2 sentencias2 sentencias2 RESERVADA_EXEC RESERVADA_GRAFICA_PIE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		
        String[] categorias = labelGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(valuesGG);

        ImageCreator.createPieChartImage(categorias,valores,tituloGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        valuesGG="";
        labelGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("pie",38, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // linea ::= RESERVADA_GRAFICA_LINE PARENTESIS_IZQUIERDO sentencias sentencias sentencias sentencias sentencias RESERVADA_EXEC RESERVADA_GRAFICA_LINE RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		

        String[] categorias = ejexGG.replaceAll("\"", "").split(",");
        double[] valores = convertirStringADoubleArray(ejeyGG);
        
        ImageCreator.createLineChartImage(categorias,valores,tituloGG,tituloxGG,tituloyGG);
        arregloTemporal="";
        arregloNumeros="";
        tituloGG="";
        ejexGG="";
        ejeyGG="";
        tituloxGG="";
        tituloyGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("linea",40, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-13)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // histograma ::= RESERVADA_GRAFIA_HISTOGRAMA PARENTESIS_IZQUIERDO sentencias3 sentencias3 RESERVADA_EXEC RESERVADA_GRAFIA_HISTOGRAMA RESERVADA_END PUNTO_Y_COMA PARENTESIS_DERECHO RESERVADA_END PUNTO_Y_COMA 
            {
              Object RESULT =null;
		  
         double[] valores;
         System.out.println(valuesGG);
         valores = convertirStringADoubleArray(valuesGG);
  
         int[] arregloInt = new int[valores.length];

         for (int i = 0; i < valores.length; i++) {
            String valorComoCadena = Double.toString(valores[i]).replace(".", "");
            arregloInt[i] = Integer.parseInt(valorComoCadena);
        }
        
        ImageCreator.createHistogramImage(arregloInt,tituloGG);
        String tit = tituloGG.replace("\"", "");
        String r="\n                                "+tit+"\n";
        r=r+"============================================="+"\n";
        r=r+"Valor                  Fb                      Fa                      Fr"+"\n";
        r=r+"============================================="+"\n";
        double[] sinR = obtenerArregloSinRepetidos(valores);
        int[] frec = obtenerFrecuencia(valores);
        //int[] arreg = convertirDoubleAInt(valores);
        int[] frecA = obtenerFrecuenciaAcumulada(frec);
        double[] frecR = obtenerFrecuenciaRelativa(frec, valores.length);
        r =r+concatenarArreglos(sinR, frec, frecA, frecR);
        int up = frecA.length - 1;
        int upp = frecA[up];
        r=r+"============================================="+"\n";
        r=r+"Totales              "+upp+"                       "+upp+"                         100%"+"\n";
        r=r+"============================================="+"\n";

        System.out.println("\n"+"Print desde el cup de la cadena: " + r+"\n");
        gui.listaPrint.add((String) r); 

        arregloTemporal="";
        arregloNumeros="";
        valuesGG="";
        tituloGG="";
        
              CUP$analizador_sintactico$result = parser.getSymbolFactory().newSymbol("histograma",41, ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.elementAt(CUP$analizador_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analizador_sintactico$stack.peek()), RESULT);
            }
          return CUP$analizador_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analizador_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analizador_sintactico$do_action(
    int                        CUP$analizador_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analizador_sintactico$parser,
    java.util.Stack            CUP$analizador_sintactico$stack,
    int                        CUP$analizador_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analizador_sintactico$do_action_part00000000(
                               CUP$analizador_sintactico$act_num,
                               CUP$analizador_sintactico$parser,
                               CUP$analizador_sintactico$stack,
                               CUP$analizador_sintactico$top);
    }
}

}
