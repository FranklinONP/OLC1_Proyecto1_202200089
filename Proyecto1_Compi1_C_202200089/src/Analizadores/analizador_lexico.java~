/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;

import Errores.Error_;
import Tokens.Token;
import static GUI.gui.lista_errores;
import static GUI.gui.listaTokens;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/analizador_lexico.jflex</tt>
 */
public class analizador_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 17,  3,  4,  4,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    17,  2, 18,  0,  0,  0,  0,  0, 10, 11,  0,  0,  8,  7, 16,  0, 
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  6,  9,  1, 14,  5,  0, 
    23, 22, 35, 36, 32, 30, 24, 28, 19, 40, 44, 24, 21, 29, 31, 20, 
    26, 24, 27, 38, 43, 34, 33, 24, 42, 45, 41, 12, 46, 13,  0, 25, 
     0, 22, 35, 36, 32, 30, 24, 28, 19, 40, 44, 24, 21, 29, 31, 20, 
    26, 24, 27, 38, 43, 34, 33, 24, 42, 45, 41,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\1\4\20\1\1\10\20\1\1\2\20\3\0\1\21"+
    "\2\0\3\20\1\0\7\20\1\0\5\20\1\0\4\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\17\1\21\1\0"+
    "\2\20\1\22\1\23\1\20\1\0\1\20\2\24\1\20"+
    "\1\25\1\26\1\20\1\27\2\30\1\31\3\20\2\32"+
    "\1\20\1\33\3\20\2\34\1\0\1\20\1\35\1\0"+
    "\3\20\1\0\2\20\1\36\1\0\1\20\1\37\1\40"+
    "\1\41\2\20\1\0\1\20\1\42\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\43\1\20\2\44\1\20"+
    "\2\45\2\20\1\0\2\20\1\0\1\20\1\0\1\20"+
    "\1\0\5\20\1\0\1\20\1\46\2\47\1\0\1\20"+
    "\1\50\1\0\1\20\2\51\1\0\1\20\1\52\1\0"+
    "\1\20\1\0\2\20\2\53\1\0\1\20\2\54\1\55"+
    "\1\56\1\55\1\56\1\0\1\20\1\0\1\20\2\57"+
    "\1\60\2\61\2\62\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\57\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u011a\0\57\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\u09bb\0\u0468\0\u011a\0\u09ea\0\u0a19\0\u0a48\0\u0178"+
    "\0\u0582\0\u0a77\0\u0aa6\0\u0ad5\0\57\0\u0178\0\u0b04\0\u0b33"+
    "\0\u0178\0\u0b62\0\u0178\0\57\0\u0178\0\u0178\0\u0b91\0\u0bc0"+
    "\0\u0bef\0\57\0\u0178\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda"+
    "\0\57\0\u0178\0\u0d09\0\u0d38\0\u0439\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0178\0\u0eb0\0\u0edf\0\u0178"+
    "\0\u0178\0\u0178\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0178\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u0178\0\u1113"+
    "\0\57\0\u0178\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d"+
    "\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5"+
    "\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u0178\0\57"+
    "\0\u0178\0\u14ee\0\u151d\0\u0178\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u0178\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722"+
    "\0\57\0\u0178\0\u1751\0\u1780\0\57\0\u0178\0\57\0\57"+
    "\0\u0178\0\u0178\0\u17af\0\u17de\0\u180d\0\u183c\0\57\0\u0178"+
    "\0\u0178\0\57\0\u0178\0\57\0\u0178\0\57\0\u0178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\2\23\1\27\1\30\1\31\1\32\1\33\1\23\1\34"+
    "\1\35\2\23\1\36\1\37\1\40\1\2\3\23\1\41"+
    "\2\23\1\2\61\0\1\42\54\0\3\4\2\0\52\4"+
    "\3\0\1\5\15\0\1\5\54\0\1\20\1\43\36\0"+
    "\22\44\1\45\33\44\1\46\17\0\1\23\3\0\4\23"+
    "\1\0\15\23\1\0\1\23\1\47\1\50\5\23\20\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\3\23\1\51\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\20\0\1\23\3\0\4\23"+
    "\1\0\3\23\1\52\11\23\1\0\1\23\1\0\6\23"+
    "\24\0\4\53\1\0\1\53\1\0\13\53\1\0\1\53"+
    "\1\0\6\53\20\0\1\23\3\0\4\23\1\0\3\23"+
    "\1\54\11\23\1\0\1\23\1\0\6\23\20\0\1\23"+
    "\3\0\4\23\1\0\6\23\1\55\6\23\1\0\1\23"+
    "\1\0\6\23\20\0\1\23\3\0\4\23\1\0\3\23"+
    "\1\56\11\23\1\0\1\23\1\0\6\23\20\0\1\23"+
    "\3\0\1\23\1\57\1\23\1\60\1\0\6\23\1\61"+
    "\3\23\1\62\2\23\1\0\1\23\1\63\1\64\5\23"+
    "\20\0\1\23\3\0\4\23\1\0\7\23\1\65\5\23"+
    "\1\0\1\23\1\0\2\23\1\66\1\23\1\67\1\23"+
    "\20\0\1\23\3\0\1\23\1\70\2\23\1\0\15\23"+
    "\1\0\1\23\1\71\1\72\5\23\20\0\1\23\3\0"+
    "\3\23\1\73\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\20\0\1\23\3\0\1\74\1\75\2\23\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\43\0\1\76\33\0\1\23"+
    "\3\0\4\23\1\0\12\23\1\77\2\23\1\0\1\23"+
    "\1\0\6\23\20\0\1\23\3\0\4\23\1\0\15\23"+
    "\1\0\1\23\1\100\1\101\5\23\1\0\2\42\1\102"+
    "\2\0\52\42\17\0\1\103\37\0\22\44\1\104\33\44"+
    "\1\46\45\0\2\105\27\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\105\1\106\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\13\23\1\107\1\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\3\23\1\110"+
    "\11\23\1\0\1\23\1\0\6\23\11\0\1\111\6\0"+
    "\1\111\3\0\4\111\1\0\15\111\1\0\1\111\1\0"+
    "\6\111\20\0\1\23\3\0\1\23\1\112\2\23\1\0"+
    "\15\23\1\0\1\23\1\113\1\114\5\23\20\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\115\1\116\1\0\6\23"+
    "\20\0\1\23\3\0\3\23\1\117\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\4\23\1\0"+
    "\10\23\1\120\4\23\1\0\1\23\1\0\6\23\20\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\0"+
    "\2\23\1\121\3\23\20\0\1\23\3\0\4\23\1\0"+
    "\10\23\1\122\4\23\1\0\1\23\1\0\6\23\20\0"+
    "\1\23\3\0\2\23\1\123\1\23\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\40\0\1\124\36\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\125\5\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\10\23\1\126"+
    "\4\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\6\23\1\127\6\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\6\23\1\130"+
    "\6\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\12\23\1\131\2\23\1\0\1\23\1\0"+
    "\6\23\42\0\1\132\34\0\1\23\3\0\4\23\1\0"+
    "\11\23\1\133\3\23\1\0\1\23\1\0\6\23\20\0"+
    "\1\23\3\0\2\23\1\134\1\23\1\0\3\23\1\135"+
    "\11\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\3\23\1\136\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\20\0\1\23\3\0\2\23\1\137\1\23\1\0\7\23"+
    "\1\140\5\23\1\0\1\23\1\0\6\23\36\0\1\141"+
    "\40\0\1\23\3\0\4\23\1\0\5\23\1\142\7\23"+
    "\1\0\1\23\1\0\6\23\54\0\1\143\22\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\0\1\23\1\0\3\23"+
    "\1\144\2\23\1\0\2\42\1\102\2\0\1\145\51\42"+
    "\53\0\1\146\22\0\1\23\3\0\4\23\1\0\15\23"+
    "\1\0\1\23\1\0\3\23\1\147\2\23\20\0\1\23"+
    "\3\0\4\23\1\0\6\23\1\150\6\23\1\0\1\23"+
    "\1\0\6\23\20\0\1\23\3\0\4\23\1\0\4\23"+
    "\1\151\10\23\1\0\1\23\1\0\6\23\40\0\1\152"+
    "\36\0\1\23\3\0\4\23\1\0\7\23\1\153\5\23"+
    "\1\0\1\23\1\0\6\23\20\0\1\23\3\0\4\23"+
    "\1\0\2\23\1\154\12\23\1\0\1\23\1\0\6\23"+
    "\20\0\1\23\3\0\3\23\1\155\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\0\1\23\1\156\1\157\5\23\20\0\1\23"+
    "\3\0\4\23\1\0\14\23\1\160\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\15\23\1\0"+
    "\1\23\1\0\2\23\1\161\2\23\1\162\20\0\1\23"+
    "\3\0\4\23\1\0\13\23\1\163\1\23\1\0\1\23"+
    "\1\0\6\23\20\0\1\23\3\0\4\23\1\0\12\23"+
    "\1\164\2\23\1\0\1\23\1\0\6\23\20\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\0\1\23\1\165\1\166"+
    "\5\23\20\0\1\23\3\0\4\23\1\0\3\23\1\167"+
    "\11\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\12\23\1\170\2\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\15\23\1\171"+
    "\1\172\1\0\6\23\43\0\1\173\33\0\1\23\3\0"+
    "\4\23\1\0\12\23\1\174\2\23\1\0\1\23\1\0"+
    "\6\23\25\0\1\175\51\0\1\23\3\0\1\23\1\176"+
    "\2\23\1\0\15\23\1\0\1\23\1\0\6\23\20\0"+
    "\1\23\3\0\2\23\1\177\1\23\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\4\23\1\0"+
    "\3\23\1\200\11\23\1\0\1\23\1\0\6\23\54\0"+
    "\1\201\22\0\1\23\3\0\4\23\1\0\15\23\1\0"+
    "\1\23\1\0\3\23\1\202\2\23\20\0\1\23\3\0"+
    "\1\203\3\23\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\27\0\1\204\47\0\1\23\3\0\3\23\1\205\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\2\23\1\206\1\23\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\6\23\1\207"+
    "\6\23\1\0\1\23\1\0\6\23\27\0\1\210\47\0"+
    "\1\23\3\0\3\23\1\211\1\0\15\23\1\0\1\23"+
    "\1\0\6\23\20\0\1\23\3\0\4\23\1\0\5\23"+
    "\1\212\7\23\1\0\1\23\1\0\6\23\25\0\1\213"+
    "\51\0\1\23\3\0\1\23\1\214\2\23\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\26\0\1\215\50\0\1\23"+
    "\3\0\2\23\1\216\1\23\1\0\15\23\1\0\1\23"+
    "\1\0\6\23\35\0\1\217\41\0\1\23\3\0\4\23"+
    "\1\0\4\23\1\220\10\23\1\0\1\23\1\0\6\23"+
    "\20\0\1\23\3\0\3\23\1\221\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\2\23\1\222"+
    "\1\23\1\0\2\23\1\223\10\23\1\224\1\23\1\0"+
    "\1\23\1\0\6\23\40\0\1\225\36\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\226\5\23\1\0\1\23\1\0"+
    "\6\23\20\0\1\23\3\0\4\23\1\0\6\23\1\227"+
    "\6\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\15\23\1\230\1\231\1\0\6\23\40\0"+
    "\1\232\36\0\1\23\3\0\4\23\1\0\7\23\1\233"+
    "\5\23\1\0\1\23\1\0\6\23\20\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\234\5\23\1\0\1\23\1\0"+
    "\6\23\26\0\1\235\50\0\1\23\3\0\2\23\1\236"+
    "\1\23\1\0\15\23\1\0\1\23\1\0\6\23\25\0"+
    "\1\237\51\0\1\23\3\0\1\23\1\240\2\23\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\34\0\1\241\42\0"+
    "\1\23\3\0\4\23\1\0\3\23\1\242\11\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\4\23\1\0"+
    "\5\23\1\243\7\23\1\0\1\23\1\0\6\23\20\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\244"+
    "\1\245\5\23\20\0\1\23\3\0\4\23\1\0\15\23"+
    "\1\0\1\23\1\246\1\247\5\23\20\0\1\23\3\0"+
    "\3\23\1\250\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\27\0\1\251\47\0\1\23\3\0\3\23\1\252\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\52\0\1\253\24\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\0"+
    "\1\23\1\254\4\23\37\0\1\255\37\0\1\23\3\0"+
    "\4\23\1\0\6\23\1\256\6\23\1\0\1\23\1\0"+
    "\6\23\53\0\1\257\2\0\1\260\20\0\1\23\3\0"+
    "\4\23\1\0\15\23\1\0\1\23\1\0\2\23\1\261"+
    "\2\23\1\262\27\0\1\263\47\0\1\23\3\0\3\23"+
    "\1\264\1\0\15\23\1\0\1\23\1\0\6\23\40\0"+
    "\1\265\36\0\1\23\3\0\4\23\1\0\7\23\1\266"+
    "\5\23\1\0\1\23\1\0\6\23\37\0\1\267\37\0"+
    "\1\23\3\0\4\23\1\0\6\23\1\270\6\23\1\0"+
    "\1\23\1\0\6\23\20\0\1\23\3\0\4\23\1\0"+
    "\3\23\1\271\11\23\1\0\1\23\1\0\6\23\27\0"+
    "\1\272\47\0\1\23\3\0\3\23\1\273\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\36\0\1\274\40\0\1\23"+
    "\3\0\4\23\1\0\5\23\1\275\7\23\1\0\1\23"+
    "\1\0\6\23\37\0\1\276\37\0\1\23\3\0\4\23"+
    "\1\0\6\23\1\277\6\23\1\0\1\23\1\0\6\23"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6251];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\12\11\22\1\3\0\1\11\2\0"+
    "\3\1\1\0\7\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\5\1\1\0"+
    "\1\1\1\11\6\1\1\11\5\1\1\11\6\1\1\11"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\1\1\1\0\1\1\1\0"+
    "\3\1\1\11\6\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\5\1\1\0\2\1\1\11\1\1\1\0"+
    "\2\1\1\0\3\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\1\0\1\1\1\11\1\1\2\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public analizador_lexico(java.io.Reader in) {
      yyline=1;
    yychar=1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Error_ nuevoError = new Error_(yyline,yycolumn,yytext(),true);
    lista_errores.add(nuevoError);
            } 
            // fall through
          case 52: break;
          case 2: 
            { System.out.println("Lexema -Menor que- "+yytext()) ; return new Symbol(sym.MENOR_QUE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 53: break;
          case 3: 
            { System.out.println("Comentario 1 linea");
            } 
            // fall through
          case 54: break;
          case 4: 
            { 
            } 
            // fall through
          case 55: break;
          case 5: 
            { System.out.println("Lexema -Mayor que- "+yytext()) ; return new Symbol(sym.MAYOR_QUE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 56: break;
          case 6: 
            { System.out.println("Lexema -Dos Puntos- "+yytext()) ; return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 57: break;
          case 7: 
            { System.out.println("Lexema -Guion- "+yytext()) ; return new Symbol(sym.GUION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 58: break;
          case 8: 
            { System.out.println("Lexema -Coma "+yytext()) ; return new Symbol(sym.COMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 59: break;
          case 9: 
            { System.out.println("Lexema -Punto y coma- "+yytext()) ; return new Symbol(sym.PUNTO_Y_COMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 60: break;
          case 10: 
            { System.out.println("Lexema -Parentesis izquierdo- "+yytext()) ; return new Symbol(sym.PARENTESIS_IZQUIERDO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 61: break;
          case 11: 
            { System.out.println("Lexema -Parentesis derecho- "+yytext()) ; return new Symbol(sym.PARENTESIS_DERECHO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 62: break;
          case 12: 
            { System.out.println("Lexema -Corchete izquierdo- "+yytext()) ; return new Symbol(sym.CORCHETE_IZQUIERDO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 63: break;
          case 13: 
            { System.out.println("Lexema -Corchete derecho- "+yytext()) ; return new Symbol(sym.CORCHETE_DERECHO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 64: break;
          case 14: 
            { System.out.println("Lexema -Signo igual- "+yytext()) ; return new Symbol(sym.SIGNO_IGUAL, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 65: break;
          case 15: 
            { Token ntk = new Token(yyline,yycolumn,yytext(),"Double");listaTokens.add(ntk) ; return new Symbol(sym.NUMEROS, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 66: break;
          case 16: 
            { System.out.println("Se encontro un IDENTIFICADOR ->> Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.ID, yytext());
            } 
            // fall through
          case 67: break;
          case 17: 
            { System.out.println("Se encontro una cadena CHAR Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()); return new Symbol(sym.STRING, yytext());
            } 
            // fall through
          case 68: break;
          case 18: 
            { System.out.println("Palabra Reservada: ARRAY, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_ARRAY, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 69: break;
          case 19: 
            { System.out.println("Se encontro ID de array Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.IDE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 70: break;
          case 20: 
            { System.out.println("Palabra Reservada: RESTA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_RESTA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 71: break;
          case 21: 
            { System.out.println("Palabra Reservada: MODULO, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MODULO, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 72: break;
          case 22: 
            { System.out.println("Palabra Reservada: MAX, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MAX, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 73: break;
          case 23: 
            { System.out.println("Palabra Reservada: MULTIPLICACION, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MULTIPLICACION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 74: break;
          case 24: 
            { System.out.println("Palabra Reservada: MIN, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MIN, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 75: break;
          case 25: 
            { System.out.println("Palabra Reservada: END, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_END, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 76: break;
          case 26: 
            { System.out.println("Palabra Reservada: DIVISION, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_DIVISION, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 77: break;
          case 27: 
            { System.out.println("Palabra Reservada: VAR, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_VAR, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 78: break;
          case 28: 
            { System.out.println("Palabra Reservada: SUMA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_SUMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 79: break;
          case 29: 
            { System.out.println("Comentario multilinea");
            } 
            // fall through
          case 80: break;
          case 30: 
            { System.out.println("Palabra Reservada: MODA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MODA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 81: break;
          case 31: 
            { System.out.println("Palabra Reservada: EXEC, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_EXEC, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 82: break;
          case 32: 
            { System.out.println("Palabra Reservada: EJEX_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_EJEX_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 83: break;
          case 33: 
            { System.out.println("Palabra Reservada: EJEY_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_EJEY_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 84: break;
          case 34: 
            { System.out.println("Palabra Reservada: CHAR, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_CHAR, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 85: break;
          case 35: 
            { System.out.println("Palabra Reservada: LABEL_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESRVADA_LABEL_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 86: break;
          case 36: 
            { System.out.println("Palabra Reservada: PRINT, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_PRINT, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 87: break;
          case 37: 
            { System.out.println("Palabra Reservada: MEDIA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MEDIA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 88: break;
          case 38: 
            { System.out.println("Palabra Reservada: DOUBLE, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_DOUBLE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 89: break;
          case 39: 
            { System.out.println("Palabra Reservada: VALUES_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_VALUES_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 90: break;
          case 40: 
            { System.out.println("Palabra Reservada: COLUMN, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_COLUMN, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 91: break;
          case 41: 
            { System.out.println("Palabra Reservada: TITULO_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_TITULO_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 92: break;
          case 42: 
            { System.out.println("Palabra Reservada: PROGRAM, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_PROGRAM, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 93: break;
          case 43: 
            { System.out.println("Palabra Reservada: MEDIANA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_MEDIANA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 94: break;
          case 44: 
            { System.out.println("Palabra Reservada: CONSOLE, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_CONSOLE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 95: break;
          case 45: 
            { System.out.println("Palabra Reservada: TITULOX_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_TITULOX_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 96: break;
          case 46: 
            { System.out.println("Palabra Reservada: TITULOY_GRAFICA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_TITULOY_GRAFICA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 97: break;
          case 47: 
            { System.out.println("Palabra Reservada: GRAFICA_PIE, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_PIE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 98: break;
          case 48: 
            { System.out.println("Palabra Reservada: GRAFICA_BARRA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_BARRA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 99: break;
          case 49: 
            { System.out.println("Palabra Reservada: VARIANZA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_VARIANZA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 100: break;
          case 50: 
            { System.out.println("Palabra Reservada: GRAFIA_HISTOGRAMA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_GRAFIA_HISTOGRAMA, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 101: break;
          case 51: 
            { System.out.println("Palabra Reservada: GRAFICA_LINEA, Fila: " + yyline + ", Columna: " + yycolumn + ", Texto: " + yytext()) ; return new Symbol(sym.RESERVADA_GRAFICA_LINE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
