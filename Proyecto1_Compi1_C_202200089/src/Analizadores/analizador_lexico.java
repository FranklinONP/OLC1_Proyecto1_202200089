/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;

import Errores.Error_;
import Errores.Token;
import static GUI.gui.lista_errores;
import static GUI.gui.listaTokens;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/analizador_lexico.jflex</tt>
 */
public class analizador_lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 18,  5,  6,  6,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    18,  2, 19,  0,  0,  0,  0,  0, 11, 12,  0,  0,  9,  8, 17,  3, 
    16, 16, 16, 16, 16, 16, 16, 16, 16, 16,  7, 10,  1, 15,  4,  0, 
    24, 23, 36, 37, 33, 31, 25, 29, 20, 41, 45, 25, 22, 30, 32, 21, 
    27, 25, 28, 39, 44, 35, 34, 25, 43, 46, 42, 13, 47, 14,  0, 26, 
     0, 23, 36, 37, 33, 31, 25, 29, 20, 41, 45, 25, 22, 30, 32, 21, 
    27, 25, 28, 39, 44, 35, 34, 25, 43, 46, 42,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\1\4\20\1\1\10\20\1\1\2\20\3\0\1\21"+
    "\2\0\3\20\1\0\7\20\1\0\5\20\1\0\4\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\17\1\21\1\0"+
    "\2\20\1\22\1\23\1\20\1\0\1\20\2\24\1\20"+
    "\1\25\1\26\1\20\1\27\2\30\1\31\3\20\2\32"+
    "\1\20\1\33\3\20\2\34\1\0\1\20\2\0\3\20"+
    "\1\0\2\20\1\35\1\0\1\20\1\36\1\37\1\40"+
    "\2\20\1\0\1\20\1\41\1\20\1\0\1\20\1\0"+
    "\1\20\1\42\1\0\1\20\1\43\1\20\2\44\1\20"+
    "\2\45\2\20\1\0\2\20\1\0\1\20\1\0\1\20"+
    "\1\0\5\20\1\0\1\20\1\46\2\47\1\0\1\20"+
    "\1\50\1\0\1\20\2\51\1\0\1\20\1\52\1\0"+
    "\1\20\1\0\2\20\2\53\1\0\1\20\2\54\1\55"+
    "\1\56\1\55\1\56\1\0\1\20\1\0\1\20\2\57"+
    "\1\60\2\61\2\62\2\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\60\0\300\0\60\0\60"+
    "\0\60\0\60\0\60\0\60\0\60\0\60\0\60\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u0120\0\60\0\u04b0\0\u04e0\0\u0510"+
    "\0\u0540\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810"+
    "\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0480\0\u0120\0\u0a20\0\u0a50\0\u0a80\0\u0180"+
    "\0\u05a0\0\u0ab0\0\u0ae0\0\u0b10\0\60\0\u0180\0\u0b40\0\u0b70"+
    "\0\u0180\0\u0ba0\0\u0180\0\60\0\u0180\0\u0180\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\60\0\u0180\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20"+
    "\0\60\0\u0180\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0180\0\u0f30\0\u0f60\0\u0180"+
    "\0\u0180\0\u0180\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u0180\0\u1050"+
    "\0\u1080\0\u10b0\0\u10e0\0\u1110\0\60\0\u1140\0\u1170\0\u0180"+
    "\0\u11a0\0\60\0\u0180\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410"+
    "\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0180"+
    "\0\60\0\u0180\0\u1590\0\u15c0\0\u0180\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u0180\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\60\0\u0180\0\u1800\0\u1830\0\60\0\u0180\0\60"+
    "\0\60\0\u0180\0\u0180\0\u1860\0\u1890\0\u18c0\0\u18f0\0\60"+
    "\0\u0180\0\u0180\0\60\0\u0180\0\60\0\u0180\0\60\0\u0180";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\0\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\2\1\6\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\23\1\27\1\30\1\31\1\32\1\33\1\23"+
    "\1\34\1\35\2\23\1\36\1\37\1\40\1\2\3\23"+
    "\1\41\2\23\1\2\62\0\1\42\55\0\5\4\2\0"+
    "\51\4\5\0\1\6\14\0\1\6\55\0\1\20\1\43"+
    "\36\0\23\44\1\45\33\44\1\46\20\0\1\23\3\0"+
    "\4\23\1\0\15\23\1\0\1\23\1\47\1\50\5\23"+
    "\21\0\1\23\3\0\4\23\1\0\15\23\1\0\1\23"+
    "\1\0\6\23\21\0\1\23\3\0\3\23\1\51\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\3\23\1\52\11\23\1\0\1\23\1\0"+
    "\6\23\25\0\4\53\1\0\1\53\1\0\13\53\1\0"+
    "\1\53\1\0\6\53\21\0\1\23\3\0\4\23\1\0"+
    "\3\23\1\54\11\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\6\23\1\55\6\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\4\23\1\0"+
    "\3\23\1\56\11\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\1\23\1\57\1\23\1\60\1\0\6\23"+
    "\1\61\3\23\1\62\2\23\1\0\1\23\1\63\1\64"+
    "\5\23\21\0\1\23\3\0\4\23\1\0\7\23\1\65"+
    "\5\23\1\0\1\23\1\0\2\23\1\66\1\23\1\67"+
    "\1\23\21\0\1\23\3\0\1\23\1\70\2\23\1\0"+
    "\15\23\1\0\1\23\1\71\1\72\5\23\21\0\1\23"+
    "\3\0\3\23\1\73\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\1\74\1\75\2\23\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\44\0\1\76\34\0"+
    "\1\23\3\0\4\23\1\0\12\23\1\77\2\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\0\1\23\1\100\1\101\5\23\1\0\3\102"+
    "\1\0\54\102\20\0\1\103\37\0\23\44\1\104\33\44"+
    "\1\46\46\0\2\105\30\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\105\1\106\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\13\23\1\107\1\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\3\23\1\110"+
    "\11\23\1\0\1\23\1\0\6\23\12\0\1\111\6\0"+
    "\1\111\3\0\4\111\1\0\15\111\1\0\1\111\1\0"+
    "\6\111\21\0\1\23\3\0\1\23\1\112\2\23\1\0"+
    "\15\23\1\0\1\23\1\113\1\114\5\23\21\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\115\1\116\1\0\6\23"+
    "\21\0\1\23\3\0\3\23\1\117\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\4\23\1\0"+
    "\10\23\1\120\4\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\0"+
    "\2\23\1\121\3\23\21\0\1\23\3\0\4\23\1\0"+
    "\10\23\1\122\4\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\2\23\1\123\1\23\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\41\0\1\124\37\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\125\5\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\10\23\1\126"+
    "\4\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\6\23\1\127\6\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\6\23\1\130"+
    "\6\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\12\23\1\131\2\23\1\0\1\23\1\0"+
    "\6\23\43\0\1\132\35\0\1\23\3\0\4\23\1\0"+
    "\11\23\1\133\3\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\2\23\1\134\1\23\1\0\3\23\1\135"+
    "\11\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\3\23\1\136\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\21\0\1\23\3\0\2\23\1\137\1\23\1\0\7\23"+
    "\1\140\5\23\1\0\1\23\1\0\6\23\37\0\1\141"+
    "\41\0\1\23\3\0\4\23\1\0\5\23\1\142\7\23"+
    "\1\0\1\23\1\0\6\23\55\0\1\143\23\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\0\1\23\1\0\3\23"+
    "\1\144\2\23\1\0\2\102\1\145\55\102\54\0\1\146"+
    "\23\0\1\23\3\0\4\23\1\0\15\23\1\0\1\23"+
    "\1\0\3\23\1\147\2\23\21\0\1\23\3\0\4\23"+
    "\1\0\6\23\1\150\6\23\1\0\1\23\1\0\6\23"+
    "\21\0\1\23\3\0\4\23\1\0\4\23\1\151\10\23"+
    "\1\0\1\23\1\0\6\23\41\0\1\152\37\0\1\23"+
    "\3\0\4\23\1\0\7\23\1\153\5\23\1\0\1\23"+
    "\1\0\6\23\21\0\1\23\3\0\4\23\1\0\2\23"+
    "\1\154\12\23\1\0\1\23\1\0\6\23\21\0\1\23"+
    "\3\0\3\23\1\155\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\15\23\1\0"+
    "\1\23\1\156\1\157\5\23\21\0\1\23\3\0\4\23"+
    "\1\0\14\23\1\160\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\0\1\23\1\0"+
    "\2\23\1\161\2\23\1\162\21\0\1\23\3\0\4\23"+
    "\1\0\13\23\1\163\1\23\1\0\1\23\1\0\6\23"+
    "\21\0\1\23\3\0\4\23\1\0\12\23\1\164\2\23"+
    "\1\0\1\23\1\0\6\23\21\0\1\23\3\0\4\23"+
    "\1\0\15\23\1\0\1\23\1\165\1\166\5\23\21\0"+
    "\1\23\3\0\4\23\1\0\3\23\1\167\11\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\4\23\1\0"+
    "\12\23\1\170\2\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\15\23\1\171\1\172\1\0"+
    "\6\23\44\0\1\173\34\0\1\23\3\0\4\23\1\0"+
    "\12\23\1\174\2\23\1\0\1\23\1\0\6\23\1\0"+
    "\2\102\1\145\1\102\1\175\53\102\25\0\1\176\52\0"+
    "\1\23\3\0\1\23\1\177\2\23\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\2\23\1\200"+
    "\1\23\1\0\15\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\3\23\1\201\11\23\1\0"+
    "\1\23\1\0\6\23\55\0\1\202\23\0\1\23\3\0"+
    "\4\23\1\0\15\23\1\0\1\23\1\0\3\23\1\203"+
    "\2\23\21\0\1\23\3\0\1\204\3\23\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\30\0\1\205\50\0\1\23"+
    "\3\0\3\23\1\206\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\2\23\1\207\1\23\1\0"+
    "\15\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\6\23\1\210\6\23\1\0\1\23\1\0"+
    "\6\23\30\0\1\211\50\0\1\23\3\0\3\23\1\212"+
    "\1\0\15\23\1\0\1\23\1\0\6\23\21\0\1\23"+
    "\3\0\4\23\1\0\5\23\1\213\7\23\1\0\1\23"+
    "\1\0\6\23\26\0\1\214\52\0\1\23\3\0\1\23"+
    "\1\215\2\23\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\27\0\1\216\51\0\1\23\3\0\2\23\1\217\1\23"+
    "\1\0\15\23\1\0\1\23\1\0\6\23\36\0\1\220"+
    "\42\0\1\23\3\0\4\23\1\0\4\23\1\221\10\23"+
    "\1\0\1\23\1\0\6\23\21\0\1\23\3\0\3\23"+
    "\1\222\1\0\15\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\2\23\1\223\1\23\1\0\2\23\1\224"+
    "\10\23\1\225\1\23\1\0\1\23\1\0\6\23\41\0"+
    "\1\226\37\0\1\23\3\0\4\23\1\0\7\23\1\227"+
    "\5\23\1\0\1\23\1\0\6\23\21\0\1\23\3\0"+
    "\4\23\1\0\6\23\1\230\6\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\15\23\1\231"+
    "\1\232\1\0\6\23\41\0\1\233\37\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\234\5\23\1\0\1\23\1\0"+
    "\6\23\21\0\1\23\3\0\4\23\1\0\7\23\1\235"+
    "\5\23\1\0\1\23\1\0\6\23\27\0\1\236\51\0"+
    "\1\23\3\0\2\23\1\237\1\23\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\26\0\1\240\52\0\1\23\3\0"+
    "\1\23\1\241\2\23\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\35\0\1\242\43\0\1\23\3\0\4\23\1\0"+
    "\3\23\1\243\11\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\5\23\1\244\7\23\1\0"+
    "\1\23\1\0\6\23\21\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\0\1\23\1\245\1\246\5\23\21\0\1\23"+
    "\3\0\4\23\1\0\15\23\1\0\1\23\1\247\1\250"+
    "\5\23\21\0\1\23\3\0\3\23\1\251\1\0\15\23"+
    "\1\0\1\23\1\0\6\23\30\0\1\252\50\0\1\23"+
    "\3\0\3\23\1\253\1\0\15\23\1\0\1\23\1\0"+
    "\6\23\53\0\1\254\25\0\1\23\3\0\4\23\1\0"+
    "\15\23\1\0\1\23\1\0\1\23\1\255\4\23\40\0"+
    "\1\256\40\0\1\23\3\0\4\23\1\0\6\23\1\257"+
    "\6\23\1\0\1\23\1\0\6\23\54\0\1\260\2\0"+
    "\1\261\21\0\1\23\3\0\4\23\1\0\15\23\1\0"+
    "\1\23\1\0\2\23\1\262\2\23\1\263\30\0\1\264"+
    "\50\0\1\23\3\0\3\23\1\265\1\0\15\23\1\0"+
    "\1\23\1\0\6\23\41\0\1\266\37\0\1\23\3\0"+
    "\4\23\1\0\7\23\1\267\5\23\1\0\1\23\1\0"+
    "\6\23\40\0\1\270\40\0\1\23\3\0\4\23\1\0"+
    "\6\23\1\271\6\23\1\0\1\23\1\0\6\23\21\0"+
    "\1\23\3\0\4\23\1\0\3\23\1\272\11\23\1\0"+
    "\1\23\1\0\6\23\30\0\1\273\50\0\1\23\3\0"+
    "\3\23\1\274\1\0\15\23\1\0\1\23\1\0\6\23"+
    "\37\0\1\275\41\0\1\23\3\0\4\23\1\0\5\23"+
    "\1\276\7\23\1\0\1\23\1\0\6\23\40\0\1\277"+
    "\40\0\1\23\3\0\4\23\1\0\6\23\1\300\6\23"+
    "\1\0\1\23\1\0\6\23\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6432];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\1\1\11\11\22\1\3\0"+
    "\1\11\2\0\3\1\1\0\7\1\1\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\5\1\1\0\1\1\1\11\6\1\1\11\5\1\1\11"+
    "\6\1\1\11\1\1\1\0\1\1\2\0\3\1\1\0"+
    "\3\1\1\0\6\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\0\3\1\1\11\6\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\5\1\1\0\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\2\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public analizador_lexico(java.io.Reader in) {
      yyline=1;
    yychar=1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { Error_ nuevoError = new Error_(yyline,yycolumn,yytext(),true);
    lista_errores.add(nuevoError);
            } 
            // fall through
          case 52: break;
          case 2: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Menor que-");
    listaTokens.add(ntk);
    return new Symbol(sym.MENOR_QUE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 53: break;
          case 3: 
            { System.out.println("Comentario 1 linea");
            } 
            // fall through
          case 54: break;
          case 4: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Mayor que-");
    listaTokens.add(ntk);
    return new Symbol(sym.MAYOR_QUE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 55: break;
          case 5: 
            { 
            } 
            // fall through
          case 56: break;
          case 6: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Dos Puntos-");
    listaTokens.add(ntk);
    return new Symbol(sym.DOS_PUNTOS, yyline, yycolumn, yytext());
            } 
            // fall through
          case 57: break;
          case 7: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Guion-");
    listaTokens.add(ntk);
    return new Symbol(sym.GUION, yyline, yycolumn, yytext());
            } 
            // fall through
          case 58: break;
          case 8: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Coma-");
    listaTokens.add(ntk);
    return new Symbol(sym.COMA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 59: break;
          case 9: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Punto y coma-");
    listaTokens.add(ntk);
    return new Symbol(sym.PUNTO_Y_COMA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 60: break;
          case 10: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Parentesis izquierdo-");
    listaTokens.add(ntk);
    return new Symbol(sym.PARENTESIS_IZQUIERDO, yyline, yycolumn, yytext());
            } 
            // fall through
          case 61: break;
          case 11: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Parentesis derecho-");
    listaTokens.add(ntk);
    return new Symbol(sym.PARENTESIS_DERECHO, yyline, yycolumn, yytext());
            } 
            // fall through
          case 62: break;
          case 12: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Corchete izquierdo-");
    listaTokens.add(ntk);
    return new Symbol(sym.CORCHETE_IZQUIERDO, yyline, yycolumn, yytext());
            } 
            // fall through
          case 63: break;
          case 13: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Corchete derecho-");
    listaTokens.add(ntk);
    return new Symbol(sym.CORCHETE_DERECHO, yyline, yycolumn, yytext());
            } 
            // fall through
          case 64: break;
          case 14: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Lexema -Signo igual-");
    listaTokens.add(ntk);
    return new Symbol(sym.SIGNO_IGUAL, yyline, yycolumn, yytext());
            } 
            // fall through
          case 65: break;
          case 15: 
            { Token ntk = new Token(yyline,yycolumn,yytext(),"Double");listaTokens.add(ntk) ; return new Symbol(sym.NUMEROS, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 66: break;
          case 16: 
            { Token ntk = new Token(yyline,yycolumn,yytext(),"Id");listaTokens.add(ntk) ; return new Symbol(sym.ID,yyline, yycolumn, yytext());
            } 
            // fall through
          case 67: break;
          case 17: 
            { Token ntk = new Token(yyline,yycolumn,yytext(),"STRING");listaTokens.add(ntk); return new Symbol(sym.STRING, yyline, yycolumn, yytext());
            } 
            // fall through
          case 68: break;
          case 18: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: ARRAY");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_ARRAY, yyline, yycolumn, yytext());
            } 
            // fall through
          case 69: break;
          case 19: 
            { Token ntk = new Token(yyline,yycolumn,yytext(),"ID array");listaTokens.add(ntk); return new Symbol(sym.IDE, yyline, yycolumn, yytext()) ;
            } 
            // fall through
          case 70: break;
          case 20: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: RESTA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_RESTA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 71: break;
          case 21: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MODULO");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MODULO, yyline, yycolumn, yytext());
            } 
            // fall through
          case 72: break;
          case 22: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MAX");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MAX, yyline, yycolumn, yytext());
            } 
            // fall through
          case 73: break;
          case 23: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MULTIPLICACION");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MULTIPLICACION, yyline, yycolumn, yytext());
            } 
            // fall through
          case 74: break;
          case 24: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MIN");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MIN, yyline, yycolumn, yytext());
            } 
            // fall through
          case 75: break;
          case 25: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: END");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_END, yyline, yycolumn, yytext());
            } 
            // fall through
          case 76: break;
          case 26: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: DIVISION");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_DIVISION, yyline, yycolumn, yytext());
            } 
            // fall through
          case 77: break;
          case 27: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: VAR");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_VAR, yyline, yycolumn, yytext());
            } 
            // fall through
          case 78: break;
          case 28: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: SUMA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_SUMA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 79: break;
          case 29: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MODA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MODA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 80: break;
          case 30: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: EXEC");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_EXEC, yyline, yycolumn, yytext());
            } 
            // fall through
          case 81: break;
          case 31: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: EJEX_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_EJEX_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 82: break;
          case 32: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: EJEY_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_EJEY_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 83: break;
          case 33: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: CHAR");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_CHAR, yyline, yycolumn, yytext());
            } 
            // fall through
          case 84: break;
          case 34: 
            { System.out.println("Comentario multilinea");
            } 
            // fall through
          case 85: break;
          case 35: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: LABEL_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESRVADA_LABEL_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 86: break;
          case 36: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: PRINT");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_PRINT, yyline, yycolumn, yytext());
            } 
            // fall through
          case 87: break;
          case 37: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MEDIA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MEDIA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 88: break;
          case 38: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: DOUBLE");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_DOUBLE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 89: break;
          case 39: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: VALUES_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_VALUES_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 90: break;
          case 40: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: COLUMN");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_COLUMN, yyline, yycolumn, yytext());
            } 
            // fall through
          case 91: break;
          case 41: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: TITULO_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_TITULO_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 92: break;
          case 42: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: PROGRAM");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_PROGRAM, yyline, yycolumn, yytext());
            } 
            // fall through
          case 93: break;
          case 43: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: MEDIANA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_MEDIANA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 94: break;
          case 44: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: CONSOLE");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_CONSOLE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 95: break;
          case 45: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: TITULOX_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_TITULOX_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 96: break;
          case 46: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: TITULOY_GRAFICA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_TITULOY_GRAFICA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 97: break;
          case 47: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: GRAFICA_PIE");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_GRAFICA_PIE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 98: break;
          case 48: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: GRAFICA_BARRA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_GRAFICA_BARRA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 99: break;
          case 49: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: VARIANZA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_VARIANZA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 100: break;
          case 50: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: GRAFIA_HISTOGRAMA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_GRAFIA_HISTOGRAMA, yyline, yycolumn, yytext());
            } 
            // fall through
          case 101: break;
          case 51: 
            { Token ntk = new Token(yyline, yycolumn, yytext(), "Palabra Reservada: GRAFICA_LINEA");
    listaTokens.add(ntk);
    return new Symbol(sym.RESERVADA_GRAFICA_LINE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
