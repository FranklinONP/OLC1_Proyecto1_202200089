package Analizadores;

import java.util.Arrays;
import java.util.LinkedList;
import java_cup.runtime.*;
import Errores.Error_;
import GUI.gui;
import DB.ts;
import java.util.HashMap;
import java.util.Map;
 
parser code
{:
    public static int calcularMaximo(int[] numeros) {
        int maximo = Integer.MIN_VALUE;

        for (int numero : numeros) {
            if (numero > maximo) {
                maximo = numero;
            }
        }

        return maximo;
    }

    public static int calcularMinimo(int[] numeros) {
        int minimo = Integer.MAX_VALUE;

        for (int numero : numeros) {
            if (numero < minimo) {
                minimo = numero;
            }
        }

        return minimo;
    }

    
      public static double calcularVarianza(int[] numeros) {
        // Calcular la media
        double media = calcularMedia(numeros);

        // Calcular la suma de los cuadrados de las diferencias entre cada número y la media
        double sumaCuadradosDiferencias = 0;

        for (int numero : numeros) {
            double diferencia = numero - media;
            sumaCuadradosDiferencias += diferencia * diferencia;
        }

        // Calcular la varianza dividiendo la suma de los cuadrados por la cantidad de elementos
        double varianza = sumaCuadradosDiferencias / numeros.length;

        return varianza;
    }

     public static double calcularMedia(int[] numeros) {
        int suma = 0;

        for (int numero : numeros) {
            suma += numero;
        }

        return (double) suma / numeros.length;
    }

     public static int calcularModa(int[] numeros) {
        // Utilizamos un mapa para almacenar la frecuencia de cada número
        Map<Integer, Integer> frecuenciaMapa = new HashMap<>();

        // Calcular la frecuencia de cada número
        for (int numero : numeros) {
            frecuenciaMapa.put(numero, frecuenciaMapa.getOrDefault(numero, 0) + 1);
        }

        // Encontrar el número con la frecuencia máxima
        int moda = 0;
        int frecuenciaMaxima = 0;

        for (Map.Entry<Integer, Integer> entry : frecuenciaMapa.entrySet()) {
            int numero = entry.getKey();
            int frecuencia = entry.getValue();

            if (frecuencia > frecuenciaMaxima) {
                moda = numero;
                frecuenciaMaxima = frecuencia;
            }
        }

        return moda;
    }
    
    public static int[] convertirCadenaAArray(String numerosString) {
        String[] numerosStringArray = numerosString.split(",");
        int[] numeros = new int[numerosStringArray.length];

        for (int i = 0; i < numerosStringArray.length; i++) {
            numeros[i] = Integer.parseInt(numerosStringArray[i]);
        }

        return numeros;
    }

    public static double calcularMediana(int[] numeros) {
        int n = numeros.length;
        if (n % 2 == 0) {
            // Si hay un número par de elementos, promediar los dos valores centrales
            int indice1 = n / 2 - 1;
            int indice2 = n / 2;
            return (numeros[indice1] + numeros[indice2]) / 2.0;
        } else {
            // Si hay un número impar de elementos, devolver el valor central
            int indiceCentral = n / 2;
            return numeros[indiceCentral];
        }
    }


    
    public static String arregloTemporal="";
   
    public static String obtenerValor(LinkedList<ts> lista, String nombreBuscado) {
        for (ts item : lista) {
            if (item.getNombre().equals(nombreBuscado)) {
                return item.getValor();
            }
        }
        return null; // Retorna null si no se encuentra el nodo
    }





    public void syntax_error(Symbol s)
    {
        //System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value);
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }



    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("Error de sintaxis en la linea " + (s.left) + ", columna " + (s.right) + ". No se esperaba " + s.value );
        Error_ nuevoError = new Error_(s.left,s.right,s.value.toString(),false);
        gui.lista_errores.add(nuevoError);
    }
 
:}


terminal ID,DOS_PUNTOS,MENOR_QUE,MAYOR_QUE,GUION,PUNTO,COMA,PUNTO_Y_COMA,PARENTESIS_IZQUIERDO,
PARENTESIS_DERECHO, CORCHETE_IZQUIERDO, CORCHETE_DERECHO, SIGNO_IGUAL,RESERVADA_PROGRAM,
RESERVADA_END, RESERVADA_VAR, RESERVADA_DOUBLE, RESERVADA_CHAR, RESERVADA_ARRAY, RESERVADA_SUMA,
RESERVADA_RESTA, RESERVADA_MULTIPLICACION, RESERVADA_DIVISION, RESERVADA_MODULO, RESERVADA_MEDIA, 
RESERVADA_MEDIANA, RESERVADA_MODA, RESERVADA_VARIANZA, RESERVADA_MAX, RESERVADA_MIN, RESERVADA_CONSOLE,
RESERVADA_PRINT,RESERVADA_COLUMN, RESERVADA_GRAFICA_BARRA, RESERVADA_GRAFICA_PIE, RESERVADA_GRAFICA_LINE,
RESERVADA_GRAFIA_HISTOGRAMA, RESERVADA_TITULO_GRAFICA, RESERVADA_EJEX_GRAFICA, RESERVADA_EJEY_GRAFICA, 
RESERVADA_TITULOX_GRAFICA, RESERVADA_TITULOY_GRAFICA, RESERVADA_VALUES_GRAFICA, RESRVADA_LABEL_GRAFICA,
RESERVADA_EXEC,STRING,NUMEROS,IDE;

non terminal inicio,codigo, declaraciones,textos,numericas,arreglos,acciones;
non terminal print,aritmeticas,declaracion,accion,printSimple,valorPrint;
non terminal combinacion, combinado,cod;
non terminal  suma,resta,multiplicacion,division,modulo;
non terminal valorAritmetico,anidacion,tipoAnidada;
non terminal tipoArreglo,contenido,contenido2,ultimo;
non terminal ultimoE,contenidoE,contenidoEE,estadisticas,media,mediana,moda,varianza,max,min;
non terminal desicionprint,print1,print2;
non terminal contenidoD,contenidoS,contenido2s,ultimoS;
non terminal graficas, pie,barras,linea,histograma,valorNumerico,comb,text;
non terminal pp,ppp,ap;
non terminal opide;
//==============================================================================
start with inicio;
//==============================================================================



//==============================================================================
inicio::= RESERVADA_PROGRAM codigo RESERVADA_END RESERVADA_PROGRAM;
//==============================================================================



//==============================================================================
codigo::= cod|cod codigo;
cod::=textos | numericas | arreglos|print|graficas;
//==============================================================================

//Declaraciones de variables
//==============================================================================
textos::=   RESERVADA_VAR 
            DOS_PUNTOS 
            RESERVADA_CHAR
            CORCHETE_IZQUIERDO  
            CORCHETE_DERECHO    
            DOS_PUNTOS DOS_PUNTOS 
            ID:id 
            MENOR_QUE 
            GUION 
            text:vs 
            RESERVADA_END 
            PUNTO_Y_COMA
            
            {:
             ts news = new ts(id.toString(),vs.toString(),"Variable Char",vsleft,vsright);
             gui.listaSimbolos.add(news);

            :};
text::=ID:iddd {: RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);:}|STRING:c {: RESULT= c; :};
//==============================================================================


//==============================================================================
//tanto aca como arriba en el valor numerico puede venir un numerico o una variable que tenga un valor numerico
numericas::=RESERVADA_VAR
            DOS_PUNTOS
            RESERVADA_DOUBLE
            DOS_PUNTOS
            DOS_PUNTOS
            ID:id
            MENOR_QUE
            GUION
            valorNumerico:vn
            RESERVADA_END
            PUNTO_Y_COMA
            {:
            arregloTemporal="";
             ts news = new ts(id.toString(),vn.toString(),"Variable Double",vnleft,vnright);
             gui.listaSimbolos.add(news);
            
            :};

valorNumerico::= NUMEROS:c {: RESULT= c; :} |ID:iddd{: RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);:}
                |aritmeticas:c {: RESULT= c; :}
                |estadisticas:c {: RESULT= c; :};
//==============================================================================
arreglos::=RESERVADA_ARRAY DOS_PUNTOS tipoArreglo:ta DOS_PUNTOS DOS_PUNTOS
           IDE:ide MENOR_QUE GUION CORCHETE_IZQUIERDO contenidoD:cont  RESERVADA_END PUNTO_Y_COMA
           {: 
            arregloTemporal="";
            ts news = new ts(ide.toString(),cont.toString(),ta.toString(),contleft,contright);
            gui.listaSimbolos.add(news);
            
            :};
tipoArreglo::=RESERVADA_DOUBLE{: RESULT= "Arreglo Double"; :}|RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO{: RESULT="Arreglo Char"; :};

contenidoD::=contenido :c {: arregloTemporal="["+arregloTemporal;RESULT= arregloTemporal; :} 
            |contenidoS :c {: arregloTemporal="["+arregloTemporal;RESULT= arregloTemporal; :} ;

//aun con errores
contenidoS::= STRING:s COMA:c contenidoS {:arregloTemporal=s.toString()+c.toString()+arregloTemporal;:} 
            |opide:s {:RESULT=s;:}       
            |STRING:s CORCHETE_DERECHO {: arregloTemporal=s.toString()+arregloTemporal+"]"; :}
            |ID:id CORCHETE_DERECHO {:arregloTemporal=arregloTemporal+obtenerValor(gui.listaSimbolos,(String) id)+"]";:} ;

opide::=  ID:id COMA:c {:arregloTemporal=arregloTemporal+obtenerValor(gui.listaSimbolos,(String) id)+",";:}  ;    


contenido::= contenido2 contenido|contenido2 ultimo;
contenido2::= anidacion:an COMA:c {:arregloTemporal=arregloTemporal+an.toString()+",";:} 

            | NUMEROS:n COMA {:arregloTemporal=arregloTemporal+n.toString()+",";:}

            |opide:s {: RESULT=s;:}

            |estadisticas:e COMA {:arregloTemporal=arregloTemporal+e.toString()+",";:} 
            ;

ultimo::= ID:id CORCHETE_DERECHO {:arregloTemporal=arregloTemporal+obtenerValor(gui.listaSimbolos,(String) id)+"]";:} 
          |NUMEROS:n CORCHETE_DERECHO {:arregloTemporal=arregloTemporal+n.toString()+"]";:}
          |anidacion:a CORCHETE_DERECHO {:arregloTemporal=arregloTemporal+a.toString()+"]";:}
          |estadisticas:e CORCHETE_DERECHO  {:  System.out.println(e.toString());
                                                arregloTemporal=arregloTemporal+e.toString()+"]";:} ;

//==============================================================================
//==============================================================================


//==============================================================================


//==============================================================================
aritmeticas ::= suma:r{:RESULT=r;:}|resta:r{:RESULT=r;:}|multiplicacion:r{:RESULT=r;:}|division:r{:RESULT=r;:}|modulo:r {:RESULT=r;:};

suma::= RESERVADA_SUMA PARENTESIS_IZQUIERDO valorAritmetico:a COMA valorAritmetico:b PARENTESIS_DERECHO  {:
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x + y;
  System.out.println("\n" + "Suma es: " + r + "\n");
  RESULT=r; :};


resta::=RESERVADA_RESTA PARENTESIS_IZQUIERDO valorAritmetico:a COMA valorAritmetico:b PARENTESIS_DERECHO {:
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x - y;
  System.out.println("\n" + "Resta es: " + r + "\n");
    RESULT=r; :};

multiplicacion::=RESERVADA_MULTIPLICACION PARENTESIS_IZQUIERDO valorAritmetico:a COMA valorAritmetico:b PARENTESIS_DERECHO  {:
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x * y;
  System.out.println("\n" + "Multiplicacion es: " + r + "\n"); 
  RESULT=r;  :};

division::=RESERVADA_DIVISION PARENTESIS_IZQUIERDO valorAritmetico:a COMA valorAritmetico:b PARENTESIS_DERECHO {:
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x / y;
  System.out.println("\n" + "Division es: " + r + "\n");
  RESULT=r;   :};

modulo::=RESERVADA_MODULO PARENTESIS_IZQUIERDO valorAritmetico:a COMA valorAritmetico:b PARENTESIS_DERECHO  {:
  String strA = a.toString();
  String strB = b.toString();

  float x = Float.parseFloat(strA);
  float y = Float.parseFloat(strB);

  float r = x % y;
  System.out.println("\n" + "Modulo es: " + r + "\n");
  RESULT=r;   :};

tipoAnidada::=RESERVADA_SUMA {:RESULT="suma";:} |RESERVADA_RESTA {:RESULT="resta";:}|RESERVADA_MULTIPLICACION {:RESULT="multiplicacion";:}|RESERVADA_DIVISION {:RESULT="division";:}|RESERVADA_MODULO {:RESULT="modulo";:};

valorAritmetico::= NUMEROS:c {: RESULT= c; :}|ID:c {: RESULT = obtenerValor(gui.listaSimbolos,(String) c);:}|anidacion :c {: RESULT=c; :}|estadisticas:c=1{: RESULT=c; :};//para mientras lo de estadistico===========================
anidacion::= tipoAnidada:to PARENTESIS_IZQUIERDO valorAritmetico:c COMA valorAritmetico:d PARENTESIS_DERECHO {: 
  String strC = c.toString();
  String strD = d.toString();

  float x = Float.parseFloat(strC);
  float y = Float.parseFloat(strD);
  
  if (to.equals("suma")) {
    float r = x + y;
    RESULT = r;
} else if (to.equals("resta")) {
    float r = x - y; // Fix: Change '+' to '-'
    RESULT = r;
} else if (to.equals("multiplicacion")) {
    float r = x * y; 
    RESULT = r;
} else if (to.equals("division")) {
    float r = x / y; 
    RESULT = r;
} else if (to.equals("modulo")) {
    float r = x % y;
    RESULT = r;
}

   :};
//==============================================================================
//Todas las funciones estadisticas
estadisticas::=media:c {:RESULT=c;:} |mediana:c {:RESULT=c;:} |moda:c {:RESULT=c;:} |varianza:c {:RESULT=c;:} |max:c {:RESULT=c;:} |min:c {:RESULT=c;:} ;

contenidoE::= CORCHETE_IZQUIERDO contenidoEE
            |IDE:c {:RESULT=obtenerValor(gui.listaSimbolos,(String) c);:} ;

contenidoEE::=NUMEROS:n COMA contenidoEE {:arregloTemporal=n.toString()+","+arregloTemporal;:}
            |anidacion:n COMA contenidoEE{:arregloTemporal=n.toString()+","+arregloTemporal;:}
            |ID:n contenidoEE {:arregloTemporal=n.toString()+","+arregloTemporal;:}
            |NUMEROS:n CORCHETE_DERECHO {:arregloTemporal=n.toString()+arregloTemporal;:}
            |anidacion:n CORCHETE_DERECHO{:arregloTemporal=n.toString()+arregloTemporal;:}
            |ID:n CORCHETE_DERECHO {:arregloTemporal=obtenerValor(gui.listaSimbolos,(String) n)+arregloTemporal;:} ;

//2 formas con un arreglo o con mezcla de numeros,artimeticas,id(double)

media::=RESERVADA_MEDIA PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
        ts news = new ts("cadena",arregloTemporal,"Variable Double",1,1);
            gui.listaSimbolos.add(news);
        String[] numerosArray = arregloTemporal.split(",");
        double suma = 0;
         for (String numeroStr : numerosArray) {
            try {
                double numero = Double.parseDouble(numeroStr);
                suma += numero; // Sumamos el número al total
            } catch (NumberFormatException e) {
                
            }
        }
         double media = suma / numerosArray.length ;
        RESULT=media;
        :} ;
mediana::= RESERVADA_MEDIANA PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
        int[] numeros = convertirCadenaAArray(arregloTemporal);
        Arrays.sort(numeros);
        double mediana = calcularMediana(numeros);
        RESULT=mediana;:} ;
moda::= RESERVADA_MODA PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
        int[] numeros = convertirCadenaAArray(arregloTemporal);
        int moda = calcularModa(numeros);
        RESULT=moda;:} ;
varianza::= RESERVADA_VARIANZA PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
        int[] numeros = convertirCadenaAArray(arregloTemporal);
        double varianza = calcularVarianza(numeros);
        RESULT=varianza;:} ;
max::=  RESERVADA_MAX PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
        int[] numeros = convertirCadenaAArray(arregloTemporal);
        int maximo = calcularMaximo(numeros);
        RESULT=maximo;:} ;
min::= RESERVADA_MIN PARENTESIS_IZQUIERDO contenidoE:c PARENTESIS_DERECHO {:
       int[] numeros = convertirCadenaAArray(arregloTemporal);
       int minimo = calcularMinimo(numeros);
       RESULT=minimo;:} ;

//==============================================================================
//hasta el momento solo combina numeros y string
print::= 
    RESERVADA_CONSOLE:e1
    DOS_PUNTOS:e2 
    DOS_PUNTOS:e3
    desicionprint;

desicionprint::=print1|print2;

print1::=
    RESERVADA_PRINT:e4  
    SIGNO_IGUAL:e5 
    valorPrint:s 
    RESERVADA_END:e6 
    PUNTO_Y_COMA:e7
    {: 
        System.out.println("\n"+"Print desde el cup de la cadena: " + s+"\n");
        gui.listaPrint.add((String) s);
    :};



valorPrint ::= STRING:s {: RESULT = s; :}
            | NUMEROS:n {: RESULT = n; :}
            | ID:iddd {: RESULT = obtenerValor(gui.listaSimbolos,(String) iddd);  :}
            | aritmeticas:ar {: RESULT = ar; :}
            | estadisticas:st {: RESULT = st; :}
            | combinado:c {: RESULT = c; :};

combinado ::= combinacion:c combinado:cc {: RESULT = c.toString() + cc.toString(); :}
            | combinacion:c {: RESULT = c.toString(); :}
            | combinacion:c comb:r{: RESULT = c.toString() + r.toString(); :};

combinacion ::= STRING:s COMA {: RESULT = s; :}
             | NUMEROS:n COMA {: RESULT = n.toString(); :}
             | aritmeticas:ar COMA {: RESULT = ar; :}
             | estadisticas:st COMA {: RESULT = st; :}
             | ID:iddd COMA {: RESULT = iddd; :};

comb ::= STRING:s {: RESULT = s; :}
        | ID:iddd {: RESULT = iddd; :}
        | aritmeticas:ar {: RESULT = ar; :}
        | estadisticas:st {: RESULT = st; :}
        | NUMEROS:n {: RESULT = n.toString(); :};



print2::=RESERVADA_COLUMN 
        SIGNO_IGUAL
        pp
        GUION
        MAYOR_QUE
        ppp
        RESERVADA_END
        PUNTO_Y_COMA;

pp::=STRING|ID;
ppp::=IDE|CORCHETE_IZQUIERDO contenidoD ;

//====================================================== GRAFICAS =========================================
graficas::=pie|barras|linea|histograma;

pie::=  RESERVADA_GRAFICA_PIE
        PARENTESIS_IZQUIERDO

        RESRVADA_LABEL_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR  CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA
        
        
        RESERVADA_VALUES_GRAFICA 
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_TITULO_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_EXEC   RESERVADA_GRAFICA_PIE  RESERVADA_END PUNTO_Y_COMA
     

        PARENTESIS_DERECHO  RESERVADA_END  PUNTO_Y_COMA;

barras::=RESERVADA_GRAFICA_BARRA
        PARENTESIS_IZQUIERDO

        RESERVADA_TITULO_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR  CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA
        
        
        RESERVADA_EJEX_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA
       
        RESERVADA_EJEY_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_TITULOX_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA


        RESERVADA_TITULOY_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_EXEC   RESERVADA_GRAFICA_BARRA  RESERVADA_END PUNTO_Y_COMA
     
        PARENTESIS_DERECHO  RESERVADA_END  PUNTO_Y_COMA;

linea::= RESERVADA_GRAFICA_LINE
        PARENTESIS_IZQUIERDO

        RESERVADA_TITULO_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR  CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA
        
        
        RESERVADA_EJEX_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoS RESERVADA_END PUNTO_Y_COMA
       
        RESERVADA_EJEY_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_DOUBLE SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_TITULOX_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA


        RESERVADA_TITULOY_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA
       

        RESERVADA_EXEC RESERVADA_GRAFICA_LINE  RESERVADA_END PUNTO_Y_COMA
     
        PARENTESIS_DERECHO  RESERVADA_END  PUNTO_Y_COMA;

histograma::= RESERVADA_GRAFIA_HISTOGRAMA
        PARENTESIS_IZQUIERDO
        RESERVADA_TITULO_GRAFICA
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR  CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL STRING RESERVADA_END PUNTO_Y_COMA

        RESERVADA_VALUES_GRAFICA 
        DOS_PUNTOS DOS_PUNTOS
        RESERVADA_CHAR CORCHETE_IZQUIERDO CORCHETE_DERECHO SIGNO_IGUAL CORCHETE_IZQUIERDO contenidoD RESERVADA_END PUNTO_Y_COMA

        RESERVADA_EXEC RESERVADA_GRAFIA_HISTOGRAMA  RESERVADA_END PUNTO_Y_COMA
     
        PARENTESIS_DERECHO  RESERVADA_END  PUNTO_Y_COMA;

